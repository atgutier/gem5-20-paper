  1564	Gabe Black <gabeblack@google.com>
   750	Andreas Hansson <andreas.hanson@arm.com>
   639	Andreas Sandberg <Andreas.Sandberg@arm.com>
   522	Nilay Vaish <nilay@cs.wisc.edu>
   430	Giacomo Travaglini <giacomo.travaglini@arm.com>
   226	Daniel Carvalho <odanrc@yahoo.com.br>
   211	Nikos Nikoleris <nikos.nikoleris@arm.com>
   190	Ali Saidi <Ali.Saidi@arm.com>
   132	Steve Reinhardt <stever@gmail.com>
   112	Brandon Potter <brandon.potter@amd.com>
   111	Curtis Dunham <Curtis.Dunham@arm.com>
    96	Tony Gutierrez <anthony.gutierrez@amd.com>
    88	Jason Lowe-Power <jason@lowepower.com>
    84	Korey Sewell <ksewell@umich.edu>
    82	Bobby R. Bruce <bbruce@ucdavis.edu>
    78	Ciro Santilli <ciro.santilli@arm.com>
    74	Mitch Hayenga <mitch.hayenga@arm.com>
    59	Adrian Herrera <adrian.herrera@arm.com>
    56	Alec Roelke <alec.roelke@gmail.com>
    48	Brad Beckmann <brad.beckmann@amd.com>
    43	Joel Hestness <jthestness@gmail.com>
    36	Geoffrey Blake <geoffrey.blake@arm.com>
    34	David Hashe <david.hashe@amd.com>
    33	Gabor Dozsa <gabor.dozsa@arm.com>
    31	Javier Bueno Hedo <javier.bueno@metempsy.com>
    30	Tiago Mück <tiago.muck@arm.com>
    28	Andrew Bardsley <Andrew.Bardsley@arm.com>
    28	Sean Wilson <spwilson2@wisc.edu>
    28	Tuan Ta <qtt2@cornell.edu>
    27	Alexandru Dutu <alexandru.dutu@amd.com>
    26	Dam Sunwoo <dam.sunwoo@arm.com>
    26	Sascha Bischoff <sascha.bischoff@arm.com>
    25	Giacomo Gabrielli <giacomo.gabrielli@arm.com>
    25	Nils Asmussen <nils.asmussen@barkhauseninstitut.org>
    25	Stephan Diestelhorst <stephan.diestelhorst@arm.com>
    23	Chun-Chen Hsu <chunchenhsu@google.com>
    22	Rekai Gonzalez-Alberquilla <rekai.gonzalezalberquilla@arm.com>
    21	Andrea Mondelli <andrea.mondelli@ucf.edu>
    21	Matthew Poremba <matthew.poremba@amd.com>
    21	Radhika Jagtap <radhika.jagtap@arm.com>
    20	Christian Menard <christian.menard@tu-dresden.de>
    19	Bjoern A. Zeeb <baz21@cam.ac.uk>
    18	Anouk Van Laer <anouk.vanlaer@arm.com>
    18	Pau Cabre <pau.cabre@metempsy.com>
    18	Wendy Elsasser <wendy.elsasser@arm.com>
    17	Dylan Johnson <Dylan.Johnson@ARM.com>
    17	Michael LeBeane <michael.lebeane@amd.com>
    15	David Guillen-Fandos <david.guillen@arm.com>
    15	Nathanael Premillieu <nathanael.premillieu@arm.com>
    15	Pouya Fotouhi <pfotouhi@ucdavis.edu>
    15	Timothy Hayes <timothy.hayes@arm.com>
    15	Tushar Krishna <tushar@ece.gatech.edu>
    14	Jordi Vaquero <jordi.vaquero@metempsy.com>
    14	Lena Olson <leolson@google.com>
    13	Chander Sudanthi <chander.sudanthi@arm.com>
    13	Jose Marinho <jose.marinho@arm.com>
    13	Omar Naji <Omar.Naji@arm.com>
    12	Akash Bagdia <akash.bagdia@ARM.com>
    12	Chuan Zhu <chuan.zhu@arm.com>
    12	Matteo Andreozzi <matteo.andreozzi@arm.com>
    11	Ali Jafri <ali.jafri@arm.com>
    11	Jairo Balart <jairo.balart@metempsy.com>
    11	Nathan Binkert <nate@binkert.org>
    10	Malek Musleh <malek.musleh@gmail.com>
    10	Matthias Jung <jungma@eit.uni-kl.de>
     9	Gedare Bloom <gedare@rtems.org>
     9	Marc Orr <marc.orr@gmail.com>
     9	Marco Elver <Marco.Elver@ARM.com>
     9	Mrinmoy Ghosh <mrinmoy.ghosh@arm.com>
     9	Ryan Gambord <gambordr@oregonstate.edu>
     8	Ayaz Akram <yazakram@ucdavis.edu>
     8	Deyaun Guo <guodeyuan@tsinghua.org.cn>
     8	Glenn Bergmans <glenn.bergmans@arm.com>
     8	Matt Evans <matt.evans@arm.com>
     8	Peter Enns <Peter.Enns@arm.com>
     7	Abdul Mutaal Ahmad <abdul.mutaal@gmail.com>
     7	Chris Emmons <chris.emmons@arm.com>
     7	Hanhwi Jang <jang.hanhwi@gmail.com>
     7	IanJiangICT <ianjiang.ict@gmail.com>
     7	Joe Gross <joe.gross@amd.com>
     7	Matt Horsnell <matt.horsnell@arm.com>
     7	Prakash Ramrakhyani <prakash.ramrakhyani@arm.com>
     6	Andrew Lukefahr <lukefahr@umich.edu>
     6	Ani Udipi <ani.udipi@arm.com>
     6	Javier Setoain <javier.setoain@arm.com>
     6	Neha Agarwal <neha.agarwal@arm.com>
     6	Siddhesh Poyarekar <siddhesh.poyarekar@gmail.com>
     6	Yasuko Eckert <yasuko.eckert@amd.com>
     5	Arthur Perais <arthur.perais@inria.fr>
     5	Austin Harris <austinharris@utexas.edu>
     5	Boris Shingarov <shingarov@gmail.com>
     5	Earl Ou <shunhsingou@google.com>
     5	Faissal Sleiman <Faissal.Sleiman@arm.com>
     5	Hoa Nguyen <hoanguyen@ucdavis.edu>
     5	Ivan Pizarro <ivan.pizarro@metempsy.com>
     5	Matt Sinclair <mattdsinclair@gmail.com>
     5	Paul Rosenfeld <prosenfeld@micron.com>
     5	Rahul Thakur <rjthakur@google.com>
     5	Robert Kovacsics <rmk35@cl.cam.ac.uk>
     5	Timothy M. Jones <timothy.jones@arm.com>
     5	Uri Wiener <uri.wiener@arm.com>
     4	Binh Pham <binhpham@cs.rutgers.edu>
     4	Daniel Johnson <daniel.johnson@arm.com>
     4	Emilio Castillo <castilloe@unican.es>
     4	Erfan Azarkhish <erfan.azarkhish@unibo.it>
     4	Jayneel Gandhi <jayneel@cs.wisc.edu>
     4	Lisa Hsu <Lisa.Hsu@amd.com>
     4	Marco Balboni <Marco.Balboni@ARM.com>
     4	Michiel Van Tol <michiel.vantol@arm.com>
     4	Mohammad Alian <m.alian1369@gmail.com>
     4	Palle Lyckegaard <palle@lyckegaard.dk>
     4	Rico Amslinger <rico.amslinger@informatik.uni-augsburg.de>
     4	Ruslan Bukin <br@bsdpad.com>
     4	Srikant Bharadwaj <srikant.bharadwaj@amd.com>
     4	Sudhanshu Jha <sudhanshu.jha@arm.com>
     4	Swapnil Haria <swapnilster@gmail.com>
     4	Tommaso Marinelli <tommarin@ucm.es>
     4	Yu-hsin Wang <yuhsingw@google.com>
     3	Adrien Pesle <adrien.pesle@arm.com>
     3	Amin Farmahini <aminfar@gmail.com>
     3	Bradley Wang <radwang@ucdavis.edu>
     3	Brian Grayson <b.grayson@samsung.com>
     3	Christopher Torng <clt67@cornell.edu>
     3	Djordje Kovacevic <djordje.kovacevic@arm.com>
     3	Eric Van Hensbergen <eric.vanhensbergen@arm.com>
     3	Hsuan Hsu <hsuan.hsu@mediatek.com>
     3	Isaac Sánchez Barrera <isaac.sanchez@bsc.es>
     3	Jing Qu <jqu32@wisc.edu>
     3	Jiuyue Ma <majiuyue@ncic.ac.cn>
     3	John Kalamatianos <john.kalamatianos@amd.com>
     3	Koan-Sin Tan <koansin.tan@gmail.com>
     3	Lluís Vilanova <vilanova@ac.upc.edu>
     3	Mahyar Samani <msamani@ucdavis.edu>
     3	Rene de Jong <rene.dejong@arm.com>
     3	Stan Czerniawski <stan.czerniawski@arm.com>
     3	William Wang <william.wang@arm.com>
     3	Éder F. Zulian <zulian@eit.uni-kl.de>
     2	Adrià Armejach <adria.armejach@bsc.es>
     2	Bertrand Marquis <bertrand.marquis@arm.com>
     2	Blake Hechtman <bah13@duke.edu>
     2	Cagdas Dirik <cdirik@micron.com>
     2	Dibakar Gope <gope@wisc.edu>
     2	Edmund Grimley Evans <Edmund.Grimley-Evans@arm.com>
     2	Jan-Peter Larsson <jan-peter.larsson@arm.com>
     2	Javier Cano-Cano <javier.cano555@gmail.com>
     2	Jieming Yin <jieming.yin@amd.com>
     2	John Alsop <johnathan.alsop@amd.com>
     2	Jui-min Lee <fcrh@google.com>
     2	Kanishk Sugand <kanishk.sugand@arm.com>
     2	Karthik Sangaiah <karthik.sangaiah@arm.com>
     2	Kevin Brodsky <kevin.brodsky@arm.com>
     2	Krishnendra Nathella <Krishnendra.Nathella@arm.com>
     2	Lluc Alvarez <lluc.alvarez@bsc.es>
     2	Marc Mari Barcelo <marc.maribarcelo@arm.com>
     2	Matt Poremba <matthew.poremba@amd.com>
     2	Matthias Hille <matthiashille8@gmail.com>
     2	Maurice Becker <madnaurice@googlemail.com>
     2	Michael Adler <Michael.Adler@intel.com>
     2	Michael Levenhagen <mjleven@sandia.gov>
     2	Mingyuan <xiang_my@outlook.com>
     2	Moyang Wang <mw828@cornell.edu>
     2	Nuwan Jayasena <Nuwan.Jayasena@amd.com>
     2	Pin-Yen Lin <treapking@google.com>
     2	Reiley Jeapaul <Reiley.Jeyapaul@arm.com>
     2	Riken Gohil <Riken.Gohil@arm.com>
     2	Rizwana Begum <rb639@drexel.edu>
     2	Rohit Kurup <rohit.kurup@arm.com>
     2	Ron Dreslinski <rdreslin@umich.edu>
     2	Rune Holm <rune.holm@arm.com>
     2	Sandipan Das <sandipan@linux.ibm.com>
     2	Sherif Elhabbal <elhabbalsherif@gmail.com>
     2	Stanislaw Czerniawski <stacze01@arm.com>
     2	Trivikram Reddy <tvreddy@ucdavis.edu>
     2	Victor Garcia <victor.garcia@arm.com>
     2	Vince Weaver <vince@csl.cornell.edu>
     2	Wade Walker <wade.walker@arm.com>
     2	Weiping Liao <weipingliao@google.com>
     2	Xiangyu Dong <rioshering@gmail.com>
     2	Xiaoyu Ma <xiaoyuma@google.com>
     2	Yuetsu Kodama <yuetsu.kodama@riken.jp>
     1	ARM gem5 Developers <none@none>
     1	Anders Handler <s052838@student.dtu.dk>
     1	Andrea Pellegrini <andrea.pellegrini@gmail.com>
     1	Andriani Mappoura <andriani.mappoura@arm.com>
     1	Anis Peysieux <anis.peysieux@inria.fr>
     1	Ashkan Tousi <ashkan.tousimojarad@arm.com>
     1	Avishai Tvila <avishai.tvila@gmail.com>
     1	Bagus Hanindhito <hanindhito@bagus.my.id>
     1	Chen Zou <chenzou@uchicago.edu>
     1	Chris Adeniyi-Jones <Chris.Adeniyi-Jones@arm.com>
     1	Christoph Pfister <pfistchr@student.ethz.ch>
     1	Dongxue Zhang <elta.era@gmail.com>
     1	Doğukan Korkmaztürk <d.korkmazturk@gmail.com>
     1	Erik Tomusk <E.Tomusk@sms.ed.ac.uk>
     1	Fernando Endo <fernando.endo2@gmail.com>
     1	Gabe Loh <gabriel.loh@amd.com>
     1	Georg Kotheimer <georg.kotheimer@mailbox.tu-dresden.de>
     1	Hamid Reza Khaleghzadeh <khaleghzadeh@gmail.com>
     1	Hongil Yoon <ongal@cs.wisc.edu>
     1	Hussein Elnawawy <hussein.elnawawy@gmail.com>
     1	Ilias Vougioukas <Ilias.Vougioukas@ARM.com>
     1	Isaac Richter <isaac.richter@rochester.edu>
     1	Jakub Jermar <jakub@jermar.eu>
     1	James Clarkson <james.clarkson@arm.com>
     1	Khalique <khalique913@gmail.com>
     1	Marjan Fariborz <mfariborz@ucdavis.edu>
     1	Mark Hildebrand <mhildebrand@ucdavis.edu>
     1	Matteo M. Fusi <matteo.fusi@bsc.es>
     1	Maxime Martinasso <maxime.cscs@gmail.com>
     1	Maximilian Stein <maximilian.stein@tu-dresden.de>
     1	Maximilien Breughe <maximilien.breughe@elis.ugent.be>
     1	Mike Upton <michaelupton@gmail.com>
     1	Min Kyu Jeong <minkyu.jeong@arm.com>
     1	Monir Mozumder <monir.mozumder@amd.com>
     1	Nayan Deshmukh <nayan26deshmukh@gmail.com>
     1	Nicholas Lindsay <nicholas.lindsay@arm.com>
     1	Nicolas Derumigny <nderumigny@gmail.com>
     1	Ola Jeppsson <ola.jeppsson@gmail.com>
     1	Pablo Prieto <pablo.prieto@unican.es>
     1	Po-Hao Su <supohaosu@gmail.com>
     1	Polydoros Petrakis <ppetrak@ics.forth.gr>
     1	Pritha Ghoshal <pritha9987@tamu.edu>
     1	Ricardo Alves <ricardo.alves@arm.com>
     1	Robert Scheffel <robert.scheffel1@tu-dresden.de>
     1	Ruben Ayrapetyan <ruben.ayrapetyan@arm.com>
     1	Rutuja Oza <roza@ucdavis.edu>
     1	Samuel Grayson <sam@samgrayson.me>
     1	Santi Galan <santi.galan@metempsy.com>
     1	Sean McGoogan <Sean.McGoogan@arm.com>
     1	Sergei Trofimov <sergei.trofimov@arm.com>
     1	Severin Wischmann <wiseveri@student.ethz.ch>
     1	Shawn Rosti <shawn.rosti@gmail.com>
     1	Sooraj Puthoor <puthoorsooraj@gmail.com>
     1	Sophiane Senni <sophiane.senni@gmail.com>
     1	Stian Hvatum <stian@dream-web.no>
     1	Sujay Phadke <electronicsguy123@gmail.com>
     1	Tao Zhang <tao.zhang.0924@gmail.com>
     1	Thomas Grass <Thomas.Grass@ARM.com>
     1	Tom Jablin <tjablin@gmail.com>
     1	Umesh Bhaskar <umesh.b2006@gmail.com>
     1	Willy Wolff <willy.mh.wolff.ml@gmail.com>
     1	Xianwei Zhang <xianwei.zhang@amd.com>
     1	Xin Ouyang <xin.ouyang@streamcomputing.com>
     1	Yifei Liu <liu.ad2039@gmail.com>
     1	Yuan Yao <yuanyao@seas.harvard.edu>
     1	Zhang Zheng <perise@gmail.com>
     1	Zicong Wang <wangzicong@nudt.edu.cn>
     1	Jiajie Chen <noc@jiegec.ac.cn>
     1	Zhengrong Wang <seanyukigeek@gmail.com>
Gabe Black <gabeblack@google.com> (1564):
      gcc 4.0: Add some virtual destructors to make gcc 4.0 happy.
      ISA parser: Loosen the regular expressions matching filenames.
      Mem: Use sysconf to get the page size instead of the PAGE_SIZE macro.
      LibElf: Build the error management code in libelf.
      Loader: Handle bad section names when loading an ELF file.
      InOder: Fix a compile error.
      X86: Eliminate an unused argument for building store microops.
      X86: Fix store microops so they don't drop faults in timing mode.
      Stats: Update stats for the x86 store fault fix.
      ISA: Use readBytes/writeBytes for all instruction level memory operations.
      ExecContext: Get rid of the now unused read/write templated functions.
      ExecContext: Rename the readBytes/writeBytes functions to readMem and writeMem.
      tracediff: Check for --debug-flags now instead of --trace-flags.
      ISA parser: Simplify operand type handling.
      ISA parser: Define operand types with a ctype directly.
      ISAs: Streamline some spots where Mem is used in the ISA descriptions.
      X86: Add a config for an FS regression on O3.
      ISA: Get rid of the unused mem_acc_type template parameter.
      SCons: Only print all the SConsopts being read if verbose is turned on.
      O3: Fix corner case squashing into the microcode ROM.
      Stats: Update stats for the recent fix to fetch.
      O3: Implement memory mapped IPRs for O3.
      Scons: Make some Action objects fit the abreviated output format.
      O3: Get rid of the raw ExtMachInst constructor on DynInsts.
      Translation: Use a pointer type as the template argument.
      Stats: Update the stats after the uninitialized branch predictor variable fix.
      O3: Let squashed and deferred instructions issue.
      Stats: Update stats for the previous change.
      O3: Get rid of the unused addToRemoveList function.
      O3: When waiting to handle an interrupt, let everything drain out.
      Stats: Update stats for the recent O3 interrupt change.
      O3: Stop using the current macroop no matter why you're leaving it.
      Stats: Update stats for the end of macroop O3 fix.
      X86: Build O3 by default in X86_FS.
      SCons,tests: Tell scons about pc-o3-timing regressions.
      O3: At the end of an instruction, force fetchAddr to something sensible.
      X86: Use IsSquashAfter if an instruction could affect fetch translation.
      Stats: Small update to stats for change to x86 inst flags.
      O3: Add a pointer to the macroop for a microop in the dyninst.
      O3: When squashing, restore the macroop that should be used for fetching.
      X86: Add an X86_FS o3 regression.
      O3: Make lsq_unit.hh include arch/isa_traits.hh directly, not transitively.
      InOrder: Make cache_unit.hh include hashmap.hh explicitly, not transitively.
      X86,TLB: Make sure the "delayedResponse" variable is always set.
      X86: Make sure instruction flags are set properly even on 32 bit machines.
      ISA parser: Match /* */ and // style comments.
      ISA parser: Don't look for operands in strings.
      Stack: Tidy up some comments, a warning, and make stack extension consistent.
      MIPS: Update MIPS stats for cleaned up operand checks.
      Decode: Pull instruction decoding out of the StaticInst class into its own.
      StaticInst: Merge StaticInst and StaticInstBase.
      PseudoInst: Add compiler guards to pseudo_inst.hh.
      Pseudoinst: Add an initParam pseudo inst function.
      PseudoInst: Remove the now unnecessary #if FULL_SYSTEMs around pseudoinsts.
      Syscall: Make the syscall function available in both SE and FS modes.
      X86: Don't use "#if FULL_SYSTEM" in the X86 ISA description.
      PseudoInst: Make all the pseudo insts available in SE and FS.
      Alpha: Get rid of some #if FULL_SYSTEMs in the Alpha ISA description.
      Endianness: Make it easier to check the compiled in guest endianness.
      MIPS: Get rid of the unused (and partially defined) CacheError fault.
      MIPS: Guard SystemCallFault::invoke consistently.
      MIPS: Get rid of #if style config checks in the ISA description.
      SPARC: Remove #if FULL_SYSTEMs from the ISA description.
      MIPS: Use the CRTP to streamline the Fault class definitions.
      MIPS: Add constructors to the fault classes.
      MIPS: Get rid of cruft in the fault classes.
      Faults: Get rid of the unused isAlignmentFault and isMachineCheckFault.
      MIPS: Consolidate the two AddressErrorFault variants.
      MIPS: Move the genMachineCheckFault function near MachineCheckFault.
      MIPS: Get rid of the unused "count" field in FaultVals.
      MIPS: Consolidate TLB related faults.
      MIPS: Always compile in setExceptionState, including in SE mode.
      MIPS: Use inheritance to consolidate class definitions.
      MIPS: Get rid of skipFaultInstruction and setRestartAddress.
      MIPS, faults: Update how the PC is set.
      MIPS: Final overhaul of MIPS faults to kill #if FULL_SYSTEM
      X86: Move the MSR lookup table out of the TLB and into its own file.
      SCons: Make the ISA parser a source for its output files like the comments say.
      SCons: Add a comment I forgot to add in earlier.
      SE/FS: Define a const bool FullSystem which will equal FULL_SYSTEM.
      ISA parser: Use '_' instead of '.' to delimit type modifiers on operands.
      Faults: Make the generic faults more consistent between SE and FS.
      Faults: Add in generic faults that work like panics, warns, etc.
      Faults: Replace calls to genMachineCheckFault with M5PanicFault.
      O3: Tidy up some DPRINTFs in the LSQ.
      SE/FS: Use the new FullSystem constant where possible.
      SE/FS: Build the devices in SE mode.
      X86: Remove FULL_SYSTEM from the x86 faults.
      SE/FS: Remove System::platform and Platform::intrFrequency.
      SE/FS: Put platform pointers in fewer objects.
      Ports: Print the port name when a port is used but not attached to anything.
      Configs: Use connectAllPorts to connect ports for simple-timing-ruby.
      SE/FS: Build the Interrupt objects in SE mode.
      Interrupts: Make the IO APIC go get the local APICs.
      [mq]: sefssparcregfile.patch
      SPARC: Turn on handleIprRead and handleIprWrite in SE in SPARC.
      SPARC: Let the TLB have friends in FS mode.
      SPARC: Narrow the scope of #if FULL_SYSTEM in SPARC's faults.
      SPARC: Remove the last checks of FULL_SYSTEM.
      X86: Turn on the page table walker in SE mode.
      X86: Build vtophys in SE mode.
      CPU: Make physPort and getPhysPort available in SE mode.
      Alpha: Turn on vtophys in SE mode.
      ARM: Turn on the page table walker on ARM in SE mode.
      ARM: Build vtophys in SE mode.
      MIPS: Build vtophys in SE mode.
      Power: Add a stub implementation for vtophys in SE and FS.
      SPARC: Build vtophys into SE mode.
      SE/FS: Build/expose vport in SE mode.
      SE/FS: Build in the tport in FS mode.
      SE/FS: Turn on the page table class in FS.
      SE/FS: Include getMemPort in FS.
      SE/FS: Make some system funcs available in SE and FS.
      SE/FS: Build the base process class in FS.
      SE/FS: Make getProcessPtr available in both modes, and get rid of FULL_SYSTEMs.
      X86: Get rid of more uses of FULL_SYSTEM.
      SE/FS: Make the system object more consistent between SE and FS.
      SE/FS: Build syscall_emul.cc in FS mode.
      X86: Build the same files in SE and FS.
      SE/FS: Remove the last references to FULL_SYSTEM from POWER.
      System: Push boot_cpu_frequency down into the subclasses that actually use it.
      SE/FS: Compile in system events in SE mode.
      SE/FS: Get rid of FULL_SYSTEM in MIPS.
      SE/FS: Build the solaris object in both SE and FS.
      GCC: Get everything working with gcc 4.6.1.
      SE/FS: Make the functions available from the TC consistent between SE and FS.
      SE/FS: Remove the last uses of FULL_SYSTEM from SPARC.
      SE/FS: Expose the same methods on the CPUs in SE and FS modes.
      SE/FS: Get rid of uses of FULL_SYSTEM in Alpha.
      SE/FS: Get rid of the last use of FULL_SYSTEM in x86.
      SE/FS: Get rid of FULL_SYSTEM in the ARM ISA.
      SE/FS: Get FULL_SYSTEM out of base/remote_gdb.cc.
      SE/FS: Get rid of FULL_SYSTEM in sim.
      SE/FS: Remove FULL_SYSTEM from swig.
      SE/FS: Get rid of FULL_SYSTEM in mem.
      GCC: Guard some gcc flags so they're used when available and needed.
      Power: Implement a stub for getArgument.
      SE/FS: Get rid of FULL_SYSTEM in kern.
      SE/FS: Get rid of FULL_SYSTEM in dev.
      Power: Add a stub kernel_stats.hh.
      POWER: Add a stub implementation of initCPU.
      Power: Add a stubbed out stacktrace.cc
      SE/FS: Get rid of FULL_SYSTEM in the CPU directory.
      SE/FS: Get rid of includes of config/full_system.hh.
      X86: Fix the constant detecting three byte opcodes in the predecoder.
      Compiler: Add an M5_NO_INLINE define.
      SPARC: Isolate FP operations enough to prevent code/rounding mode reordering.
      SPARC: Update the FS stats for the recent FP fix.
      SPARC: Minor style fix.
      X86: Fix a bad segmentation check for the stack segment.
      Merge with main repository.
      Merge with the main repository again.
      Another merge with the main repository.
      Merge yet again with the main repository.
      Merge with the main repo.
      MIPS: Fix a compiler warning from the eret instruction.
      SE/FS: Make SE vs. FS mode a runtime parameter.
      SE/FS: Make both SE and FS tests available all the time.
      SE/FS: Get rid of FULL_SYSTEM in the configs directory
      SE/FS: Pull FULL_SYSTEM out of the build_opts files
      SE/FS: Get rid of the FULL_SYSTEM config option.
      Implement Ali's review feedback.
      Yet another merge with the main repository.
      Merge with main repository.
      Merge with head, hopefully the last time for this batch.
      System: Fix the check which detects running out of physical memory.
      System: Forgot to qrefresh with my last change.
      Regressions: Fix the regress script when "all" is used.
      X86: Rename the bridge which allows commnication back to the local APICs.
      m5=>gem5: Make the regression script build gem5.* instead of m5.*
      Faults: Turn off arch/faults.hh
      Checker: Access workload element 0 only if there is an element 0.
      SE/FS: Record the system pointer all the time for the simple CPU.
      SPARC: Make PSTATE and HPSTATE a BitUnion.
      X86:  open flags: Another patch from Vince Weaver
      X86: Use the M5PanicFault fault in execute methods instead of calling panic.
      Make the IO bridge accept address headed to all the local APICs.
      Fix the SPARC fs regression by adding a call to createInterruptController.
      X86: Fix address size handling so real mode works properly.
      tests: Fix building unit tests.
      sim: A trie data structure specifically to speed up paging lookups.
      sim: Update some comments in trie.hh that were meant to go in the last change.
      X86: Use the AddrTrie class to implement the TLB.
      X86: Fix a tiny typo in the load/store microop constructor.
      CPU: Tidy up some formatting and a DPRINTF in the simple CPU base class.
      X86: Report an error if there's no kernel object, don't blindly use it.
      base: Include cassert in trie.hh.
      ISA: Put parser generated files in a "generated" directory.
      X86: Clear out duplicate TLB entries when adding a new one.
      X86: Update stats for the slightly changed TLB behavior.
      X86: Fix the IMUL_R_P_I macroop.
      Syscalls: warn when the length argument to mmap is excessive.
      Decode: Make the Decoder class defined per ISA.
      CPU: Simplify the implementation of the decode cache.
      ISA: Make the decode function part of the ISA's decoder.
      CPU: Merge the predecoder and decoder.
      ISA,CPU: Generalize and split out the components of the decode cache.
      X86: Truncate addresses to 32 bits except in 64 bit mode, not long mode.
      X86: Move the GDT down to where it can be accessed in 32 bit mode.
      X86: Add a 32 bit hello world test binary.
      X86: Use the HandyM5Reg to avoid a register read and some logic in the TLB.
      X86: Ensure that the decoder's internal ExtMachInst is completely initialized.
      X86: Ensure that the CPUID instruction always writes its outputs.
      X86: Update stats for the CPUID change.
      ISA: Turn the ExtMachInst NoopMachinst into the StaticInstPtr NoopStaticInst.
      ARM: Keep a copy of the fpscr len and stride fields in the decoder. Avoid reading them every instruction, and also eliminate the last use of the thread context in the decoders.
      SPARC: Keep a copy of the current ASI in the decoder.
      X86: Move address based decode caching in front of the predecoder. The predecoder in x86 does a lot of work, most of which can be skipped if the decoder cache is put in front of it.
      Decoder: Remove the thread context get/set from the decoder.
      x86: Fix the CPUID Long Mode Address Size function.
      x86: Update the stats for the x86 FS o3 boot test.
      x86: APIC: Fix the getRegArrayBit function.
      x86: APIC: Only set deliveryStatus if our IPI is going somewhere.
      x86: Fix some bugs in the real mode far jmp instruction.
      x86: Fix setting segment bases in real mode.
      vnc: Add a conversion function for bgr888.
      dev: Use fixed size member variables to describe fixed size PL111 registers.
      x86: pc: Put a stub IO device at port 0xed which the kernel can use for delays.
      x86: Update stats for the new Linux delay port.
      config: ruby: Get rid of an "eval" and an "exec" operating on generated code.
      dev: Support translating left and right ALT keys.
      ide: Accept the IDLE (0xe3) ATA command.
      config: Get rid of some extra spaces around default arguments.
      sim: Make it possible to override the breakpoint length check.
      x86: Clean up style in process.cc.
      arch: Allow named constants as decode case values.
      x86: Rework opcode parsing to support 3 byte opcodes properly.
      config: Add two options for setting the kernel command line.
      misc: Make the GDB register cache accessible in various sized chunks.
      cpu: Only check for PC events on instruction boundaries.
      sim: Ensure GDB interrupts the simulation at an instruction boundary.
      misc: Rename the GDB "Event" event class to InputEvent.
      misc: Add some utility functions for schedule inst commit events.
      x86: Implement a remote GDB stub.
      misc: Generalize GDB single stepping.
      Let other objects set up memory like regions in a KVM VM.
      scons: Make the USE_KVM variable available in C++.
      cpuid, x86: Revert "Enabling more features in CPUid"
      x86: Enable three bits in the FamilyModelStepping ECX CPUID bitfield.
      stats: x86: Update stats for the CPUID change.
      base: Fix assigning between identical bitfields.
      test: Add a unittest for the BitUnion types.
      scons: Stop generating an a.out checking the "as" version.
      scons: Detect and remove broken git hook symlinks.
      scons: Use a relative symlink for git hooks more selectively.
      scons: Collapse symlinks when installing git hooks.
      stats: Un-empty the SPARC FS stats.txt file.
      stats: Add a boat load of stats to the SPARC solaris boot regression.
      stats: Remove stats from the SPARC solaris boot which were silenced.
      stats: Update SPARC solaris boot stats.
      config: Add a default system disk image for SPARC FS.
      stats: Update the solaris boot stats for new snoopTraffic stat.
      stats: Update the solaris boot stats for the default snoop_filter.
      stats: Update the solaris boot stats for the new op classes.
      stats: Update the stats for 04.gpu for x86/linux/gpu-ruby-GPU_Rf0.
      stats: Update 01.hello-2T-smt and 40.perlbmks stats on ARM/Alpha o3-timing.
      stats: Rename num_syscalls to numSyscalls in the reference stats.
      stats: Update the 40.m5threads stats.
      stats: Update ARM FS stats.
      stats: Update 04.gpu stats.
      stats: Update the stats for 70.twolf for x86 o3-timing mode.
      stats: Update some stats after simulated program exit behavior was changed.
      scons: When spawning the linker process, don't involve the shell.
      scons: Find ext build directories automatically.
      scons: Add a Transform() for when linking shared libraries.
      scons: Add builders for partially linked object files.
      scons: Put Source objects in groups and partially link them.
      scons: Group Source-s based on what SConscript included them.
      scons: Remove the SPAWN hack added earlier.
      scons: Fix the compiler flag used for partial linking.
      scons: Merge reading test SConscripts into makeEnv.
      config: Remove support for CPU aliases.
      scons: Make env['USE_PYTHON'] a source for createEnumStrings.
      scons: Replace str(foo.get_contents()) with foo.get_text_contents().
      scons: Get rid of the PHONY_BASE construction variable.
      base: Teach the socket listeners how to bind to the loopback.
      misc: Expose the listener loopbackOnly function to python.
      misc: Add the --listener-loopback-only command line option.
      scons: Get rid of the all_isa_deps variable.
      config: Fix up some configs to not use CPU aliases.
      scons: arch: Generalize the switching header code.
      scons: Use the generalized switching headers on the GPU ISA.
      misc: Make the remote GDB stub more resilient to bad connections.
      base: Make the VNC server more resilient.
      x86: Fix the multiplication microops.
      base: Refactor the GDB code.
      scons: Enable explicitly building something with no variant.
      x86: sim: Make 32 bit x86 processes work again.
      x86: Rework how VEX prefixes are decoded.
      ext: Revamp the systemc SConscripts.
      dev: Add a missing parameter to the EtherTap device.
      misc: Fix building the m5tap utility.
      dev: Rename EtherTap to be EtherTapStub.
      dev: Refactor the EtherTapStub to make room for using tap.
      dev: Add a version of EtherTap which uses the tap driver.
      misc: Add git ignore patterns for build products in src/util/tap
      misc: Ignore build products in src/util/term.
      base: misc: Include cstdlib in base/misc.hh.
      scons: Try to handle problems with gcc, lto and partial linking.
      dev: Avoid arbitrarily deep stack depth in the i8254xGBe model.
      riscv: Disambiguate between the C and C++ versions of isnan and isinf.
      base: Give more information when setting up asynchronous IO fails.
      dev: Fix an IDE error check.
      x86: Add a "CondInst" format for conditionally decoded instructions.
      x86: Use the new CondInst format for moves to/from control registers.
      stats: Get rid of some kernel stats related cruft.
      stats: Move the swpipl function into the Alpha kernel stats.
      kvm: arm: Get rid of functions which just wrap the subclasses version.
      sim: Stop using loadState in the Root SimObject.
      alpha: Move some initialization logic from loadState into unserialize.
      mem: Record the request master ID in the PacketInfo structure.
      mem: Trace the request master ID in the MemTraceProbe.
      mem: Add a "map" of packet IDs to strings in probe traces.
      mem: Fill the new packet ID fields with master IDs when tracing packets.
      sim: Add a set_parent to NullSimObject which does nothing.
      sim: Only consider non-NULL elements in SimObjectVector.has_parent.
      sim: Check the SimObjectVector.has_parent function to use the "any" function.
      sim: Add a clear_parent function to NullSimObject.
      sim: Add a NullSimObject.descendants function.
      sim: Give the NullSimObject singleton a _name.
      misc: Make the m5 utilities writefile command accept a host path.
      sim: Don't add the NULL SimObject as a child of other SimObjects.
      sim: Add a get_config_as_dict to the NullSimObject class.
      dev: Make the IDE controller handle NULL simobject pointers.
      util: Make dot_writer ignore NULL simobjects.
      misc: Fix the indentation in DecodeVarint in util/protolib.py.
      misc: Rename the (De|En)codeVarint function _(De|En)codeVarint32.
      misc: Small style fix in _EncodeVarint32.
      misc: Make decode_packet_trace.py print the new master ID fields.
      misc: When building packet_pb2.py, don't assume a particular CWD.
      misc: Use a Makefile to ensure util/packet_pb2.py is up to date.
      misc: Add util/packet_pb2.py to .gitignore.
      scons: Stop generating inc.d in the isa parser.
      scons: Fix the regression tests.
      base: Fix forcing loopback only binding for listeners.
      x86: Fix VEX instruction decoding.
      config: Rework the SysPaths functions into functors.
      alpha,arm,mips,power,riscv,sparc,x86,isa: De-specialize ExecContexts.
      alpha,arm,mips,power,riscv,sparc,x86: Merge exec decl templates.
      scons: Move scons and python version checking into site_init.py.
      scons: Override the "default" tool to set up the default env.
      scons: Pull style hook management out of the main SConstruct.
      scons: Move python path management out of the SConstruct.
      scons: Move Transform and termcap functionality into their own files.
      util: Simplify/consolidate the python conversion module.
      config: Simplify the definitions of the Voltage and Current params.
      util: Add a "toEnergy" function to the convert module.
      config: Export the "Current" param type from m5.params.
      config: Add an Energy param type.
      config: Fix the "script" SysPath functor.
      tests: Fix compilation of cprinftest.
      dev: Fix the SPARC and X86 platform devices.
      sparc: Pull StaticInst base classes out of the ISA description.
      sparc: Pull flat static instruction classes out of the ISA.
      sparc: Pull more StaticInst base classes out of the ISA desc.
      sparc: Pull most of the Nop format out of the ISA description.
      sparc: Pull the "Uknown" StaticInst class out of the ISA description.
      sparc: Pull the unimplemented formats out of the ISA description.
      sparc: Return debug faults from unimplemented instructions.
      sparc: Move the microop/macroop base classes out of the ISA desc.
      sparc: Move the mem base classes out of the ISA description.
      sparc: Move integer StaticInst base classes out of the ISA desc.
      tests: Fix the stats unit test.
      tests: Resurrect initest input file(s).
      scons: Switch from "guards" to "tags" on source files.
      scons: Get rid of SourceFile's done function.
      scons: Move some compiler flag setting code to the SConstruct.
      scons: Get rid of a flag which makes Werror optional.
      scons: Remove the extra_deps option from the helper function make_obj.
      scons: Break make_obj into make_static and make_shared functions.
      tests: Build the input file into the initest unit test.
      scons: Minor cleanup of how partial linking is handled in makeEnv.
      tests: Import the googletest library, release version 1.8.0.
      tests: scons: Integrate the googletest library into the build.
      scons: Add in a new type of unit test called GTest.
      tests: Reimplement the bituniontest as a googletest.
      scons: Build GTests in the directory they're declared.
      tests: Move the bituniontest to be alongside the bitunion header.
      tests: Get rid of the bitvectest unit test.
      tests: Add a ptr helper function trietest.
      tests: Remove trietest's dependence on cprintf.
      misc: Move the ExitLogger class definition into misc.cc
      misc: Rename misc.(hh|cc) to logging.(hh|cc)
      base: Rework the trie dump function to accept a different ostream.
      x86: LOOP's operand size defaults to 64 bits in 64 bit mode.
      scons: Track and reuse object nodes for a given source file.
      scons: Several fixes having to do with tags and sets.
      tests: Fix the source file for the cprintftime test.
      base: Handle zero fill in cprintf when printing floats.
      base: Split out the pixel class in framebuffer.(cc|hh).
      x86: Split apart x87's FSW and TOP, and add a missing break.
      tests: Add a pseudo target to run all the unit tests for build/variant.
      tests: Accept SourceFilters as sources for GTest.
      misc: Rework the logging functions.
      tests: Add an implementation of the Logger interface for use gtests.
      tests: Convert the trie unit test into a gtest.
      tests: Plumb dumps of the test trie into the gtest macros.
      tests: Move the trietest unit test into base.
      tests: Convert the cprintf unit test into a gtest.
      tests: Move the cprintftest unit test into src/base.
      tests: Turn fbtest into a gtest and move it to src/base.
      base: Add endianness conversion functions for std::array types.
      x86: Rework how "split" loads/stores are handled.
      cpu,alpha,mips,power,riscv,sparc: Get rid of eaComp and memAccInst.
      arm,sparc,x86,base,cpu,sim: Replace the Twin(32|64)_t types with.
      x86: Use operand size 4 when it would be 2 for cmpxchg8b.
      cpu: Fix exit_gen.cc which used misc.hh instead of logging.hh.
      cpu: Add a pointer to a generic Nop StaticInst.
      cpu: Use the generic nop static inst instead of decoding the arch version.
      arch,cpu: "virtualize" the TLB interface.
      riscv,x86: Stop using the arch Nop machine instruction unnecessarily.
      alpha,arm,mips,power,riscv,sparc,x86: Get rid of TheISA::NoopMachInst.
      config: Add a --checkpoint-dir argument to read_config.py.
      config: Fix parsing AddrRange parameters in read_config.py.
      config: Handle NULL simobject parameters in read_config.py.
      arm: Make translateFunctional override the base implementation.
      cpu, power: Get rid of the remnants of the EA computation insts.
      cpu: Add a NotAnInst flag to the BaseDynInst class.
      cpu: Use the NotAnInst flag to avoid passing an inst to fetch faults.
      alpha,arm,mips,power,riscv,sparc,x86,cpu: Get rid of ISA_HAS_DELAY_SLOT.
      arch,mem: Move page table construction into the arch classes.
      arch,mem: Remove the default value for page size.
      arm, power: Make the python TLB simobjects inherit from BaseTLB.
      cpu: Make the CPU's TLB parameter a BaseTLB.
      arch: Fix a fatal_if in most of the arch's process classes.
      mem: Track TLB entries in the lookup cache as pointers.
      sim: Simplify registerThreadContext a little bit.
      mem: Change the multilevel page table to inherit from FuncPageTable.
      arch, mem, sim: Consolidate and rename the SE mode page table classes.
      sim, arch, base: Refactor the base remote GDB class.
      base: Rework bitunions so they can be more flexible.
      base: Enable specializing templates on BitUnion types.
      sim: Use the new BitUnion templates in serialize.hh.
      arm, base: Generalize and move the BitUnion hash struct.
      base: Hide the BitUnion::__StorageType type.
      arch, mem: Make the page table lookup function return a pointer.
      x86, mem: Pass the multi level page table layout in as a parameter.
      x86, mem: Get rid of PageTableOps::getBasePtr.
      x86, mem: Don't try to force physical addresses on the system.
      x86, mem: Rewrite the multilevel page table class.
      tarch, mem: Abstract the data stored in the SE page tables.
      arch: Remove the "arch/tlb.hh" switching header.
      base: Get bitunions to compile on clang 3.8.
      base: Add an "override" to name() in the HardBreakpoint class.
      base: Delete commented out versions of the format_integer function.
      base: Remove the ability to cprintf stringstreams directly.
      riscv: Add overrides to various StaticInst methods.
      base: Update #includes for bitunion.hh.
      scons: Switch from the print statement to the print function.
      config: Switch from the print statement to the print function.
      sparc: Passify a new g++ warning.
      x86: Replace the .serializing directive with .serialize_(before|after).
      x86: Mark the RDTSC instruction as .serialize_before.
      x86: Implement the RDTSCP instruction.
      x86: Simplify the implementations of RDTSC and RDTSCP slightly.
      x86: Add bitfields which can gather/scatter bases and limits.
      cpu: Make the protobuf inst tracer accept variable sized instructions.
      hsail: Get rid of an inert private member of StorageSpace.
      arch: Add a virtual asBytes function to the StaticInst class.
      cpu: Use the new asBytes function in the protobuf inst tracer.
      arch: Fix all override related warnings.
      scons: Re-enable override based warnings on gcc.
      cpu: Proposed fix for backwards compatibility in proto/inst.proto.
      cpu: Stop extracting inst_flags from the machInst.
      sparc: Add some missing M5_FALLTHROUGHs and breaks.
      arch: cpu: Make the ExtMachInst type a template argument in InstMap.
      cpu: Remove ExtMachInst typedefs from the O3 CPU model.
      dev: Remove a bunch of Alpha code from MIPS, and unnecessary TheISAs.
      dev: sparc: Get rid of the TheISA namespace in the SPARC devices.
      base: Add a default output function for bitunion types.
      base: Make bitunion output functions static/inline.
      dev: Make sure the EtherTap device uses the right event queue.
      arch: alpha: Fix an 8 year old bug from the transition to pc objects.
      dev: arm: SetScaling commands don't send parameter bytes.
      x86: Add a ld/st microop flag for marking an access uncacheable.
      x86: Add op classes to the MediaOps.
      sim: Rename the SimObject cxx_bases field to cxx_extra_bases.
      tests: Make "UnitTest"s more like GTest so they can be in other dirs.
      sim: Add a SimObject python field which overrides the default c++ base.
      base: Build caching into the AddrRangeMap class
      mem: Use the caching built into AddrRangeMap in the xbar
      mem: Use the caching in the AddrRangeMap class in PhysicalMemory
      base: Add a class which encapsulates Fibers.
      scons: Generalize building binaries.
      systemc: Add a stubbed out sc_object class.
      systemc: Add a stub kernel SimObject.
      systemc: Partially implement the sc_module_name class.
      systemc: Hook up sc_main.
      systemc: Add a stub version of the sc_interface class.
      systemc: Add the sc_nbdefs.hh header from Accellera.
      systemc: Add stubbed out versions of the sc_time functions.
      systemc: Add stubbed out versions of sc_event and related classes.
      systemc: Add stubbed out versions of sc_port and sc_export.
      systemc: Implement a stub version of the sc_prim class.
      systemc: Add a stubbed out sc_event_finder class.
      systemc: Add a stub implementation for sc_attr related classes.
      systemc: Add a stubbed out implementation of the sc_sensitive class.
      systemc: Stub out the sc_module class and related functions.
      systemc: Seperate the "external" header interface.
      systemc: Stub out the sc_process_handle class.
      systemc: Stub out the sc_spawn related classes and functions.
      systemc: Add systemc and systemc.h header files.
      systemc: Stub out the predefined channels.
      systemc: Flesh out the sc_port implementation slightly.
      systemc: Stub out all the standard utilility classes and functions.
      Systemc: Port over all of the systemc "datatype" headers.
      systemc: Add the Accellera implementation for the data type classes.
      systemc: Import tests from the Accellera systemc distribution.
      systemc: Add some missing functions which interact with the scheduler.
      systemc: Implement some simple accessor functions in sc_main.cc.
      systemc: Make sc_main run in its own fiber.
      systemc: Construct and manage a module name stack.
      systemc: Add the deprecated sc_module::end_module function.
      systemc: Add the deprecated sc_signal_out_if typedef.
      systemc, scons: Add a mechanism to hook in the systemc tests.
      systemc: Add a non-standard default writer policy on sc_buffer.
      systemc: Add in the deprecated binding port constructors.
      systemc, scons: Link systemc tests against the shared gem5 library.
      systemc: Add a script which automates building and running tests.
      systemc: Make a test stop including an internal path for sc_vector.
      systemc: Fill out some of the sc_vector.hh classes.
      systemc: Include boost/bind.hpp in the systemc header.
      systemc: Remove more Accellera source specific include paths in tests.
      systemc: Turn some macros into enums to fix regression test building.
      systemc: Remove references to internal constants from the tests.
      systemc: Add some non-standard sc_trace variants.
      systemc: Add some deprecated features to sc_clock.*.
      systemc: Partially implement SC_FORK and SC_JOIN.
      systemc: Fix a small bug in verify.py.
      systemc: Add some "implementation defined" stuff to sc_attr_cltn.
      systemc: Add the nonstandard variable sc_allow_process_control_corners.
      systemc: Add the nonstandard triggered function sc_event.
      systemc: Add the nonstandard macro SC_NEW.
      systemc: Add support for deprecated integer report handler ids.
      systemc: Add a filter-file option.
      systemc: Add a filter file for the tests which are expected to work.
      systemc: Add nonstandard sc_trace-s for sc_event and sc_time.
      systemc: Exclude a test which probably could never compile?
      systemc: Add some nonstandard SC_WAIT* macros.
      systemc: Define the nonstandard sc_event_queue_port typedef.
      systemc: Add the nonstandard, undocumented halt function.
      systemc: Exclude another test which exercises sc_string.
      systemc: Add some nonstandard (get|set)_catch_actions functions.
      systemc: Add a nonstandard sc_signal constructor.
      systemc: Add the deprecated sc_trace_delta_cycles function.
      systemc: Add some nonstandard cthread related sc_module functions.
      systemc: Add deprecated notify_delayed functions.
      systemc: Add deprecated default time unit management functions.
      base: If valgrind is available, tell it about Fiber stacks.
      systemc: Add some nonstandard, undocumented sc_report_* functions.
      systemc: Add some common test include files.
      systemc: Add some deprecated sc_time factory methods.
      systemc: Add an sc_event_finder::find_event method.
      systemc: Add deprecated sc_time constructors.
      systemc: Add non-standard sc_status constants.
      systemc: Add the non-standard sc_time_tuple class.
      systemc: Add some deprecated sc_module constructors.
      systemc: Add the nonstandard timed_out function.
      systemc: Add the nonstandard sc_hierarchical_name_exists function.
      systemc: Add the nonstandard time_stamp function.
      systemc: Make some functions static in conflict with the spec.
      systemc: Add the nonstandard sc_trace_params and sc_trace_params_vec.
      systemc: Add the nonstandard sc_user exception type.
      systemc: Disable the phase_callbacks set of tests.
      systemc: Disable a few more tests that aren't going to work.
      systemc: Make the verify.py --list option print a total count.
      systemc: Add bind() to sc_port_base.
      systemc: Add a minimal version of the deprecated sc_process_b.
      systemc: Minimally implemented the deprecated sc_simcontext.
      systemc: Add the nonstandard sc_join class and sc_thread_handle type.
      systemc: Add the "implementation defined" vport function.
      systemc: Add m_cur_val and m_new_val to sc_signal.
      systemc: Enable some more sc_simcontext related tests.
      systemc: Disable tests which use sensitive_(pos|neg).
      systemc: Implement the sc_attr classes.
      systemc: Get sc_main to work even when dynamically linked.
      systemc: Implement most of sc_object.
      systemc: Implement some basic plumbing in sc_module.hh.
      systemc: Fill out sc_process_handle and create Process classes.
      systemc: Partially implement the scheduler.
      systemc: Implement channel updates and rework the scheduler.
      systemc: Implement much of events, event lists and event exprs.
      systemc: Hook up sc_time_stamp sc_delta_count.
      systemc: Implement the sensitivity mechanism.
      systemc: Implement next_trigger and wait.
      systemc: Handle suspended processes and handle sensitivity overload.
      systemc: Implement sc_get_current_process_handle's other personality.
      systemc: Implement sc_pause, sc_stop, and re-sc_start-ing.
      systemc: Implement pending activity related functions
      base: Save and restore the width setting of streams used with cprintf.
      base: Correct a small typo in sim/core.(hh|cc).
      base: Avoid dividing by zero in Time::[gs]etTick.
      systemc: Implement the various sc_module stage callbacks.
      systemc: Implement some of the basics of sc_time.
      systemc: Make orphans top level objects instead of panic-ing.
      systemc: Handle event notifications scheduled before sc_start.
      systemc: Fix the time resolution when constructing an sc_time.
      systemc: Implement the SC_EXIT_ON_STARVATION exit mode.
      systemc: Fix a couple memory errors.
      systemc: Implement + and - for sc_time, and sc_max_time.
      systemc: Make some functions of the kernel static.
      systemc: Add a sensitivity type for exports.
      systemc: Promote some functions to sc_export_base.
      systemc: Implement much of sc_spawn.
      systemc: Fix a "problem" with kill/reset exceptions.
      systemc: Fill out process handle kill and reset mechanisms.
      systemc: Ignore direct requests to mark a process as ready.
      systemc: Implement most of the sc_report_handler mechanism.
      systemc: Adjust process status tracking to improve kill/reset support.
      systemc: Detect a process control corner case and report an error.
      systemc: Extend the execute phase of verify.py.
      systemc: Record the test's return code in the output directory.
      systemc: Add return code verification to verify.py.
      systemc: Teach verify.py to diff files when checking test results.
      systemc: Make verify.py ignore a warning.
      systemc: Make verify.py delete obsolete diff files.
      systemc: Ensure the terminated event is notified in all cases.
      systemc: Remove some junk test reference files.
      systemc: Delete empty/misnamed test reference file.
      systemc: Make verify.py compare non output log reference files.
      systemc: Make verify.py ignore another warning.
      systemc: Adjust some whitespace in a print out.
      systemc: Adjust a warning to match Accellera.
      systemc: Make verify.py ignore an Info: message.
      systemc: Always set USE_SYSTEMC=1 when compiling with verify.py.
      systemc: Implement sc_gen_unique_name.
      systemc: Fix the seed used with sc_gen_unique_name for sc_port.
      systemc: Ignore a warning in the reference test outputs.
      systemc: Generalize working with the systemc python module from C++.
      systemc: Use the new python interface to delay fixing the timescale.
      systemc: Implement a few more member functions for sc_time.
      systemc: "Implement" sc_interface's methods.
      systemc: Set the scheduler's event queue earlier.
      systemc: Add a nonstandard sc_status pretty printer operator.
      systemc: Partially implement the sc_signal class template.
      systemc: Track the module in the end_of_elaboration callback.
      systemc: Use an std::list to track all modules.
      systemc: Don't schedule the update phase if the event queue is null.
      systemc: Implement sc_export.
      systemc: Ensure delta notifications happen at the right time after sc_pause.
      systemc: Exclude two more tests which have undefined functions.
      systemc: Implement sc_event_finder.
      systemc: Make BindInfo track ports or interfaces.
      systemc: Implement port binding except positional binding.
      systemc: Implement the sc_in class.
      systemc: Generalize ignoring info messages in the reference output.
      systemc: Teach verify.py to ignore another deprecation warning.
      systemc: Implement a little more of sc_time.
      systemc: Fix the priority of the maximum time event.
      systemc: Track exports and prim channels, and call their callbacks.
      systemc: Don't run clocked thread processes during the init phase.
      systemc: When sc_start is told to run zero time, do one delta cycle.
      systemc: Rework how delta and timed notifications/timeouts are tracked.
      systemc: Don't run the ready event inline when unpausing.
      systemc: Implement a significant portion of sc_clock.
      systemc: Make a test use cout for all its messages.
      systemc: Rework the init phase for the new way delta notes are handled.
      systemc: Make sure sc_start waits for simulation even when starving.
      systemc: Generalize gem5 style event scheduling.
      systemc: Make sc_out delegate to its base class sc_inout.
      systemc: Implement most of sc_inout.
      systemc: Improve scheduler cleanup.
      systemc: Make sure an immediate notification overrides a delayed one.
      systemc: Make sure no delta cycles are scheduled when stopping.
      systemc: Override notifyWork for timeout/event_and_list sensitivities.
      systemc: Clear out the scheduler more agressively and with common code.
      systemc: If sc_main returns, don't do any more systemc stuff.
      systemc: If an event is a delta notification, checked if it's timed.
      systemc: If no sc_module_name was used, throw an error.
      systemc: Make the report handler handle null messages.
      systemc: Keep track of how sc_main completes and expose that to python.
      systemc: Make the test config retrieve sc_main results.
      systemc: Handle sc_time_stamp before any sc_time is constructed.
      systemc: Check for time overflow in sc_start.
      systemc: Handle null sc_object names.
      systemc: Handle null and omitted event names.
      systemc: Make sc_process_b less hokey, and make WAIT* work.
      systemc: Use the eq pointer directly less often in the scheduler.
      systemc: Get rid of the unused warning function in sc_event_finder_t.
      systemc: Use sc_assert to check the number of interfaces.
      systemc: Implement positional binding.
      systemc: When a thread completes, yield to the scheduler.
      systemc: Make sure methods aren't restarted by yield.
      systemc: Fix where we checked if sc_stop was called durig elaboration.
      systemc: When sc_start-ing with zero time, ensure the ready event runs.
      systemc: Fix some issues with starvation checks.
      systemc: Handle sc_stop called from sc_main correctly.
      systemc: Change the test binaries to use rpath.
      systemc: Add a --working-dir option to the test config.py.
      systemc: Make verify.py run the tests from the directory they expect.
      systemc: Abort verify.py if no tests were selected.
      systemc: Report errors when proc ctrl funcs are called during elab.
      systemc: Implement most of sc_fifo and its interfaces.
      systemc: Implement support for the default time unit.
      systemc: Clamp the time of events to the present.
      systemc: Make sure children of processes are recorded as such.
      systemc: Ensure all objects and events have unique names.
      systemc: Improve handling of empty process handles.
      systemc: sc_spawn can create static or dynamic processes.
      systemc: Track the module who's end_of_elaboration callback we're in.
      systemc: Make Process track whether it's dynamic on its own.
      systemc: When sensitive to an event finder, find on all interfaces.
      systemc: Keep track of more cases when we should be ready after resume.
      systemc: Teach verify.py how to expect failing error codes.
      systemc: Raise an error when SC_METHOD, etc. is used after starting.
      systemc: Tell verify.py to expect two tests to fail.
      systemc: Make verify.py filter out some error messages.
      systemc: Adjust some error messages to match Accellera.
      systemc: Teach verify.py to ignore "In file: *" in test output.
      systemc: Add a "changeStamp" value to the scheduler.
      systemc: Implement the "event()" style sc_signal methods.
      systemc: Implement the << operator for sc_signal.
      systemc: Implement sc_fifo::dump and improve sc_fifo::print.
      systemc: Store timed notifications in a list instead of a set.
      systemc: Toggle off clumping methods together in the ready list.
      systemc: Report an error if n <= 0 in wait(int n).
      systemc: Record that one of the tests will report an error.
      systemc: Teach verify.py to ignore a new error.
      systemc: Implement sc_(g|s)et_time_resolution.
      systemc: Mark some tests as expected to fail.
      systemc: Add some error checks to sc_set_default_time_unit.
      systemc: Mark a test as expected to fail/report an error.
      systemc: Teach verify.py to ignore two types of errors.
      systemc: When stopping immediately, block new processes/updates.
      systemc: Implement the nonstandard at_negedge and at_posedge.
      systemc: Ensure sc_stop during callbacks actually stops.
      systemc: Copy the msgType and msg parameters of sc_report.
      systemc: Make some tests use cout instead of cerr to report completion.
      systemc: Fix a typo/bug in sc_int_base.hh.
      systemc: "Fix" some error message formatting.
      systemc: Change the default naming scheme to use sc_gen_unique_name.
      systemc: Implement the nonstandard halt function.
      systemc: Match how Accellera schedules processes even more closely.
      systemc: Implement sc_time::to_string.
      systemc: Teach verify.py to filter messages which start within a line.
      systemc: Report a warning if an event or object needs to be renamed.
      systemc: Warn if a process is dont_initialize with no static sensitivieis.
      systemc: Merge stderr and stdout when running tests.
      systemc: Fortify how exceptions are caught and passed around.
      systemc: Update some defaults in verify.py.
      systemc: Mark a few tests as expected to raise an error.
      systemc: Remove a redundant call to update() from the kernel object.
      systemc: Track the scheduler status using an enum instead of bools.
      systemc: Report an error if notifying during the update phase.
      systemc: Catch exceptions during updates, notifications, and callbacks.
      systemc: Implement the deprecated "timed_out" function.
      systemc: Change how sc_clock creates processes to match the tests.
      systemc: Centralize module callbacks and report new warnings.
      systemc: Mostly implememt sc_simcontext.
      systemc: Track event sensitivities with a list instead of a set.
      systemc: Keep all pre-init processes on a single list.
      systemc: Stop assuming picoseconds as the time resolution.
      systemc: Implement SC_FORK, SC_JOIN, and SC_CJOIN.
      systemc: Ensure SC_LONG_64 is defined and available.
      systemc: Implement sc_semaphore.
      systemc: Implement sc_mutex.
      systemc: Implement the sc_clock::time_stamp function.
      systemc: Implement the sc_*_resolved classes.
      systemc: Add a "kind()" overload to sc_port_base.
      systemc: Add some error checks to some classes.
      systemc: Mark a few more tests as expected to return non-zero.
      systemc: Implement sc_buffer.
      systemc: Refactor sensitivities.
      systemc: Rework how delayed sensitivities are handled.
      systemc: Differentiate between notifying methods and threads.
      systemc: Change how the scheduler orders processes.
      systemc: Handle nonstandard cthread sensitivities.
      systemc: Check whether the simulation is running when creating sensitivities.
      systemc: Warn if sc_stop is called more than once.
      systemc: Ignore a gem5 warning about setting the stack size in verify.py.
      systemc: Implement the sc_signal_rv channel and ports.
      dev: Include the platform base class even in NULL_ISA builds.
      mem: Expose the raw packet accessor functions.
      x86: Use little endian packet accessors.
      arm: Use little endian packet accessors.
      sparc: Use big endian packet accessors.
      alpha: Use little endian packet accessors.
      mips: Use little endian packet accessors.
      arch: Explicitly specify the endianness in the generic mem helpers.
      mem: Get rid of some stray lines which ended up in packet.hh.
      systemc: Change an error message to match the reference outputs.
      systemc: Add some additional error checks.
      systemc: Add an error check whether an interface is alread bound to a port.
      systemc: Fix a typo in verify.py.
      systemc: Fix the default width values for the various sc_trace-s.
      systemc: Teach verify.py how to verify vcd files.
      systemc: Fix the implementation of sc_event::triggered.
      systemc: Don't schedule the ready event unnecessarily.
      systemc: Implement general and VCD trace support.
      systemc: Add some error checks to sc_export.
      systemc: Add an error check to sc_time.
      systemc: Make sure the right type process is running when calling wait.
      systemc: Check the process type when using sc_join.
      systemc: Filter out an Info about delta cycles and pseudo timesteps.
      systemc: Add a warning to sc_interface::default_event.
      systemc: Move some constants out of sc_time.cc for other files to use.
      systemc: Print an Info when setting a tracefile's time unit.
      systemc: Implement sc_get_curr_process_handle().
      systemc: Simplify sc_time_stamp().
      systemc: Change how the default timescale is set.
      systemc: Remove a hack which scaled sc_time into ps unnecessarily.
      systemc: Implement sc_event_queue.
      systemc: Implement the synchronous reset state.
      systemc: Implement signal based resets.
      systemc: Ensure the reset event is notified before reseting the target.
      systemc: Merge notify and notifyWork and ignore disabled for resets.
      systemc: Implement the sc_time_tuple class.
      systemc: Modify reportifyException to keep sc_reports in scope.
      systemc: Add a non-standard sc_time constructor and from_string.
      systemc: Filter out a test which breaks rules gem5 won't let it break.
      systemc: Use c++11 partial functions instead of boosts.
      systemc: Centralize how object parents are chosen.
      systemc: Use the stage of simulation and not port size in add_trace.
      systemc: Change how the timing of binding ports works.
      systemc: Implement sc_vector.
      systemc: Remove some old warn includes from ext/channel.
      systemc: Add missing sc_interface::register_port, and add calls to it.
      systemc: Implement register_port in all the predefined channels.
      systemc: Clear the current process when done with the eval phase.
      systemc: Don't use write() in sc_clock to set the clock value.
      systemc: Implement writer policies.
      systemc: Fix a typo in one of the error messages.
      systemc: Make sure otherwise unnamed events get autogenerated ones.
      systemc: Implement sc_hierarchical_name_exists.
      systemc: Change the point where elaboration is considered over.
      systemc: Add an sc_gem5::Port destructor.
      systemc: Change how errors are handled in some constructors slightly.
      systemc: Add some error checks to the sc_module constructor.
      systemc: Add an sc_gen_unique_name namespace to processes as well.
      systemc: Add a simple implementation for sc_mempool.
      systemc: Increment the change stamp value before the timing phase.
      systemc: Change how signal based resets work.
      systemc: Run delta notifications in reverse insertion order.
      systemc: Fill out some error reporting in sc_port.
      systemc: Keep track of progress when positionally binding.
      systemc: Add some deprecated positional binding operators.
      systemc: Implement port binding policies.
      systemc: Report an error if an sc_event_finder is used on an unbound port.
      systemc: Detach child events in the Object destructor.
      systemc: Add an error check to sc_gen_unique_name.
      systemc: Add some error checks to sc_clock.
      systemc: Add a range check to the intial value of sc_semaphore.
      systemc: Add an error check to the deprecated notify_delayed.
      systemc: Change the default "catch action" to SC_DISPLAY.
      systemc: Use the "catch action" and the handler func outside sc_main.
      systemc: Mark a test as expected to fail.
      systemc: Distinguish internal events from normal sc_events.
      systemc: Ignore immediate self notifications.
      systemc: Get rid of the unused Process::_procKind.
      systemc: Remove a redundant injectException for Thread's throw_it.
      systemc: Ignore attempts to throw a signal to a method.
      systemc: If a process hasn't started, still signal its reset event.
      systemc: Manually correct the golden output for a test.
      systemc: When resetting a process, clear suspended ready.
      systemc: Stop passing arguments to sc_main.
      systemc: Refactor reporting to prep for int based messages.
      systemc: Handle integer based IDs like Accellera does.
      systemc: Make suppress_id work like the test expects.
      systemc: Add a warning about dont_initialize and cthreads.
      systemc: Add a mechanism for pre-registering message type ids.
      systemc: Switch to using predefined messages for core.
      systemc: Mark a test as expected to fail.
      systemc: Fix how the maximum size is computed for sc_ports.
      systemc: Check the maximum port size when finializing bindings.
      systemc: Remove a redundant error check.
      systemc: Switch to using predefined messages for utils.
      systemc: Don't depend on the order of static initializers.
      systemc: Switch to using predefined messages for channels.
      systemc: Switch to using predefined messages for datatypes.
      systemc: Exclude a test which tests a feature we're not implementing.
      systemc: Fix accounting in the sc_fifo class.
      systemc: Don't re-schedule a process which is already scheduled.
      systemc: Add an accessor for getting the current process.
      systemc: Don't include the scheduler in an external header file.
      systemc: Add a python config class for sc_modules.
      systemc: Warn about using deprecated sc_port constructors.
      systemc: Stop filtering out warnings about unimplemented features.
      systemc: Implement Object::simcontext().
      systemc: Get rid of leftovers from unimplemented warnings past.
      arch: Get rid of the unused type AnyReg.
      dev: Build the PCI device models even in NULL_ISA builds.
      dev: Build most of the networking devices in the NULL_ISA build.
      python: Stop conditionally excluding code from pyobject.cc
      dev: Explicitly specify the endianness for packet accessors.
      dev: Remove using namespace TheISA in uart8250.cc.
      arch: Include some additional headers in arch/generic/mmapped_ipr.cc.
      gpu-compute: Explicitly use little endian packet accessors.
      mem: Explicitly specify the endianness in the abstract memory.
      null: Stop specifying an endianness in isa_traits.hh.
      mem: Mark the guest endianness packet accessors as deprecated.
      util: Move the existing systemc example into a subdirectory.
      util: Add some examples for using systemc code within gem5.
      mem-cache: Rename the tag class init function to tagsInit.
      systemc: Get rid of an unused private member in sc_clock.
      systemc: Move a function after the class it uses internally.
      systemc: Get rid of implementations for some disabled sc_vector methods.
      systemc: Change how SC_BIND_PROXY_NIL is initialized.
      systemc: Explicitly keep the sc_port bind alongside sc_in's version.
      systemc: Enable systemc support by default.
      base: Add standard types for floating and nonfloating point register values.
      sparc: Switch the FloatReg and FloatRegBits types to be 64 bit.
      null: Claim to use 64 bit floating point registers.
      mips: Explicitly truncate the syscall return value down to 32 bits.
      mips: Clean up type overrides for operands.
      mips: Change the integer and fp register widths to be 64 bits.
      systemc: Fix some paths in the tlm SCons(script|struct).
      systemc: Wrap some report maps in functions.
      systemc: Stop using python init to set up predefined message ids.
      systemc: Seperate out the sc_main fiber and its bookkeeping.
      systemc: Separate and conditionalize exposing sc_main to python.
      systemc: Only build python utility code if python is enabled.
      systemc: Add a missing "const" on one of the sc_event operators.
      systemc: Get rid of a duplicated base class initializer for sc_fifo.
      sim: Push the global frequency management code into C++.
      systemc: Stop using python to set/manage the global time resolution.
      base: Set up a guard page for fiber stacks.
      systemc: Increase the stack size for the sc_main fiber to 8MB.
      systemc: Put systemc headers in the include path when supported.
      systemc: Stop explicitly adding the systemc ext dir to CPPPATH.
      base: Don't let exceptions leak from the to_number utility function.
      sim: Deschedule existing events when destructing an event queue.
      x86: Get rid of a problematic DPRINTF in PremFp.
      base: Add some functions to convert floats to bits and vice versa.
      arch, base, cpu, gpu, mem: Replace assert(0 or false with panic.
      hsail: Fix a warning/build failure for HSAIL_X86.
      systemc: Make verify.py recognize a DEPS file in test dirs.
      systemc: Add DEPS files for some tests with non-source file dependencies.
      systemc: Run the systemc tests with the CWD in the build directory.
      systemc: Run the systemc tests directly from their build directories.
      base: Fix include order in the inifile unit test.
      systemc: Update the gem5-within-systemc README to mention USE_SYSTEMC.
      util: Add the scons configuration cache to .gitignore for util/tlm.
      base: Rename unit test cc files to be *.test.cc.
      base: Change the unit test binary names to use .test, and to be consistent.
      systemc: Disable systemc when using gcc versions older than 5.0.
      systemc: Update signals before initing processes.
      systemc: Ignore process control functions on terminated processes.
      systemc: Update the ordering in the reference output for some tests.
      systemc: Update test output for longer lived processes.
      systemc: Ensure resets and edges are notified when signaling a change.
      arch: Make the ISA parser always use binary floating point accessors.
      arch, cpu: Remove float type accessors.
      cpu: Stop using unions to store FP registers.
      systemc: Initial import of TLM headers from Accellera.
      systemc: Also look for tests in the tlm test directory.
      systemc: Fix style issues in the TLM header files.
      systemc: Rename tlm .cpp files to .cc and add SConscripts.
      systemc: Replace some calls to some Accellera specific functions in TLM.
      systemc: Remove redundant tlm_ prefixes from file names.
      systemc: Include cstring in the tlm header file.
      systemc: Add an elaboration_done method to sc_simcontext.
      systemc: Stop using the non-standard sc_time % in TLM.
      systemc: Add a dummy argv[0] when running the tests.
      systemc: Rename tlm_core header files to have a .hh extentension.
      systemc: Stop using the Accellera specific "none" global event object.
      systemc: Replace sc_core::sc_type_index with std::type_index.
      systemc: Stop using the sc_string_view type.
      systemc: Remove the TLM dependence on a non-standard method.
      systemc: Exclude some failing systemc TLM tests in working.filt.
      systemc: Make input.txt a dependency for the tlm/endian_conv test.
      systemc: Fix a function which was broken during style fixes.
      config: Fix an error message in Port.splice().
      config: De-nest the code in Port.splice().
      arm: Stop using the FloatReg and FloatRegBits types.
      arm: Make the fp register types 64 bits.
      arch: Make the ISA register types aliases for the global types.
      cpu: dev: sim: gpu-compute: Banish some ISA specific register types.
      tests: Fix tests/main.py so it can be run from anywhere.
      arm: dev: Replace ArmISA::MiscReg with RegVal in the GIC v3 model.
      arm: Get rid of some register type definitions.
      arch: cpu: Stop passing around misc registers by reference.
      sparc: Get rid of some register type definitions.
      arm: Replace MiscReg with RegVal in utility.(hh|cc).
      systemc: Fix TLM related includes.
      base: arch: Get rid of the now unused FloatRegVal type.
      hsail: Remove the MiscReg type.
      arch: cpu: Rename *FloatRegBits* to *FloatReg*.
      riscv: Get rid of some ISA specific register types.
      x86: Stop using/defining some ISA specific register types.
      alpha: Stop using architecture specific register types.
      mips: Stop using architecture specific register types.
      null: Get rid of some register type definitions.
      power: Get rid of some ISA specific register types.
      cpu, arch: Replace the CCReg type with RegVal.
      systemc: scons: Specify RPATH as a list.
      scons: Change an = to a += when accumulating sources from filters.
      systemc: Change the type of a loop counter to avoid a warning.
      systemc: configs: Add a very simple config which just runs sc_main.
      systemc: config: Don't inject a custom argv[0] in sc_main.py.
      systemc: Make an include in src/systemc/ext use a relative path.
      systemc: Add a systemc_home directory which maps to the ext headers.
      sim: Add a mechanism to exit the simulation loop immediately.
      config: Make parameter conversion handle integers in other bases.
      systemc: Handle exceptions "correctly" even if sc_main hasn't been run.
      systemc: Init some values in the scheduler for running without sc_main.
      systemc: Make sc_(pause|stop) exit to python when not using sc_main.
      ext: test: Split up the GTEST_CPPFLAGS and CPPFLAGS.
      systemc: Make the verify.py script work when run from different dirs.
      scons: Add a convenience method to set RPATH for local libraries.
      systemc: Export the sc_core::sc_time class to python.
      systemc: Export the tlm::tlm_global_quantum class to python.
      systemc: Add m5.systemc and m5.tlm python modules.
      systemc: Start using the m5.systemc module in the test config.py.
      systemc: Get rid of --working-dir in the test's config.py.
      systemc: Update the sc_main.py config to use m5.systemc.
      systemc: Update the systemc example to use m5.systemc for sc_main.
      systemc: Remove _m5.systemc passthroughs from SystemC_Kernel.
      systemc: Move systemc disabling checks to SConsopts.
      tlm: Add some includes to some tlm_utils header files.
      util, tlm: Fix a memory error in the SCMasterPort class.
      scons: Don't use isdir in AddLocalRPATH.
      python: Teach PyBindMethod how to set return_value_policy.
      python: Teach cxxMethod how to set return_value_policy.
      dev: Turn EtherObject into an interface class.
      dev: Make the EtherDevice class inherit EtherObject.
      python: Simplify connectPorts() around EtherObject/EtherDevice.
      mem: Track the MemObject owner in MasterPort and SlavePort.
      dev: Make EtherInt inherit from Port.
      mem: Move the Port base class into sim.
      python: Improve how templated SimObject classes are handled.
      python: Change || to && for MessageBuffers in connectPorts.
      sim: Add a getPort function to SimObject.
      mem: Move bind() and unbind() into the Port class.
      python: Switch to the new getPort mechanism to connect ports.
      arch, cpu, dev, gpu, mem, sim, python: start using getPort.
      systemc: Hook up gem5_getPort to the gem5 getPort mechanism.
      base: Make AddrRangeMap able to return non-const iterators.
      mem: Clean up the xbars a little.
      mem: Deleting this init() method was accidentally dropped during rebase.
      systemc: Provide a utility Port TLM socket wrapper class.
      tlm: Initial import of tlm/gem5 bridge code.
      systemc: Create unified gem5/TLM bridge SimObjects.
      systemc: Delete extra code from src/systemc/tlm_bridge.
      systemc: Templatize the gem5/TLM bridge SimObjects.
      mem: Add a MemBackdoor type to track memory backdoors.
      mem: Add sendAtomicBackdoor/recvAtomicBackdoor port methods.
      systemc: Teach the TLM bridges how to use gem5's new backdoor mechanism.
      mem: Plumb backdoor requests through the xbar classes.
      mem: Maintain a back door into the AbstractMem's backing store.
      mem: Teach SimpleMem to return a MemBackdoor when appropriate.
      cpu: Eliminate the ProxyThreadContext class.
      python: Make Port roles a more generic concept.
      python: Generalize the dot_writer to handle non Master/Slave roles.
      python: Generalize the Port.splice function.
      dev: Use the new Port role mechanism to make an EtherInt Port type.
      systemc: Add Port types for initiator and target sockets.
      systemc: Use the new TLM socket types in the TLM bridge SimObjects.
      x86: Fix some style issues in stacktrace.cc.
      x86: Refactor the ProcessInfo constructor.
      arm: Fix some style issues in stacktrace.cc.
      arm: Factor some repetition out of the ProcessInfo constructor.
      python: Replace the Master/Slave Ports with Request/Response ports.
      python: Get rid of the VectorPort constructor.
      mem: Minimize the use of MemObject.
      mem: Remove the ISA specialized versions of port proxy's read/write.
      arch, sim: Simplify the AuxVector type.
      cpu: Include debug flags regardless of whether the ISA is null.
      mips: Implement readRegOtherThread and setRegOtherThread directly.
      cpu: Get rid of the (read|set)RegOtherThread methods.
      systemc: Add a distinct async_request_update mechanism.
      alpha: Add some control registers to the ISA operands list.
      alpha: Implement HWREI in the ISA.
      arch: cpu: Track kernel stats using the base ISA agnostic type.
      cpu: Remove hwrei from the generic interfaces.
      alpha: Implement simPalCheck within the ISA description.
      cpu: alpha: Delete all occurrances of the simPalCheck function.
      arch: Remove the mt.hh switching header.
      sparc: Move the interrupt types out of isa_traits.hh into interrupts.hh.
      sparc: Move translation constants from isa_traits.hh into tlb.hh.
      x86: Get rid of some unnecessary TheISA-es in x86.
      arch: Stop using TheISA within the ISAs.
      tests: There is no architecture called "timing".
      arch, base, cpu, dev, mem, sim: Remove #if 0-ed out code.
      base: Add a type for keeping track of object file loaders.
      alpha: Add an object file loader for linux.
      arm: Add an object file loader for linux and freebsd.
      mips: Add an object file loader for linux.
      power: Add an object file loader for linux.
      riscv: Add an object file loader for linux.
      sparc: Add an object file loader for linux and solaris.
      x86: Add an object file loader for linux.
      sim: Make the Process create function use the object loader mechanism.
      arm, mem: Move the SecurePortProxy subclass into it's own file.
      mem, arm: Move some helper methods into the base PortProxy class.
      mem, arm: Replace the pointer type in PortProxy with void *.
      arch, base, dev, sim: Remove now unnecessary casts from PortProxy methods.
      mem: Use a const T & in write<> to avoid an unnecessary copy.
      mem: Add a readString method to the PortProxy which takes a char *.
      arch, base, sim: Replace Copy(String)?(In|Out) with equivalent code.
      mem: Remove the now unused Copy* methods from the FS port proxy.
      arch, base, sim: Demote (SE|FS)TranslatingPortProxy &s to PortProxy &s.
      kern: Replace an explicitly instantiated port proxy with one from the tc.
      cpu, sim: Return PortProxy &s from all the proxy accessors.
      cpu: Store the translating proxy with the same pointer in SE or FS mode.
      arch, base, cpu, gpu, sim: Merge getMemProxy and getVirtProxy.
      x86: Move some fixed or dummy config information into X86LocalApic.py.
      cpu: Pull more arch specialization to the top of BaseCPU.py.
      sim: Clean up some mild style bugs in clocked_object.hh.
      sim: Add a hook Clocked objects can implement for frequency changes.
      x86: Make unsuccessful CPUID instructions zero the result.
      x86: Stop CPUID from claiming we support xsave.
      mem: Split the various protocols out of the gem5 master/slave ports.
      mem: Move ruby protocols into a directory called ruby_protocol.
      mem: Put gem5 protocols in their own directory.
      mem, sim, systemc: Reorganize Port and co.s bind, unbind slightly.
      sim: Add a takeOverFrom method to the base Port class.
      sim: Add a << overload for the Port class which prints its name.
      cpu, dev, mem: Use the new Port methods.
      mem: Eliminate the Base(Slave|Master)Port classes.
      cpu: Move O3's data port into the LSQ.
      cpu: Move the instruction port into o3's fetch stage.
      mem: Make PortProxy use a delegate for a sendFunctional function.
      cpu, mem: Add new getSendFunctional method to the base CPU.
      cpu: Make get(Data|Inst)Port return a Port and not a MasterPort.
      dev: Templatize PioPort.
      python: Make the dot writer handle unconnected Port vector elements.
      dev: Scrub out some lingering uses of MemObject.
      mem: Mark MemObject as deprecated.
      dev: Generalize the x86 int source/sink pins.
      sparc: Fix a warning/error in tlb.cc.
      systemc: Expose the utility functions for payload->packet conversion.
      systemc: Make TLM port wrappers for tlm_base_(target|initiator)_socket.
      arch, x86: Rework the debug faults and microops.
      python: Don't try to bind a stat group to the NULL simobject.
      dev, x86: Convert x86 devices to the generic int pins.
      dev, x86: Delete the now unused X86 specific interrupt pins/lines.
      x86: Turn the local APIC into a PioDevice instead of a BasicPioDevice.
      x86: Templatize IntSlavePort.
      x86: Templatize the IntMasterPort.
      mem: Delete the now unused Message*Port classes.
      fastmodel: Add glue code which adapts fastmodels to run in gem5.
      fastmodel: Pull out and simplify the interrupt mechanism in the GIC.
      fastmodel: Add a utility class which makes it easier to watch signals.
      fastmodel: Add a gem5Cpu attribute to the CortexA76x1.
      fastmodel: Let the EVS set an attribute for getSendFunctional to return.
      x86: Switch from MessageReq and Resp to WriteReq and Resp.
      fastmodel: Implement a custom sendFunctional for CortexA76x1.
      fastmodel: Get rid of the back channel mem port in FastModel::ArmCPU.
      base: ELF segment types are not bitfields.
      fastmodel: Make CortexA76x1's interrupts use gem5's mechanisms.
      base: Ensure %p format arguments are printed as pointers.
      base: Get rid of the unused global pointer in object files.
      base: Rename Section to Segment, and some of its members.
      arch-mips,arch-riscv,base: Get rid of the unused HexFile class.
      fastmodel: Export GICV3Comms directly.
      arch, base: Stop assuming object files have three segments.
      arch,base: Stop loading the interpreter in ElfObject.
      arch,base: Separate the idea of a memory image and object file.
      x86: Stop using and delete the x86 IntDevice class.
      fastmodel: Expose all CPU communication ports from the GIC.
      x86: Simplify and consolidate the code that assembles an MSI on x86.
      x86: De-x86ify the IntMasterPort.
      sim,cpu: Get rid of the unused instEventQueue.
      cpu: Delete the unused sched_break_pc(_sys) functions.
      arch,base: Restructure the object file loaders.
      x86: Use a std::function to handle MSI completion.
      arch,base,sim: Move Process loader hooks into the Process class.
      cpu: Get rid of load count based events.
      cpu: Clean up some style issues in pc_event.(hh|cc).
      arm: Don't force the ArmISA::TLB in vtophys.cc.
      mem: Delete the MessageReq and MessageResp memory commands.
      x86: Turn the local APIC Interrupts class into a SimObject.
      cpu: Turn the stage 2 ARM MMUs from params to children.
      arch: Get rid of the unused GenericTLB.
      arch: Make a base class for Interrupts.
      arch: Remove the "interrupts.hh" switching header file.
      cpu,arm: Push the stage 2 MMUs out of the CPU into the TLBs.
      cpu: Apply the ARM TLB rework to the checker CPU.
      cpu: Apply the ARM TLB rework to the O3 checker CPU.
      fastmodel: Add string constructors which delegate to const char * ones.
      cpu: Create a PCEventScope class to abstract the scope of PCEvents.
      cpu: Stop checking for PC changes when servicing a PCEventQueue.
      sim: Make the System object a PCEventScope.
      cpu: Pass the address to check into the PCEventQueue service method.
      cpu: Don't print the CPU name when a (Break|Panic)PCEvent happens.
      cpu,sim: Get rid of a bunch of conditional compilation for PCEvents.
      cpu: Make the ThreadContext a PCEventScope.
      cpu,sim: Delegate PCEvent scheduling from Systems to ThreadContexts.
      cpu: Make accesses to comInstEventQueue indirect through methods.
      cpu: Delegate comInstEventQueue methods to the ThreadContexts.
      cpu: Access inst events through ThreadContext instead of the CPU.
      cpu: Switch off of the CPU's comInstEventQueue.
      fastmodel: Implement getCurrentInstCount.
      fastmodel: Use getCurrentInstCount for totalInsts().
      cpu: Get rid of the serviceInstCountEvents method.
      cpu: Get rid of the nextInstEventCount method.
      mips,riscv: Get rid of some Alpha cruft in these System classes.
      configs: Update HPI to use ArmDTB and ArmITB.
      sparc: Create a helper functions to install firmware images.
      x86: Remove TheISA from x86 devices.
      alpha: Remove TheISA from the Alpha devices.
      dev: Remove SINIC_VTOPHYS and related code.
      arm: Get rid of using namespace std and TheISA in realview.cc.
      dev: Remove using namespace std and TheISA from ide_disk.cc.
      dev: Get PageBytes from the system in the ide_disk model.
      dev: Get PageBytes from the system in the ARM generic timer.
      dev: Stop including config/the_isa.hh unnecessarily.
      dev: Remove TheISA from ns_gige.cc.
      fastmodel: Refactor the CortexA76x1 model for MP support.
      sim: Add a getGuestByteOrder accessor to the system class.
      dev: Make the virtio devices track endianness explicitly.
      arch: Make endianness a property of the OS class syscalls can consume.
      sim: Use the system and OS to get endianness.
      kern: When dumping dmesg, detect the byte order dynamically.
      arch,sim: Make copyStringArray take an explicit endianness.
      alpha: Convert htog and gtoh to htole and letoh.
      fastmodel: Templatize the xn versions of the CortexA76.
      fastmodel: Enable auto bridging and use it to simplify CortexA76x1.
      fastmodel: Add CortexA76x[234] models.
      mem: Delete the packet accessors which use guest endianness.
      arch,cpu: Move endianness conversion of inst bytes into the ISA.
      cpu: Use std::array for registers in SimpleThread.
      fastmodel: Implement inst count events in the IRIS thread contexts.
      fastmodel: Plumb the ITB and DTB through the IRIS thread context.
      sparc: Replace htog and gtoh with htobe and betoh.
      mips: Replace gtoh and htog with letoh and htole.
      x86: Replace htog and gtoh with htole and letoh.
      power: Replace gtoh and htog with betoh and htobe.
      cpu: Fix a bug in getCurrentInstCount in the checker CPU.
      arm: Set the number of FloatRegs to zero.
      fastmodel: Implement reading vector registers with readVecReg.
      arm: Replace most htog and gtoh with htole and letoh.
      arch: Make and use endian specific versions of the mem helpers.
      arch: Get rid of the (Big|Little)EndianGuest namespaces.
      scons: Don't use PROTOC for the protoc command and to flag its presence.
      scons: Use HAVE_PROTOC when building protobuf files.
      scons: Add "warning" and "error" methods.
      scons: Use the new error() and warning() methods.
      arm: Stop serializing ISA values wihch are cached from the system.
      arch,cpu: Get rid of ISA_HAS_CC_REGS and its associated ifdefs.
      arm: Make sure not to shift off of the end of a uint32_t in KVM.
      mem-cache: Remove a std::move clang says is unnecessary.
      mem-cache: Avoid hiding a virtual method in the dictionary compressor.
      fastmodel: Suppress a spurious warning on clang for amba_pv.h.
      systemc: Add a bunch of missing overrides to the systemc headers.
      systemc: Fix up some lingering Accellera specific code in TLM v1.
      systemc: Suppress a spurious clang warning in the systemc headers.
      systemc,fastmodel: Use the gem5_scons error and warning functions.
      fastmodel: Switch the diagnostic pragmas to GCC from clang.
      systemc: Purposefully *expose* bind in the initiator socket.
      sparc: Fix the predecoder's moreBytes method.
      sparc: Fix the getresuidFunc prototype.
      sim: Change the syscall executor to a std::function.
      sim: Small style fixes in sim/syscall_return.hh.
      sim: Add a suppression mechanism to the SyscallReturn class.
      kvm,arm: Update the KVM ARM v8 CPU to use vector regs.
      scons: Fixes to improve python 3 support.
      scons: Set the partial linking group for EXTRAS dirs.
      sim: Make the syscalls use the SyscallReturn suppression mechanism.
      sim: Reintroduce the ignoreWarnOnceFunc syscall handler.
      arch: Use ignoreWarnOnceFunc instead of the WarnOnce flag.
      sim: Get rid of the now unused SyscallDesc flags and methods.
      sim: Add a mechanism to translate ABIs to call host funcs from a TC.
      sim: Add a wrapper/subclass for SyscallDesc which uses GuestABI.
      arch: Stop using setSyscallArg to set argc and argv.
      arch: Get rid of the now unused setSyscallArg.
      x86: Stop manually clearing RFLAGS.RF after a system call.
      arch,cpu,sim: Push syscall number determination up to processes.
      sim,arch: Collapse the ISA specific versions of m5Syscall.
      python: Convert terminal escape sequences to strings.
      config: Default the indirect branch predictor to "None".
      fastmodel: Add a header for IRIS MSN constants.
      fastmodel: Add an address translation mechanism to the ThreadContext.
      fastmodel: Create a TLB model which uses IRIS to do translations.
      fastmodel: Implement port proxies.
      fastmodel: Tell fast model not to shutdown when time stops.
      sim: Include some required headers in the syscall debug macros header.
      x86: Fix some bugs with KVM in SE mode on Intel machines.
      fastmodel: Implement PC based events.
      fastmodel: Determine what space to use for breakpoints dynamically.
      fastmodel: Implement readVecRegFlat for ArmThreadContext.
      fastmodel: Handle "special" vector regs without calling into IRIS.
      fastmodel: Checkpoint the TCs when checkpointing a fast model CPU.
      fastmodel: Mostly collapse ARM base classes for the CortexA76 CPU.
      fastmodel: Move the ARM IRIS threadcontext into CortexA76.
      fastmodel: Move ARM but not CortexA76 specific bits to the IRIS TC.
      arch,sim: Use the guest ABI mechanism with pseudo instructions.
      arch,sim: Stop decoding the pseudo inst subfunc value.
      fastmodel: Implement the vecPredReg accessor functions.
      arch,sim: Promote the m5ops_base param to the System base class.
      base: Include some required headers in amo.hh.
      arch: Make the generic micropc enabled PCState set nupc to 1.
      sim: Implement a varargs like mechanism for GuestABI system.
      sim: Add a unit test for the GuestABI mechanism.
      sim: Add a dumpSimcall mechanism to GuestABI.
      configs: Remove check for kernel in fs.py.
      x86: Move miscreg initialization to the ISA class.
      x86: Move local APIC initialization out of initCPU.
      x86: Stop clearing RAX for BIST in initCPU.
      arm: A couple small fixes for the arm64 bootloader makefile.
      arch: Get rid of the unused (and mostly undefined) zeroRegisters.
      arm: Remove checkpointing from the ARM TLBs.
      fastmodel: Implement CC reg accessors.
      cpu: Consolidate and move the CPU's calls to TheISA::initCPU.
      sim: Eliminate the breakAtKernelFunction function.
      sim: Move findFreeContext to System.
      cpu: Fix ExeTraceRecord::traceInst.
      sim: Add a GuestABI mechanism to allocate space for a return value.
      mem: Make slicc generate some default methods explicitly.
      scons: Add a mechanism to append flags when building particular files.
      scons: Disable spurious "array-bounds" warnings for protobuf cc files.
      base: Delete an inet.hh accessor which is unused and makes gcc 9 upset.
      arch,base,cpu: Add some default constructors/operators explicitly.
      sim,cpu: Move the call to initCPU into System.
      arch,sim: Merge initCPU and startupCPU.
      arch,sim: Merge initCPU into the ISA System classes.
      arm: Use static_cast to get access the ARM specific ISA functions.
      arch: Introduce a base class for ISA classes.
      cpu: Make getIsaPtr return a BaseISA pointer.
      fastmodel: Implement flattened int reg reading and writing.
      fastmodel: Ensure unset vec reg bits are zero/false.
      sim: Make it possible for a GuestABI to init its Position based on a TC.
      sim: Add a typetraits style mechanism to test for VarArgs.
      arch,sim: Use _m5opRange in System::allocPhysPages.
      x86: Use the m5 op range in the system.
      sim: Add a function for decoding the field(s) of an m5op address.
      x86: Handle m5 op accesses directly in the mmapped IPR handlers.
      arch: Simplify the SyscallDesc tables.
      sim: Add a transitional syscall ABI which defers to Process.
      arch: Switch SyscallDescABI in for SyscallDesc.
      sim: Use the Guest ABI mechanism in writeFunc.
      sim: Convert most of the common syscalls to use the guest ABI.
      arch,sim: Replace setuidFunc with ignoreFunc.
      arch: Add a bunch of missing override specifiers.
      arm: Fix how a bitfield is extracted in some SVE instructions.
      riscv: Cast to float explicitly when comparing a float to an int.
      base: Use a const auto & in a range based for loop.
      scons: Fix an error about an unrecognized compiler.
      arm: Call pseudoInst directly from the mmapped IPR handlers.
      arch: Get rid of the generic mmapped IPR mechanism.
      mem: Eliminate the now unused GENERIC_IPR request flag.
      arch,cpu: Make the CPU's ISA parameter type BaseISA.
      arm: "Correct" the spelling of flavor.
      arm: Don't checkpoint the SystemCounter's "_period" value.
      scons,arch: Remove simple scalar compatibility.
      scons: Delete the ALPHA default build configuration.
      system: Delete alpha files from system.
      configs: Remove mentions of alpha from the configs.
      cpu: Remove alpha specialized code.
      sim: Remove mention of alpha.
      dev: Delete alpha devices.
      base: Delete alpha loader components.
      alpha: Delete the alpha arch files.
      tests: Delete authors lists from the unittest directory.
      scons: Remove authors from the main SConsctruct/SConscript files.
      kern: Delete authors lists from files in kern.
      gpu-compute: Delete authors lists from gpu-compute files.
      base: Delete authors lists from files in base.
      config: Delete authors lists from config files.
      misc: Delete authors lists from top level .md files.
      misc: Delete authors lists from documentation related files.
      learning-gem5: Delete authors lists from learning_gem5.
      misc: Delete authors lists from proto.
      python: Delete authors lists from the python directory.
      mem: Delete authors lists from mem files.
      cpu: Delete authors lists from the cpu directory.
      dev: Delete the authors list from files in src/dev.
      systemc: Delete authors lists from systemc files.
      sim: Delete authors lists from files in sim.
      dev,mips: Delete a large binary file from src/dev/mips.
      arch: Delete authors lists from generic arch files.
      arch: Delete authors lists from the null arch files.
      arm: Delete authors lists from the arm files.
      hsail: Delete the author list from gpu_isa.hh.
      mips: Delete authors lists from mips files.
      power: Delete the authors lists from the power ISA.
      riscv: Delete authors lists from riscv files.
      sparc: Delete authors lists from sparc files.
      x86: Delete authors lists from x86 files.
      tests: Delete authors lists from test files.
      system: Delete authors lists from system source files.
      misc: Delete authors lists from shared include files.
      scons: Remove mention of ALPHA from the SConstruct.
      misc: Remove arch-alpha from the MAINTAINERS file.
      misc: Remove mention of ALPHA from the README.
      tests: Delete some test files which are specific to Alpha.
      util: Delete authors lists from files in util.
      util: Delete some Alpha related files from the m5 utility.
      util: Remove ALPHA from the regress script.
      fastmodel: Set itstate when building a PCState from IRIS.
      fastmodel: Ignore clearArchRegs for now.
      fastmodel: Return nullptr from getCheckerCpuPtr on fast model CPUs.
      fastmodel: Add in a missing include and namespace for itState.
      fastmodel: Use a shared pointer to track PC events.
      fastmodel: Use all possible address spaces when setting up a bp.
      arch: Convert the static constexpr SIZE in vec_reg to a function.
      mem: Use using to expose a print method that would otherwise be hidden.
      sim,arch: Move code that waits for a GDB connection to startup().
      arm: Use a const ThreadContext * and readMiscRegNoEffect in places.
      arm: Expose the constants which select a semihosting operation.
      ext: Disable the unused-value warning in clang for pybind.
      arch,cpu,mem: Replace the mmmapped IPR mechanism with local accesses.
      x86: Track message based interrupt cleanup functions in sender state.
      mem: Remove the version of the FS translating port proxy with no tc.
      cpu: Switch away from some fringe Request constructors.
      mem: Get rid of an unused Request constructor.
      base: Optimize and otherwise fix a couple of functions in intmath.hh.
      base: Disable a warning in hdf5.cc which comes from an external header.
      mem: Add default initializers to the fields in Request.
      mem: Get rid of another unused Request constructor.
      mem: Get rid of one more unused Request constructor.
      mem: Merge the virtual Request constructors.
      arch,cpu,gpu-compute,mem: Remove asid from Request objects.
      sparc: Delete some commented out code in the TLB.
      base: Clean up condcodes.hh slightly.
      sparc: Implement translateFunctional in the TLB class.
      arch,cpu: Get rid of unused/unimplemented vtophys variants.
      base,cpu,sim: Stop including arch/vtophys.hh when not using vtophys.
      arch: Remove the "process.hh" switching header file.
      mem: Change some default values in the Request class.
      config,arch,cpu,kern,sim: Extract kernel information from System.
      mips: Implement translateFunctional.
      power: Implement translateFunctional.
      sim: Use variadic GuestABI arguments in a few additional syscalls.
      arch,sim: Convert clone to GuestABI and define a cloneBackwardsFunc.
      sim: Remove ISA specific KVM handling of the return from clone.
      arm: Convert ARM specific syscalls to GuestABI.
      x86: Convert x86 specific syscalls to GuestABI.
      riscv: Convert RISCV specific syscalls to Guest ABI.
      sparc: Convert SPARC specific syscalls to Guest ABI.
      power: Convert POWER specific syscalls to Guest ABI.
      mips: Convert MIPS specific syscalls to Guest ABI.
      sim: Make SyscallReturn handle extra/"pseudo" return registers.
      sim: Add GenericSyscallABI structs which can be used by the ISAs.
      x86: In X86 linux, system calls simply return their result in a register.
      x86: Define a local ABI for system calls.
      sparc: Get rid of some commented out constants.
      sparc: Introduce constants for pseudo integer registers.
      sparc: Introduce a BitUnion for the CCR register.
      sparc: Use a SPARC specific GuestABI for system calls.
      arm: Use an ARM specific GuestABI for ARM system calls.
      sim: Remove the get*PseudoFunc handlers.
      mips: Use a mips specific GuestABI for mips system calls.
      power: Use a power specific GuestABI for power system calls.
      riscv: Use a riscv specific GuestABI for riscv system calls.
      sim: Convert ftruncate64 to GuestABI.
      sim: Clean up some constants used in some syscalls.
      sim,gpu: Make ioctl unconditionally take an address parameter.
      sim: Convert the various flavors of pipe to GuestABI.
      sim: Get rid of the no longer needed DefaultSyscallABI.
      sim: Rework the SyscallDesc to use the dumpSimcall mechanism.
      sim: Get rid of the now unused getSyscallArg method.
      sim: Add a returnInto function to the SyscallDesc class.
      sim: Use the new returnInto method in cloneFunc.
      arch,sim: Get rid of the now unused setSyscallReturn method.
      arm: Delete the unused onKvmExitHypercall method.
      kern: Stop using a pseudo instruction to quiesce the ThreadContext.
      arm: Implement the AAPCS64 ABI.
      sim: Generalize the GuestABI Result::allocate() mechanism.
      sim: Split up the guest_abi.hh header.
      sim: Optionally pass "position" to GuestABI::Result::store.
      sim: Rename allocate in GuestABI to prepare.
      sim: Rename GuestABI's Position to State.
      arm: Implement the AAPCS32 ABI.
      kern: Minor style cleanup in the base SkipFuncEvent class.
      arm: Eliminate the MustBeOne ARM specific request flag.
      sim: Provide an implementation for the pread64 system call.
      x86: Hook up pread64 in 32/64 bit linux, and pwrite64 in 32 bit.
      x86: Implement translateFunctional.
      kern,arch: Refactor SkipFuncEvent to not use skipFunction.
      arch,kern: Rename some function events to have better names.
      riscv: Implement translateFunctional.
      arm: Demote PCEvent subclass pointers to PCEvent pointers.
      mem: Make the FSTranslatingPortProxy stop using vtophys.
      arch: Eliminate vtophys and its switching header file.
      sparc: Make translateFunctional ignore alignment and use the page tables.
      arch,cpu,mem,sim: Reimplement the SE translating proxy using the FS one.
      arch,base,cpu,dev,kern,mem,sim: Drop FS from FSTranslatingPortProxy.
      mem: Add a Request::Flags parameter to the translating port proxies.
      util: Add a script to help build cross compilers.
      arm: Use a non-template indexed version of laneView in aapcs32.
      arm,kern: Use GuestABI to call printk from the kernel.
      base: Convert the annotation methods to take actual arguments.
      util: Add the ability to build a cross GDB to build_cross_gcc.py.
      sparc: Add the AT_RANDOM aux vector to the initial stack.
      sim: Get rid of the Arguments class.
      arch,sim: Create a common structure to hold syscall tables.
      arch,sim: Drop the syscall number from the syscall func signature.
      arch,sim: Merge Process::syscall and Process::getDesc.
      util: Add some settings files for build_cross_gcc.
      sparc: Hook up but not implement the get/set context traps.
      sparc: Add a definition of tgt_stat64 for SPARC64.
      sparc: Hook up fstat64 for SPARC64.
      mips: Add the AT_RANDOM aux vector to the initial stack.
      mem: Remove a check that the memory size is a multiple of the page size.
      arm: Make the semihosting implementation use GuestABI.
      power: Add the AT_RANDOM aux vector to the initial stack.
      power: Hook up the readlink system call.
      arm: Optionally enable gem5 extended semihosting calls.
      arch,sim: Return whether or not a pseudo inst was recognized.
      arm: Return whether a semihosting call was recognized/handled.
      scons: Use the scons environment when marshalling.
      util: Add a file to suppress spurious lsan leaks in the python lib.
      misc: Add Gabe Black as the scons and util maintainer.
      scons: Use the lsan-suppressions file when running internal commands.
      scons: Replace find_first_prog() with the built in Detect().
      scons: Get rid of a redundant "Warning:" in the SConstruct.
      scons: Use the textwrap module to wrap warnings/errors neatly.
      scons: Add a mechanism to accumulate warnings to reprint at the end.
      riscv: Fix RISCV builds by updating its use of pseudoInst().
      arm: Add a gem5 specific pseudo op semihosting call.
      arm: Add a callSemihosting method that figures out the width.
      scons: Call summarize_warnings() when scons finishes building.
      scons: Enable LTO and partial linking with gcc >= 8.1.
      arm: Make semihosting use virtual addresses.
      mem: Get rid of the now unused SecurePortProxy class.
      util: Remove the annotation pseudo ops symbols from the m5 utility.
      misc: Remove the now unused M5OP_FOREACH_ANNOTATION macro.
      util: Remove the subfunc arg from M5OP_FOREACH.
      util: Undef M5OP at the end of assembly files that use M5OP_FOREACH.
      util,sparc: Use M5OP_FOREACH to define the m5op entry points for sparc.
      util,x86: Use M5OP_FOREACH to define the m5op entry points for x86.
      util: Move source files into a src directory.
      util: Update the m5 util Makefiles to not use javah.
      util: Update jni_gem5Op.c so it will compile again.
      scons: Fix an exception in the DictImporter on scons shutdown.
      util: Implement PIC assembly for the aarch64.
      util: Add SCons build files for the aarch64 verson of the m5 utility.
      util,scons: Detect java and lua51 in the m5 utility scons files.
      util: Delete the aarch64 Makefile for the m5 utility.
      util: Move m5op_arm_A64.S into an aarch64 subdirectory.
      util: In build_cross_gcc, set LIMITS_H_TEST=true.
      util,scons: Generalize the aarch64 scons for the m5 util.
      util: Add config files for crosstool-ng toolchains.
      mem: Support initializing a memory with an image file.
      sparc,configs: Initialize ROMs directly, not with the workload.
      fastmodel: Enable semihosting, including pseudo insts.
      scons: Import "sys" which is used in an exception handler.
      scons: Use six.input instead of raw_input.
      mem: Rename the ruby Prefetcher class RubyPrefetcher.
      dev,cpu: Make two very generic enums ScopedEnums.
      arch,sim,kern,dev,cpu: Create a Workload SimObject.
      configs,arch,sim: Move fixFuncEventAddr into the Workload class.
      base,arch,sim,cpu: Move object file loader components into a namespace.
      util: Add some additional flags for files in the m5 util.
      util: Convert the other architecture's m5 utility builds to scons.
      misc: Remove m5a_ (critical path annotation) prototypes from m5ops.h.
      misc: Get rid of the m5op_flags.h header.
      misc: Get rid of constants used for critical path annotation.
      util: Update the java wrapper names for m5 ops.
      misc: Use a const char * in the m5op m5_add_symbol.
      util: Add missing functions to the java wrapper for m5 ops.
      util: Remove the "pin" command from the m5 utility.
      util: Correct some help text for the initparam m5 utility command.
      sim: Simplify collecting the key value in initParam.
      util: Refactor the string->register packing function in the m5 utility.
      misc: Replace a deprecated method in protoio.cc.
      util: Further simplify the initParam implementation.
      util: Improve the usage text of the m5 utility.
      util: Eliminate the sw99param m5 utility command.
      util: Delete the execfile m5 utility command.
      misc: Tidy up M5OP_FOREACH and the constants in m5ops.h.
      sim,misc: Rename M5OP_ANNOTATE to M5OP_RESERVED1.
      misc: Add the SE mode m5 ops to m5ops.h.
      misc,util: Remove explicit ';'s from M5OP_FOREACH.
      util: Use a dispatch table to call ops in the m5 utility.
      util: Add a helpful macro for merging two tokens to m5ops.h.
      util: Add an abstraction layer for call types in the m5 utility.
      arm: Fix some bugs in the aapcs64 implementation.
      arm: Add a unit test for some aspects of the aapcs64 ABI.
      misc: Use the protobuf version to choose between ByteSize(Long).
      sim: Add an option to suppress the return value in invokeSimcall.
      python: Fix compareVersions for python 3.
      util: Add support for multiple call types in the m5 utility.

Andreas Hansson <andreas.hanson@arm.com> (750):
      SPARC: Fixing a minor copy-paste bug using the wrong variable
      MAC: Make gem5 compile and run on MacOSX 10.7.2
      SWIG: Make gem5 compile and link with swig 2.0.4
      MEM: Differentiate functional cache accesses from CPU and memory
      MEM: Add the system port as a central access point
      Ruby: Change the access permissions for MOESI hammer
      Ruby: Change the access permissions for MOESI hammer
      MEM: Add port proxies instead of non-structural ports
      CPU: Moving towards a more general port across CPU models
      MEM: Simplify ports by removing EventManager
      MEM: Remove the notion of the default port
      MEM: Remove Port removeConn and MemObject deletePortRefs
      MEM: Separate queries for snooping and address ranges
      MEM: Make the bus bridge unidirectional and fixed address range
      MEM: Removing the default port peer from Python ports
      MEM: Make the bus default port yet another port
      MEM: Fix fs.py by specifying the range size rather than end
      ns_gige: Fix a missing curly brace in if-statement
      MEM: Clean-up of Functional/Virtual/TranslatingPort remnants
      MEM: Make the RubyPort physMemPort a PioPort instead of M5Port
      Ruby: Connect system port in Ruby network test
      Thread: Use inherited baseCpu rather than cpu in SimpleThread
      MEM: Remove the otherPort from the cache ports
      Regression: Update the regress script after SE/FS merge
      MEM: Remove onRetryList from BusPort and rely on retryList
      MEM: Introduce the master/slave port roles in the Python classes
      MEM: Pass the ports from Python to C++ using the Swig params
      MEM: Explicit ports and Python binding on CopyEngine
      MEM: Fix master/slave ports in Ruby and non-regression scripts
      Script: Fix the scripts that use the num_cpus cache parameter
      MEM: Fix residual bus ports and make them master/slave
      MEM: Fatal when no port can be found for an address
      CPU: Round-two unifying instr/data CPU ports across models
      MEM: Move port creation to the memory object(s) construction
      MEM: Make port proxies use references rather than pointers
      MEM: Move all read/write blob functions from Port to PortProxy
      Ruby: Simplify tester ports by not using SimpleTimingPort
      MEM: Prepare mport for master/slave split
      MEM: Simplify cache ports preparing for master/slave split
      SWIG: Ensure ptrdiff_t is a known type in gcc >= 4.6.1
      MEM: Make all the port proxy members const
      Ruby: Rename RubyPort::sendTiming to avoid overriding base class
      Stats: Fix the realview regression stats after nvmem move
      CPU: Check that the interrupt controller is created when needed
      Stats: Update stats for changeset 8868
      scripts: Fix to ensure that port connection count is always set
      clang: Fix recently introduced clang compilation errors
      gcc: Clean-up of non-C++0x compliant code, first steps
      Python: Fix a conditional expression that requires Python 2.5
      Scons: Remove Werror=False in SConscript files
      MEM: Split SimpleTimingPort into PacketQueue and ports
      MEM: Unify bus access methods and prepare for master/slave split
      Ruby: Fix Set::print for 32-bit hosts
      Power: Change bitfield name to avoid conflicts with range_map
      range_map: Enable const find and iteration
      CPU: Unify initMemProxies across CPUs and simulation modes
      Ruby: Remove the physMemPort and instead access memory directly
      MEM: Remove legacy DRAM in preparation for memory updates
      Atomic: Remove the physmem_port and access memory directly
      Python: Make the All proxy traverse SimObject children as well
      Ruby: Fix the example configurations option parsing
      MEM: Enable multiple distributed generalized memories
      Ruby: Ensure order-dependent iteration uses an ordered map
      Stats: Update with use of std::map for ordered iteration in Ruby
      clang/gcc: Fix compilation issues with clang 3.0 and gcc 4.6
      Regression: Add ANSI colours to highlight test status
      MEM: Separate snoops and normal memory requests/responses
      MEM: Remove the Broadcast destination from the packet
      Ruby: Use MasterPort base-class pointers where possible
      clang/gcc: Use STL hash function for int64_t and uint64_t
      MEM: Add the PortId type and a corresponding id field to Port
      MEM: Use base class Master/SlavePort pointers in the bus
      MEM: Separate requests and responses for timing accesses
      Ruby: Ensure snoop requests are sent using sendTimingSnoopReq
      MEM: Do not forward uncacheable to bus snoopers
      MEM: Add the communication monitor
      Config: Fix a typo in the se.py script for setting fastmem
      Config: Exit with fatal if a port is already connected
      MEM: Add a snooping DMA port subclass for table walker
      DMA: Split the DMA device and IO device into seperate files
      Config: Use the attribute naming and include ports in JSON
      Packet: Cleaning up packet command and attribute
      Cache: Remove dangling doWriteback declaration
      Bridge: Split deferred request, response and sender state
      Packet: Updated comments for src and dest fields
      Packet: Unify the use of PortID in packet and port
      Bus: Turn the PortId into a transport function parameter
      Bus: Remove redundant packet parameter from isOccupied
      gcc: Small fixes to compile with gcc 4.7
      Stats: Fix stats to match output after changeset 8800b05e1cb3
      Bus: Split the bus into a non-coherent and coherent bus
      Power: Fix MaxMiscDestRegs which was set to zero
      Timing CPU: Remove a redundant port pointer
      Build: Point to the appropriate tcmalloc package
      swig: Use SWIG from environment when determining version
      gcc: Fix warnings for gcc 4.7 and clang 3.1
      Fix: Address a few benign memory leaks
      Port: Move retry from port base class to Master/SlavePort
      Port: Add isSnooping to slave port (asking master port)
      Port: Add getAddrRanges to master port (asking slave port)
      Port: Make getAddrRanges const
      Bus: Replace tickNextIdle and inRetry with a state variable
      Bus: Add a notion of layers to the buses
      Bus: Split the bus into separate request/response layers
      Bus: Make the default bus width 8 bytes instead of 64
      Port: Align port names in C++ and Python
      Stats: Updates due to bus changes
      Port: Hide the queue implementation in SimpleTimingPort
      Mem: Make members relating to range and size constant
      EventManager: Rename queue accessor and remove cast operator
      scons: Add LIBRARY_PATH from the user environment to Scons
      Mem: Make SimpleMemory single ported
      Regression: Fix topologies path in failing pc-simple-timing-ruby
      Bridge: Use EventWrapper instead of Event subclass for sendEvent
      Config: Use clock option in se/fs script and pass to switch_cpus
      Checkpoint: Fix broken checkpointing functionality
      Clock: Move the clock and related functions to ClockedObject
      Clock: Make Tick unsigned and remove UTick
      EventManager: Remove test for NULL pointer in constructor
      PacketQueue: Allow queuing in the same tick as desired send tick
      CPU: Remove overloaded function_trace_start parameter
      Device: Remove overloaded pio_latency parameter
      Port: Extend the QueuedPort interface and use where appropriate
      Bridge: Remove NACKs in the bridge and unify with packet queue
      Packet: Remove NACKs from packet and its use in endpoints
      DMA: Refactor the DMA device and align timing and atomic
      swig: Disable unused value warning with llvm 3.1 compilers
      Checker: Fix checker CPU ports
      Checker: Bump the realview-o3-checker regression
      Port: Stricter port bind/unbind semantics
      Clock: Rework clocks to avoid tick-to-cycle transformations
      Clock: Add a Cycles wrapper class and use where applicable
      Param: Transition to Cycles for relevant parameters
      Device: Bump PIO and PCI latencies to more reasonable values
      Device: Update stats for PIO and PCI latency change
      Inet: Remove the SackRange and its use
      AddrRange: Remove the unused range_ops header
      Ruby: Bump the stats after recent memory controller changes
      Checkpoint: Pass maxtick to avoid undefined variable
      clang: Fix issues identified by the clang static analyzer
      Stats: Remove the reference stats that are no longer present
      scons: Use c++0x with gcc >= 4.4 instead of 4.6
      scons: Restructure ccflags and ldflags
      scons: Add a target for google-perftools profiling
      gcc: Enable Link-Time Optimization for gcc >= 4.6
      Mem: Add a maximum bandwidth to SimpleMemory
      Stats: Update stats to reflect SimpleMemory bandwidth
      AddrRange: Simplify AddrRange params Python hierarchy
      AddrRange: Remove unused range_multimap
      AddrRange: Simplify Range by removing stream input/output
      AddrRange: Transition from Range<T> to AddrRange
      Mem: Remove the file parameter from AbstractMemory
      Scons: Verbose messages when dependencies are not installed
      Mem: Tidy up bus member variables types
      TrafficGen: Add a basic traffic generator
      TrafficGen: Add a basic traffic generator regression
      DRAM: Introduce SimpleDRAM to capture a high-level controller
      SimpleDRAM: A basic SimpleDRAM regression
      Regression: Set the clock for twosys-tsunami CPUs
      Stats: Update stats for twosys-tsunami after setting CPU clock
      Configs: Fix memtest.py by moving the system port
      Configs: Fix memtest cache latency to match new parameters
      Doxygen: Update the version of the Doxyfile
      Mem: Determine bus block size during initialisation
      Mem: Use range operations in bus in preparation for striping
      Param: Fix proxy traversal to support chained proxies
      Clock: Inherit the clock from parent by default
      Regression: Use addTwoLevelCacheHierarchy in configs
      Stats: Update stats for use of two-level builder
      Regression: Use CPU clock and 32-byte width for L1-L2 bus
      Stats: Update stats for new default L1-to-L2 bus clock and width
      Configs: Set the memtest clock to a reasonable value
      Stats: Update memtest stats after setting clock
      Mem: Use cycles to express cache-related latencies
      Stats: Update stats for cache timings in cycles
      Fix: Address a few minor issues identified by cppcheck
      Mem: Use deque instead of list for bus retries
      Checkpoint: Make system serialize call children
      Mem: Separate the host and guest views of memory backing store
      Port: Add protocol-agnostic ports in the port hierarchy
      Mem: Fix incorrect logic in bus blocksize check
      stats: Update t1000 stats to match recent changes
      dev: Remove zero-time loop in DMA timing send
      stats: Update stats for DMA port send
      arm: Use table walker clock that is inherited from CPU
      config: Use shared cache config for regressions
      config: Use SimpleDRAM in full-system, and with o3 and inorder
      stats: Update stats to reflect use of SimpleDRAM
      dev: Make default clock more reasonable for system and devices
      stats: Update the stats to reflect the 1GHz default system clock
      config: Fix the cache class naming in regression scripts
      config: Remove unused mem_size in fs.py
      config: Add a check for fastmem only used with Atomic CPU
      config: Unify caches used in regressions and adjust L2 MSHRs
      stats: Update stats for unified cache configuration
      config: Fix a typo in the simple-atomic-mp configuration
      stats: Update stats for fixed simple-atomic-mp config
      mem: Fix typo in port comments
      mem: Fix DRAM draining to ensure write queue is empty
      config: Fix description of checkpoint option from cycle to tick
      mem: Fix a bug in the memory serialization file naming
      scons: Fix libelf linking errors when using clang/llvm
      ruby: Fix missing cxx_header in Switch
      mem: Add sanity check to packet queue size
      cpu: Fix the traffic gen read percentage
      config: Reduce DRAM controller regression traffic rate
      stats: Update DRAM regression stats to match new config
      dev: Fix the Pl111 timings by separating pixel and DMA clock
      scons: Add support for google protobuf building
      base: Add wrapped protobuf output streams
      mem: Add tracing support in the communication monitor
      base: Add wrapped protobuf input stream
      cpu: Encapsulate traffic generator input in a stream
      cpu: Add support for protobuf input for the trace generator
      cpu: Share the send functionality between traffic generators
      mem: Remove the joining of neighbouring ranges
      base: Encapsulate the underlying fields in AddrRange
      mem: Skip address mapper range checks to allow more flexibility
      mem: Tidy up bus addr range debug messages
      config: Do not use hardcoded physmem in fs script
      base: Simplify the AddrRangeMap by removing unused code
      config: Traverse lists when visiting children in all proxy
      mem: Add interleaving bits to the address ranges
      base: Add support for merging of interleaved address ranges
      mem: Merge ranges that are part of the conf table
      dev: Make the ethernet devices use a non-zero clock
      sim: Fatal if a clocked object is set to have a clock of 0
      scons: Remove stale compiler options
      scons: Enforce gcc >= 4.4 or clang >= 2.9 and c++0x support
      dev: Do not serialize timer parameters
      stats: Bump failing x86 regression stats
      scons: Address clang 3.2 compilation error
      scons: Disable protobuf if pkg-config and CheckLib fails
      stats: Fix naming (BPredUnit to branchPred) for 20.parser ARM o3
      mem: Separate out the different cases for DRAM bus busy time
      mem: Add DDR3 and LPDDR2 DRAM controller configurations
      stats: Update stats for regressions using SimpleDDR3
      mem: Add comments for the DRAM address decoding
      Ruby: Fix compilation errors on gcc 4.7 and clang 3.2
      mem: Tighten up cache constness and scoping
      mem: Ensure trace captures packet fields before forwarding
      base: Fix a bug in the address interleaving
      mem: Add predecessor to SenderState base class
      x86: Move APIC clock divider to Python
      sim: Make clock private and access using clockPeriod()
      mem: Add deferred packet class to prefetcher
      mem: Make packet bus-related time accounting relative
      mem: Change accessor function names to match the port interface
      mem: Enforce strict use of busFirst- and busLastWordTime
      scons: Fix up numerous warnings about name shadowing
      scons: Add warning for missing field initializers
      scons: Add warning for overloaded virtual functions
      scons: Add warning for overloaded virtual functions
      scons: Add warning for missing declarations
      scons: Add warning delete with non-virtual destructor
      scons: Unify the flags shared by gcc and clang
      scons: Fix warnings issued by clang 3.2svn (XCode 4.6)
      mem: Fix sender state bug and delay popping
      mem: Merge ranges in bus before passing them on
      mem: Merge interleaved ranges when creating backing store
      mem: Add support for multi-channel DRAM configurations
      mem: SimpleDRAM variable naming and whitespace fixes
      stats: Update stats to reflect SimpleDRAM changes
      mem: Add a method to build multi-channel DRAM configurations
      mem: Add check if SimpleDRAM nextReqEvent is scheduled
      x86: Make the table walker reset the packet delay
      ruby: Fix gcc 4.8 maybe-uninitialized compilation error
      base: Fix address range granularity calculations
      mem: Fix missing delete of packet in DRAM access
      cpu: Avoid including inorder TLBUnit to avoid gcc LTO bug
      cpu: Remove CpuPort and use MasterPort in the CPU classes
      mem: Add optional request flags to the packet trace
      mem: Add a generic id field to the packet trace
      mem: Introduce a variable for the retrying port
      mem: Separate waiting for the bus and waiting for a peer
      stats: Update stats to reflect bus retry changes
      stats: Update stats for cache retry event check
      util: Add a utility script for encoding packet traces
      util: Add a utility script for decoding packet traces
      stats: Bump the vortex stats to match latest behaviour
      dev: Fix a bug in the use of seekp/seekg
      stats: Update stats for ldr_ret_uop (changeset 35198406dd72)
      mem: Replace check with panic where inhibited should not happen
      mem: Add a WideIO DRAM configuration
      config: Add a mem-type config option to se/fs scripts
      cpu: Make the generators usable outside the TrafficGen module
      cpu: Use request flags in trace playback
      mem: More descriptive enum names for address mapping
      mem: Address mapping with fine-grained channel interleaving
      cpu: Fix TraceGen flag initalisation
      config: Added memory type to t1000 regression
      cpu: Make hash struct instead of class to please clang
      base: Avoid size limitation on protobuf coded streams
      util: Auto generate the packet proto definitions
      mem: Avoid explicitly zeroing the memory backing store
      mem: Adapt the LPDDR2 to match a single x32 channel
      mem: Add a LPDDR3-1600 configuration
      mem: Check for waiting state in bus draining
      mem: Use unordered set in bus request tracking
      mem: Tidy up a few variables in the bus
      mem: Separate the two snoop response cases in the bus
      mem: Make the buses multi layered
      mem: Make returning snoop responses occupy response layer
      cpu: Fold together the StateGraph and the TrafficGen
      cpu: Move traffic generator sending out of generator states
      cpu: Block traffic generator when requests have to retry
      cpu: Add request elasticity to the traffic generator
      cpu: Prune the stale TraceCPU
      mem: Fix MSHR print format
      mem: Spring cleaning of MSHR and MSHRQueue
      mem: Add static latency to the DRAM controller
      mem: Add bytes per activate DRAM controller stat
      mem: More descriptive DRAM config names
      stats: Update the stats to reflect bus and memory changes
      stats: Bump x86 stats
      mem: Remove CoherentBus snoop port unused private member
      mem: Remove a redundant heap allocation for a snoop packet
      base: Fix address range granularity calculation
      scons: Identify runs that fail and runs with stats differences
      mem: Cycles converted to Ticks in atomic cache accesses
      cpu: Consider instructions waiting for FU completion in draining
      mem: Align cache timing to clock edges
      mem: Fix CommMonitor style and response check
      mem: Tidy up the bridge with const and additional checks
      tests: Prune 00.gzip from the regressions
      config: Add a BaseSESystem builder for re-use in regressions
      config: Remove Clock parameter multiplication
      mem: Remove the cache builder
      stats: Update stats for monitor, cache and bus changes
      sim: Make MaxTick in Python match the one in C++
      scons: Use python-config instead of distutils
      mem: Set the cache line size on a system level
      config: Update script to set cache line size on system
      cpu: Fix a bug in the O3 CPU introduced by the cache line patch
      mem: Add an internal packet queue in SimpleMemory
      mem: Allow disabling of tXAW through a 0 activation limit
      mem: Warn instead of panic for tXAW violation
      config: Move the memory instantiation outside FSConfig
      alpha: Check interrupts before quiesce
      cpu: Fix timing CPU drain check
      mem: Perform write merging in the DRAM write queue
      mem: Use STL deque in favour of list for DRAM queues
      mem: Change AbstractMemory defaults to match the common case
      config: Command line support for multi-channel memory
      stats: Cumulative stats update
      base: Fix VectorPrint initialisation
      cpu: Fix timing CPU isDrained comment formatting
      scons: Enable build on OSX
      alpha: Move system virtProxy to Alpha only
      arch: Header clean up for NOISA resurrection
      cpu: Move the branch predictor out of the BaseCPU
      arch: Resurrect the NOISA build target and rename it NULL
      tests: Move ISA-independent tests to the NULL ISA
      util: Add class name to dot graph and output to svg
      util: Add colours to the dot output
      util: Add ini string as tooltip info in dot output
      sim: Fix clang warning for unused variable
      config: Add voltage domain to Ruby example scripts
      swig: Fix issue with circular import in 2.0.9/2.0.10
      swig: Warn on use of incompatible swig/gcc combinations
      mem: Fix scheduling bug in SimpleMemory
      ext: Fix fputils compiler flags to ensure ISO C99
      kvm: Only include KVM support for supported kernels
      stats: Bump pc-simple-timing-ruby stats
      build: Place proto output in the same directory, also for EXTRAS
      sim: Clarify the difference between tracing and debugging
      test: Use SimpleMemory for atomic full-system tests
      stats: Bump stats after shifting to SimpleMemory
      mem: Pick the next DRAM request based on bank availability
      mem: Less conservative tRAS in DRAM configurations
      mem: Add tRRD as a timing parameter for the DRAM controller
      mem: Add a simple adaptive version of the open-page policy
      mem: Fix the LPDDR3 page size
      mem: Fixes for DRAM stats accounting
      stats: Bump stats to match DRAM controller changes
      cpu: Fix Checker register index use
      cpu: Relax check on squashed non-speculative instructions
      x86: Fix memory leak in table walker
      config: Make the Clock a Tick parameter like Latency/Frequency
      sim: Expose the current clock period as a stat
      sim: Expose the current voltage for each object as a stat
      arch: Make all register index flattening const
      mem: Fix input to DPRINTF in CommMonitor
      util: Enhance the error messages for packet encode/decode
      mem: Add a wrapped DRAMSim2 memory controller
      mem: Filter cache snoops based on address ranges
      scons: Add PROTOC from the environment
      dev: Include basic devices in NULL ISA build
      mem: Fix bug in PhysicalMemory use of mmap and munmap
      arm: Bump stats after FS config script update
      ruby: Simplify RubyPort flow control and routing
      cpu: Make CPU and ThreadContext getters const
      base: Fix error message time unit (cycle -> tick)
      ext: Fix typo in DRAMSim2 SConscript
      mem: Include the DRAMSim2 wrapper in NULL build
      util: Add support for detection of gzipped packet traces
      ruby: Move Ruby debug flags to ruby dir and remove stale options
      mem: More descriptive address-mapping scheme names
      config: Add a DRAM efficiency-sweep script
      mem: Make DRAM write queue draining more aggressive
      mem: Limit the accesses to a page before forcing a precharge
      mem: Fix bug in DRAM bytes per activate
      mem: DRAM controller tidying up
      mem: Change memory defaults to be more representative
      mem: Rename SimpleDRAM to a more suitable DRAMCtrl
      mem: Track DRAM read/write switching and add hysteresis
      stats: Update stats for DRAM changes
      scons: Fix python-config parsing by adding strip()
      stats: updates for pc-switcheroo-full due to o3 smt fix
      sim: Use correct unit for abort message
      mem: Make DRAM read/write switching less conservative
      mem: Ensure DRAM refresh respects timings
      mem: Add DRAM power states to the controller
      mem: Merge DRAM page-management calculations
      mem: Add tWR to DRAM activate and precharge constraints
      mem: Merge DRAM latency calculation and bank state update
      mem: Add tRTP to the DRAM controller
      mem: Remove printing of DRAM params
      mem: Add precharge all (PREA) to the DRAM controller
      mem: Simplify DRAM response scheduling
      mem: Add DRAM cycle time
      mem: Update DDR3 and DDR4 based on datasheets
      tests: Reflect name change in DRAM tests
      config: Bump DRAM sweep bus speed to match DDR4 config
      stats: Bump stats for the fixes, and mostly DRAM controller changes
      scons: Bump the compiler version to gcc 4.6 and clang 3.0
      mem: Extend DRAM row bits from 16 to 32 for larger densities
      mem: Add bank and rank indices as fields to the DRAM bank
      mem: DRAMPower trace output
      mem: DRAMPower trace formatting script
      stats: Bump stats for the regressions using the minor CPU
      scons: Warn for incompatible gcc and binutils
      base: Remove unused files
      cpu: Ensure the traffic generator suppresses non-memory packets
      cpu: Modernise the branch predictor (STL and C++11)
      misc: README direct to website for dependencies
      mem: Fix address interleaving bug in DRAM controller
      mem: Update DRAM controller comments
      base: Add const to intmath and be more flexible with typing
      mem: Fix DRAMSim2 cycle check when restoring from checkpoint
      arm: Fix ExtMachInst hash operator underlying type
      arch: Cleanup unused ISA traits constants
      mem: Packet queue clean up
      mem: Add utility script to plot DRAM efficiency sweep
      tests: Use O3_ARM_v7a config for full-system ARM regressions
      mem: Fix a bug in the cache port flow control
      mem: Avoid unecessary retries when bus peer is not ready
      base: Use the global Mersenne twister throughout
      base: Use STL C++11 random number generation
      alpha: Stop using 'inorder' and rely entirely on 'minor'
      tests: Use medium dataset for perlbmk regressions
      stats: Update stats for CPU and cache changes
      misc: Fix a number of unitialised variables and members
      minor: Fix typo in DPRINTF for Minor branch prediction
      stats: Minor update of Minor stats after uncacheable fix
      mem: Add checks to sendTimingReq in cache
      mem: Check return value of checkFunctional in SimpleMemory
      misc: Remove assertions ensuring unsigned values >= 0
      stats: Fix flow-control bug in Vector2D printing
      misc: Restore ostream flags where needed
      misc: Use safe_cast when assumptions are made about return value
      base: Ensure the CP annotation compiles again
      cpu: Use a deque in o3 rename instruction queue
      arch: Pass faults by const reference where possible
      base: Clean up redundant string functions and use C++11
      tests: Add a memtest version using the ideal SnoopFilter
      mem: Rename Bus to XBar to better reflect its behaviour
      tests: Use more representative configs for ARM tests
      stats: Bump stats for filter, crossbar and config changes
      misc: Fix a bunch of minor issues identified by static analysis
      scons: Address issues related to gcc 4.9.1
      arch: Use const StaticInstPtr references where possible
      arm: Fixed undefined behaviours identified by gcc
      stats: Update stats to reflect ARM fixes
      arm: More UBSan cleanups after additional full-system runs
      arm: Use MiscRegIndex rather than int when flattening
      misc: Fix issues identified by static analysis
      mem: Allow packet queue to move next send event forward
      mem: Add packet sanity checks to cache and MSHRs
      scons: Warn for known gcc and swig incompatibilities
      config: Add Current as a parameter type
      ext: Add DRAMPower to enable on-line DRAM power modelling
      stats: Add DRAM power statistics to reference output
      stats: Small bump of trailing stats
      scons: Add Undefined Behavior Sanitizer (UBSan) option
      config: Add the ability to read a config file using C++ and Python
      mem: Dynamically determine page bytes in memory components
      arch,x86,mem: Dynamically determine the ISA for Ruby store check
      dev: Use shared_ptr for Arguments::Data
      dev: Use shared_ptr for EthPacketData
      base: Transition CP annotate to use shared_ptr
      base: Use shared_ptr for stat Node
      mem: Use shared_ptr for Ruby Message classes
      o3: Use shared_ptr for MemDepEntry
      arch: Use shared_ptr for all Faults
      sim: EventQueue wakeup on events scheduled outside the event loop
      misc: Move AddrRangeList from port.hh to addr_range.hh
      mem: Modernise PhysicalMemory with C++11 features
      ext: Bump DRAMPower to avoid compilation issues
      base: Fix for stats node on gcc < 4.6.3
      misc: Use gmtime for conversion to UTC to avoid getenv/setenv
      x86: Fixes to avoid LTO warnings
      base: Revert 9277177eccff and use getenv/setenv for UTC time
      sim: Sort SimObject descendants and ports
      stats: Bump regressions to match latest changes
      mem: Clarify unit of DRAM controller buffer size
      arm: Fixes based on UBSan and static analysis
      misc: Another round of static analysis fixups
      stats: Bump stats after static analysis fixes
      mem: Remove null-check bypassing in Packet::getPtr
      mem: Add const getters for write packet data
      mem: Use const pointers for port proxy write functions
      mem: Remove redundant Packet::allocate calls
      mem: Assume all dynamic packet data is array allocated
      mem: Add checks and explanation for assertMemInhibit usage
      mem: Make Request getters const
      mem: Make the requests carried by packets const
      mem: Cleanup Packet::checkFunctional and hasData usage
      mem: Clean up packet data allocation
      mem: Relax packet src/dest check and shift onus to crossbar
      cpu: Always mask the snoop address when performing lock check
      stats: Bump stats for o3 LSQ changes
      scons: Ensure dictionary iteration is sorted by key
      stats: Bump stats for fixes, mostly TLB and WriteInvalidate
      tests: Add a regression for the stack distance calculator
      mem: Ensure DRAM controller is idle when in atomic mode
      config: Expose the DRAM ranks as a command-line option
      stats: Bump stats for decoder, TLB, prefetcher and DRAM changes
      mem: Move DRAM interleaving check to init
      cpu: Fix retry bug in MinorCPU LSQ
      mem: Fix bug in cache request retry mechanism
      tests: Remove deprecated InOrderCPU tests
      scons: Do not build the InOrderCPU
      mem: Clean up Request initialisation
      x86: Delay X86 table walk on receiving walker response
      stats: Update stats to reflect x86 table walker changes
      mem: Make the XBar responsible for tracking response routing
      mem: Always use SenderState for response routing in RubyPort
      mem: Remove unused RequestState in the bridge
      mem: Remove Packet source from ForwardResponseRecord
      mem: Remove unused Packet src and dest fields
      cpu: Ensure timing CPU sinks response before sending new request
      scons: Avoid implicit command dependencies
      config: Adjust DRAM channel interleaving defaults
      base: Add XOR-based hashed address interleaving
      config: Add XOR hashing to the DRAM channel interleaving
      mem: Clarify cache behaviour for pending dirty responses
      mem: Clarify express snoop behaviour
      base: Do not dereference NULL in CompoundFlag creation
      cpu: Tidy up the MemTest and make false sharing more obvious
      stats: Bump the MemTest regression stats
      config: Revamp memtest to allow testers on any level
      arch: Make readMiscRegNoEffect const throughout
      mem: Use the range cache for lookup as well as access
      mem: mmap the backing store with MAP_NORESERVE
      dev: Fix undefined behaviuor in i8254xGBe
      cpu: TrafficGen sinks snoops without complaining
      config: Add memcheck stress test
      tests: Run regression timeout as foreground
      mem: Split port retry for all different packet classes
      mem: Tidy up the cache debug messages
      arm: Share a port for the two table walker objects
      mem: Move crossbar default latencies to subclasses
      mem: Add byte mask to Packet::checkFunctional
      mem: Fix cache MSHR conflict determination
      mem: Unify all cache DPRINTF address formatting
      stats: Update stats to reflect cache and interconnect changes
      tests: Bump timeout to 5 hours
      config: Fix DRAM rank option in sweep script
      mem: Use emplace front/back for deferred packets
      config: Add soak test for memtest.py
      tests: Recategorise regressions based on run time
      tests: Final reclassification of quick regressions
      mem: Tidy up Request
      cpu: Fix InstPBTrace inheritance
      mem: Align all MSHR entries to block boundaries
      tests: Update stats for cache block alignment
      mem: Modernise MSHR iterators to C++11
      mem: Remove redundant allocateUncachedReadBuffer in cache
      mem: Ignore uncacheable MSHRs when finding matches
      mem: Cleanup flow for uncacheable accesses
      mem: Allocate cache writebacks before new MSHRs
      arm, configs: Do not forward snoops from I cache
      config: Remove memory aliases and rely on class name
      cpu: Remove the InOrderCPU from the tree
      misc: Appease gcc 5.1
      misc: Appease gcc 5.1 without moving GDB_REG_BYTES
      stats: Bring regression stats in line with actual behaviour
      cpu: Work around gcc 4.9 issues with Num_OpClasses
      mem: Tidy up BaseCache parameters
      mem: Add missing stats update for uncacheable MSHRs
      mem: Pass shared downstream through caches
      arch, cpu: Do not forward snoops to table walker
      mem: Snoop into caches on uncacheable accesses
      arm: Remove unnecessary boot uncachability
      stats: Update stats to reflect cache changes
      arm: Add missing FPEXC.EN check
      stats, arm: Update stats for missing FPEXC.EN check
      config: Use null memory for DRAM sweep script
      misc: Appease gcc 5.1
      arm: Identify table-walker requests
      ruby: Deprecation warning for RubyMemoryControl
      stats: Update MinorCPU regressions after accounting fix
      base: Allow multiple interleaved ranges
      arm, stats: Update stats to reflect reduction in misc reg reads
      scons: Allow GNU assembler version strings with hyphen
      mem: Fix snoop packet data allocation bug
      scons: Bump compiler requirement to gcc >= 4.7 and clang >= 3.1
      util: Remove DRAMPower trace script
      mem: Convert Request static const flags to enums
      mem: Allow read-only caches and check compliance
      mem: Add ReadCleanReq and ReadSharedReq packets
      mem: Split WriteInvalidateReq into write and invalidate
      mem: Remove redundant is_top_level cache parameter
      mem: Delay responses in the crossbar before forwarding
      mem: Avoid DRAM write queue iteration for merging and read lookup
      mem: Increase the default buffer sizes for the DDR4 controller
      stats: Update stats for cache, crossbar and DRAM changes
      mem: Updated DRAMSim2 wrapper to new drain API
      mem: Fix (ab)use of emplace to avoid temporary object creation
      cpu: Fix issue identified by UBSan
      stats: Bump stats to match current behaviour
      mem: Tidy up packet
      mem: Tidy up CacheBlk class
      mem: Transition away from isSupplyExclusive for writebacks
      mem: Remove unused RequestCause in cache
      mem: Add missing clean eviction on uncacheable access
      stats: Update stats for clean eviction addition
      stats: Reflect current behaviour
      util: Enable DRAM sweep to print power and efficiency
      mem: Remove extraneous acquire/release flags and attributes
      cpu: Move invldPid constant from Request to BaseCPU
      mem: Move cache_impl.hh to cache.cc
      ruby: Move Rubys cache class from Cache.py to RubyCache.py
      mem: Add explicit Cache subclass and make BaseCache abstract
      mem: Remove unused cache squash functionality
      arm, mem: Remove unused CLEAR_LL request flag
      mem: Reflect that packet address and size are always valid
      mem: Revert requirement on packet addr/size always valid
      sim: Fix time unit in abort message
      mem: Tidy up the snoop state-transition logic
      mem: Tidy up CacheSet
      mem: Avoid setting markPending if not needed
      util: Fix minor issues in DRAM sweep scripts
      mem: Do not include snoop-filter latency in crossbar occupancy
      mem: Make the coherent crossbar account for timing snoops
      mem: Store snoop filter lookup result to avoid second lookup
      mem: Only track snooping ports in the snoop filter
      mem: Avoid adding and then removing empty snoop-filter items
      mem: Comment clean-up for the snoop filter
      mem: Fix WriteLineReq fill behaviour
      mem: Add check for block status on WriteLineReq fill
      stats: Update stats to reflect snoop-filter changes
      mem: Add PacketInfo to be used for packet probe points
      config: Fix 'learning gem5' configs after SMT push
      misc: Remove redundant compiler-specific defines
      misc: Add explicit overrides and fix other clang >= 3.5 issues
      mem: Pass snoop retries through the CommMonitor
      arm: Add missing explicit overrides for ARM devices
      x86: Add missing explicit overrides for X86 devices
      mem: Clarify cache MSHR handling on fill
      misc: Appease clang static analyzer
      mem: Unify delayed packet deletion
      mem: Do not treat CleanEvict as a write operation
      mem: Align rules for sinking inhibited packets at the slave
      mem: Use the packet delays and do not just zero them out
      mem: Order packet queue only on matching addresses
      mem: Add cache clusivity
      config: Update memtest to stress test cache clusivity
      mem: Add an option to perform clean writebacks from caches
      config: Update memtest to stress test clean writebacks
      stats: Update stats to match cache changes
      cpu: Fix memory leak in traffic generator
      config: Minor fixes to the DRAM utilisation sweep
      mem: Fix search-replace issues in DRAMPower wrapper license
      stats: Bump stats to match current behaviour
      mem: Fix memory allocation bug in deferred snoop handling
      configs: Make the default memtest behaviour more complex
      mem: Fix cache sender state handling and add clarification
      mem: Do not use sender state to track forwarded snoops in cache
      mem: Avoid unecessary checks when creating HardPFReq in cache
      mem: Remove unused cache squash functionality
      mem: Explicitly check MSHR snoops for cases not dealt with
      mem: Make cache terminology easier to understand
      mem: Do not alter cache block state on uncacheable snoops
      mem: Do not allocate space for packet data if not needed
      mem: Do not rely on the NeedsWritable flag for responses
      configs: Fix inheritance of HMCSystem and cleanup spacing
      ext: Replace gzstream with iostream3 from zlib to avoid LGPL
      scons: Enable -Wextra by default
      mem: Deduce if cache should forward snoops
      mem: Align how snoops are handled when hitting writebacks
      mem: Align cache behaviour in atomic when upstream is responding
      mem: Move the point of coherency to the coherent crossbar
      mem: Be less conservative in clearing load locks in the cache
      stats: Update stats to reflect changes to cache and crossbar
      mem: Avoid using invalid iterator in cache lock list traversal
      misc: Add missing overrides to appease clang
      scons: Enable building with the gcc/clang Address Sanitizer
      scons: Add missing override to appease clang
      mem: Ensure that InvalidateReq is not forwarded as ReadExReq
      stats: Update stats to reflect forwarding of InvalidateReq
      base: Fix gpu-compute output stream creation
      syscall_emul: Fix erroneous use of delete
      configs: Add a lat_mem_rd style test script
      mem: Create a separate class for the cache write buffer
      stats: Bump stats to match cache changes
      mem: Adjust cache queue reserve to more conservative values
      cpu: warn if TrafficGen is suppressing a large numer of packets
      stats: Match current behaviour
      misc: Appease clang...again
      misc: Fix issues flagged by gcc 6
      config: Add missing point of coherency to memcheck script
      mem: Align downstream cache packet creation in atomic and timing
      mem: Deallocate all write-queue entries when sent
      mem: Remove unused cache stats
      mem: Include WriteLineReq in cache demand stats
      stats: Update stats to reflect cache changes
      tests: Add a basic memcheck regression
      arm, dev: Remove superfluous loop increment in flash device
      arm: Fix heap overflow issue in Neon64Load operation
      mem: Fix MemChecker unique_ptr type mismatch
      mem: Do not set cacheResponding on MSHR snoop if not responding
      cpu: Add a basic progress check to the TrafficGen
      mem: Fix memory leak in handling of deferred snoops
      scons: Bump minimum gcc version to 4.8
      sim: Make clang happy
      config: Fix omission of walker cache in config scripts
      scons: Track swig packages when loading embedded swig code
      mem: Add a FromCache packet attribute
      mem: Update mostly exclusive cache policy to cover more cases
      mem: Update mostly exclusive policy even further
      mem: Use FromCache attribute in snoop filter allocation
      mem: Add snoop filter to SystemXBar by default
      config: Fix lat_mem_rd example script
      ruby: Fix regressions and make Ruby configs Python packages
      config: Make configs/common a Python package
      stats: Update stats to reflect recent changes to floats
      config: Break out base options for usage with NULL ISA
      alpha: Remove ALPHA tru64 support and associated tests
      tests, ruby: Move rubytests from ALPHA (linux) to NULL (none)
      stats, alpha: Update ALPHA stats
      tests: Check for TrafficGen as part of memcheck regression
      mem: Ensure InvalidateReq is considered isForward by MSHRs
      stats: Update stats to reflect cache changes
      ruby: Remove RubyMemoryControl and associated files
      mem: Fix memory footprint includes
      mem: Ensure deferred snoops are cache-line aligned
      sim: Ensure draining is deterministic
      stats: Get all stats updated to reflect current behaviour

Andreas Sandberg <Andreas.Sandberg@arm.com> (639):
      sim: Remove the unused SimObject::regFormulas method
      sim: Update the SimObject documentation
      build: Add missing dependencies when building param SWIG interfaces
      sim: Remove SimObject::setMemoryMode
      sim: Move CPU-specific methods from SimObject to the BaseCPU class
      base: Check for static_assert support and provide fallback
      arm: Use a static_assert to test that miscRegName[] is complete
      Partly revert [4f54b0f229b5] and move draining to m5.changeToTiming
      base: Add missing header file to addr_range.hh.
      dev: Add missing inline declarations
      mips: Remove unused Python file
      pci: Make Python wrapper cast to the right type
      sim: Include object header files in SWIG interfaces
      dev: Fix ethernet device inheritance structure
      cpu: Add header files for checker CPUs
      cpu: O3 add a header declaring the DerivO3CPU
      sim: Move the draining interface into a separate base class
      sim: Reuse the code to change memory mode.
      python: Rename doDrain()->drain() and make it do the right thing
      sim: Add SWIG interface for Serializable
      sim: Add drain methods to request additional cleanup operations
      mem: Add support for writing back and flushing caches
      tests: Create base classes to encapsulate common test configurations
      arch: Make the ISA class inherit from SimObject
      arm: Make ID registers ISA parameters
      arm: Fix DMA event handling bug in the PL111 model
      tests: Add support for skipping tests, skip EIO tests if not enabled
      arch: Fix broken M5VarArgsFault initialization
      scons: Whitelist useful environment variables
      mem: Remove the IIC replacement policy
      arch: Add support for invalidating TLBs when draining
      cpu: Check that the memory system is in the correct mode
      arch: Move the ISA object to a separate section
      cpu: Implement a flat register interface in thread contexts
      cpu: Initialize the O3 pipeline from startup()
      cpu: Unify SimpleCPU and O3 CPU serialization code
      cpu: Correctly call parent on switchOut() and takeOverFrom()
      cpu: Introduce sanity checks when switching between CPUs
      arm: Remove the register mapping hack used when copying TCs
      cpu: Remove unused params.hh header file in inorder CPU
      cpu: Rename defer_registration->switched_out
      sim: Remove unused variables
      tests: Update the ignore regexps to reflect the M5->gem5 name change
      o3 cpu: Remove unused variables
      cpu: Fix broken squashAfter implementation in O3 CPU
      arm: Fix draining of the pagetable walker when squashing
      arm: Invalidate cached TLB configuration in drainResume
      cpu: Fix O3 LSQ debug dumping constness and formatting
      cpu: Fix broken thread context handover
      cpu: Make sure that a drained timing CPU isn't executing ucode
      cpu: Make sure that a drained atomic CPU isn't executing ucode
      cpu: Rewrite O3 draining to avoid stopping in microcode
      mem: Fix guest corruption when caches handle uncacheable accesses
      cpu: Flush TLBs on switchOut()
      tests: Add CPU switching tests
      cpu: Unify the serialization code for all of the CPU models
      util: Fix stack corruption in the m5 util
      dev: Fix infinite recursion in DMA devices
      config: Don't call sys.exit in interactive mode in run()
      base: Fix broken IPython argument handling
      base: Add support for newer versions of IPython
      cpu: Add CPU metadata om the Python classes
      cpu: Make checker CPUs inherit from CheckerCPU in the Python hierarchy
      config: Cleanup CPU configuration
      config: Move CPU handover logic to m5.switchCpus()
      config: Remove O3 dependencies
      cpu: Refactor memory system checks
      sim: Add a system-global option to bypass caches
      arm: Create a GIC base class and make the PL390 derive from it
      arm: Don't export private GIC methods
      dev: Use the correct return type for disk offsets
      cpu: Document exec trace flags
      cpu: Fix state transition bug in the traffic generator
      scons: Check for known buggy version of SWIG (2.0.9)
      scons: Include flags required to link statically with Python
      scons: Don't explicitly add tcmalloc_minimal to LIBS
      scons: Avoid malloc/free compiler optimization when using tcmalloc
      scons: Try to use 'tcmalloc' before 'tcmalloc_minimal'
      x86: Revert [02321b16685f] which breaks m5ops on x86
      sim: Add helper functions that add PCEvents with custom arguments
      arm: Enable support for triggering a sim panic on kernel panics
      kvm: Basic support for hardware virtualized CPUs
      kvm: Avoid synchronizing the TC on every KVM exit
      config: Add a KVM VM to systems with KVM CPUs
      tests: Add support for testing KVM-based CPUs
      kvm: Add experimental support for a perf-based execution timer
      arm: Add a method to query interrupt state ignoring CPSR masks
      kvm: Add basic support for ARM
      kvm: Add support for state dumping on ARM
      sim: Add a helper function to execute pseudo instructions
      kvm: Add support for pseudo-ops on ARM
      sim: Add support for m5fail in pseudoInst()
      kvm: Make MMIO requests uncacheable
      kvm: Add checkpoint debug print
      kvm: Add a stat counting number of instructions executed
      arm: Make libm5 a dependency of the m5 utility
      arm: Fix compilation error in m5 utility
      arm: Add support for the m5fail pseudo-op
      kvm: Fix the memory interface used by KVM
      kvm: Dump state before panic in KVM exit handlers
      kvm: Add support for disabling coalesced MMIO
      dev: Clean up MC146818 register (A & B) handling
      dev: Add support for disabling ticking and the divider in MC146818
      kvm: Add a call to thread->startup() in startup()
      sim: Add debug output when executing pseudo-instructions
      kvm: Add handling of EAGAIN when creating timers
      kvm: Allow architectures to override the cycle accounting mechanism
      config: Add missing CPUs to --restore-with-cpu
      base: Make the Python module loader PEP302 compliant
      arch: Create a method to finalize physical addresses  in the TLB
      dev: Clarify why updates are delayed when the MC14818 is activated
      cpu: Add support for scheduling multiple inst/load stop events
      sim: Revert [34e3295b0e39] (sim: Fix early termination in mult...)
      x86: Fix bug when copying TSC on CPU handover
      kvm: Maintain a local instruction counter and update totalNumInsts
      kvm: Don't handle IO and execute in the same tick
      kvm: Separate host frequency from simulated CPU frequency
      kvm: Add more VM stats
      x86: Fix the flag handling code in FABS and FCHS
      x86: Add helper functions to access rflags
      kvm: Use the address finalization code in the TLB
      x86: Make fprem like the fprem on a real x87
      x86: Make the boot state VMX compliant
      x86: Initialize the MXCSR register
      x86: Fix loading of floating point constants
      x86: Add support for maintaining the x87 tag word
      cpu: Remove unused getBranchPred() method from BaseCPU
      x86: Expose the interrupt vector in faults
      x86: Add support for checking the raw state of an interrupt
      x86: Expose the raw hash map of MSRs
      sim: Fix undefined behavior in the pseudo-inst interface
      x86: Add support routines to convert between x87 tag formats
      kvm: Fix a case where the run timers weren't armed properly
      kvm: Correctly handle the return value from handleIpr(Read|Write)
      kvm: Initial x86 support
      kvm: Add x86 segment register verification to help debugging
      kvm: x86: Fix segment registers to make them VMX compatible
      x86: Add limited support for extracting function call arguments
      ext: Include libfputils
      x86: Add support routines to load and store 80-bit floats
      kvm: FPU synchronization support on x86
      config: Add a 'kvm' CPU alias
      kvm: Add support for thread-specific instruction events
      x86: Fix re-entrancy problems in x87 store instructions
      x86: Add support for loading 32-bit and 80-bit floats in the x87
      x86: Add support for FLDENV & FNSTENV
      x86: Add support for FXSAVE, FXSAVE64, FXRSTOR, and FXRSTOR64
      arch: Add support for m5ops using mmapped IPRs
      x86: Add support for m5ops through a memory mapped interface
      ext: Update fputils to rev 52b6190b4e
      scons, kvm: Check for the presence of POSIX timers
      stats: Update x86 stats after x87 fixes
      kvm: Service events in the instruction event queues
      base: Fix a potential race in PollQueue::setupAsyncIO
      mem: Use a flag instead of address bit 63 for generic IPRs
      mem: Rename the ASI_BITS flag field in Request
      kvm: Fix latency calculation of IPR accesses
      kvm: Remove the unused hostFreq member from BaseKvmCPU
      kvm: Set the perf exclude_host attribute if available
      base: Clean up signal handling
      base: Fix race in PollQueue and remove SIGALRM workaround
      x86: Fix x87 state transfer bug
      cpu: simple: Add support for using branch predictors
      kvm: Add support for multi-system simulation
      kvm: Initialize signal handlers from startupThread()
      kvm: x86: Always assume segments to be usable
      x86: Setup correct TSL/TR segment attributes on INIT
      sim: Schedule the global sync event at curTick() + simQuantum
      kvm: x86: Add support for x86 INIT and STARTUP handling
      kvm: x86: Adjust PC to remove the CS segment base address
      kvm: Clean up signal handling
      sim: Add the ability to lock and migrate between event queues
      dev: Protect PollEvent processing when running in parallel mode
      kvm, x86: Add initial support for multicore simulation
      util: Fix state leakage in the SortIncludes style verifier
      cpu: Don't forward declare RefCountingPtr
      base: Remove unused M5_PRAGMA_NORETURN
      scons: Silence clang 3.4 warnings on Ubuntu 12.04
      power: Remove unused private members to fix compile-time warning
      mips: Remove unused private members to fix compile-time warning
      scons: Build the branch predictor for all CPUs
      sparc: Fixup bit ordering in the PSTATE bit union
      base: Add a static assert to check bit union ranges
      base: Add compiler macros for C++11 final/override
      base: Replace the internal varargs stuff with C++11 constructs
      style: Fixup strange semantics in hg m5style
      style: Add support for a style ignore list and ignore ext/
      arch, cpu: Factor out the ExecContext into a proper base class
      sim: Fix resource leak in BaseGlobalEvent
      sim: Automatically unregister probe listeners
      dev: Refactor terminal<->UART interface to make it more generic
      dev, pci: Implement basic VirtIO support
      dev: Add a VirtIO console device model
      dev: Add a VirtIO block device model
      dev: Add support for 9p proxying over VirtIO
      sim: Add support for serializing BitUnionXX
      sim: Add typedefs for PMU probe points
      arm: Add a model of an ARM PMUv3
      cpu: Add branch predictor PMU probe points
      arm: Add TLB PMU probes
      cpu: Probe points for basic PMU stats
      arm: Add helper methods to setup architected PMU events
      ext: Update fputils to rev 6a47fd8358
      dev: Correctly transform packets into responses
      dev: Add response sanity checks in PioPort
      arm: Fix decoding of PMXEVTYPER_EL0 and PMCCFILTR_EL0
      arm: Add support for filtering in the PMU
      arm: Clean up and document decoder API
      arm: Raise an alignment fault if a PC has illegal alignment
      dev: Correctly clear interrupts in VirtIO PCI
      sim: Remove test for non-NULL this in Event
      style: Update the style checker to handle new include order
      dev: Remove unused system pointer in the Platform base class
      base: Add compiler macros to add deprecation warnings
      sim: Move the BaseTLB to src/arch/generic/
      style: Fix incorrect style checker option name
      style: Fix broken m5format command
      arm: Merge ISA files with pseudo instructions
      arm: Wire up the GIC with the platform in the base class
      arm: Fix broken page table permissions checks in remote GDB
      arm: Correctly access the stack pointer in GDB
      arm: Don't truncate 16-bit ASIDs to 8 bits
      dev, arm: Clean up PL011 and rewrite interrupt handling
      test, arm: Add scripts to test checkpoints
      mem, alpha: Move Alpha-specific request flags
      mem, cpu: Add a separate flag for strictly ordered memory
      arm: Relax ordering for some uncacheable accesses
      sim: Don't clear the active CPU vector in System::initState
      base: Clean up bitmap generation code
      base: Redesign internal frame buffer handling
      arm: Workaround incorrect HDLCD register order in kernel
      build: Don't test for KVM xsave support on ARM
      kvm, x86: Guard x86-specific APIs in KvmVM
      kvm: Fix dumping code for large registers
      dev, arm: Refactor and clean up the generic timer model
      dev, arm: Add virtual timers to the generic timer model
      arm: Get rid of pointless have_generic_timer param
      arm, dev: Add support for a memory mapped generic timer
      arm, stats: Update stats to reflect changes to generic timer
      kvm, arm: Move ARM-specific files to arch/arm/kvm/
      kvm: Handle inst events at the current instruction count
      kvm, arm, dev: Add an in-kernel GIC implementation
      kvm, arm: Add support for aarch64
      dev, arm: Include PIO size in AmbaDmaDevice constructor
      base: Reset CircleBuf size on flush()
      arm: Cleanup arch headers to remove dma_device.hh dependency
      base: Add a warn_if macro
      mem: Cleanup CommMonitor in preparation for probe support
      sim: Add serialization macros for std containers
      tests: Skip SPARC tests if the required binaries are missing
      sim: Refactor the serialization base class
      sim: Fix broken event unserialization
      base: Add serialization support to Pixels and FrameBuffer
      sim: Add macros to serialize objects into a section
      python: Remove redundant drain when changing memory modes
      sim: Make the drain state a global typed enum
      sim: Move mem(Writeback|Invalidate) to SimObject
      sim: Decouple draining from the SimObject hierarchy
      sim: Refactor and simplify the drain API
      stats: Update pc-switcheroo stats
      ext: Add the NoMali GPU no-simulation library
      dev, arm: Add a device model that uses the NoMali model
      cpu: Fix drain issues in the Minor CPU
      cpu: Only activate thread 0 in Minor if the CPU is active
      tests: Add Minor to the ARM full switcheroo tests
      stats: Bump stats after Minor switcheroo inclusion
      cpu: Fix Minor drain issues when switched out
      cpu: Update debug message from Fetch1 isDrained() in Minor
      stats: Update switcheroo reference stats
      mem: Add probe support to the CommMonitor
      mem: Redesign the stack distance calculator as a probe
      mem: Move trace functionality from the CommMonitor to a probe
      stats: Update stats for tgen to reflect CommMonitor changes
      sim: Initialize Drainable::_drainState to the system's state
      mem: Fixup incorrect include guards
      sim: Fixup comments and constness in draining infrastructure
      base: Use constexpr in Cycles
      base: Declare a type for context IDs
      dev: Make serialization in Sinic constant
      dev, x86: Fix serialization bug in the i8042 device
      base: Rewrite the CircleBuf to fix bugs and add serialization
      sim: Split ClockedObject to make it usable to non-SimObjects
      dev: Add a simple DMA engine that can be used by devices
      arm: Add support for programmable oscillators
      dev: Implement a simple display timing generator
      mem: Cleanup packet accessor methods
      stats: Update ARM stats to include programmable oscillators
      sim: Flag EventQueue::getCurTick() as const
      ruby: Use the const serialize interface in RubySystem
      sim: Move SimObject resolver to sim_object.hh
      sim: Replace fromInt/fromSimObject with decltype
      sim: Remove unused SerializeBuilder interface
      sim: Remove autoserialize support for exit events
      dev: Remove auto-serialization dependency in EtherLink
      sim: Remove broken AutoSerialize support from the event queue
      dev, arm: Rewrite the HDLCD controller
      dev: Add an underrun statistic to the HDLCD controller
      tests: Update SMT tests to correctly configure CPUs
      mem: Check the XBar's port queues on functional snoops
      dev: Don't access the platform directly in PCI devices
      dev: Remove unused header includes
      dev, arm: Initialized the iccrpr register in the GIC
      arm: Add missing explicit overrides for classic caches
      cpu: Enforce 1 interrupt controller per thread
      dev: Remove unnecessary header include
      config: Fix broken SimObject listing
      dev, mips: Remove the unused MaltaPChip class
      arm: Add support for automatic boot loader selection
      sim: Add support for generating back traces on errors
      dev, arm: Split MCC and DCC subsystems
      dev, arm: Disable R/B swap in HDLCD by default
      arm, config: Automatically discover available platforms
      stats: Update to reflect changes to RealView platform code
      sim: Get rid of the non-const serialize() method
      dev: Rewrite PCI host functionality
      stats: Update to reflect changes to PCI handling
      dev: Move existing PCI device functionality to src/dev/pci
      dev: Move the CopyEngine class to src/dev/pci
      dev: Move i2c functionality to src/dev/i2c/
      dev: Move network devices to src/dev/net/
      dev: Move storage devices to src/dev/storage/
      dev: Add missing SConscript in src/dev/i2c
      sim: Add an option to forward work items to Python
      sim: Use the old work item behavior by default
      dev, arm: Add support for automatic PCI interrupt routing
      dev, arm: Add a platform with support for both aarch32 and aarch64
      ext: Update NoMali to external rev f08e0a5
      arm: Ship Linux device trees with gem5
      dev, arm: Refactor the NoMali GPU
      dev, arm: Implement the NoMali reset callback
      base: Add support for changing output directories
      sim: Add support for notifying Drainable objects of a fork
      dev: Add post-fork handling for disk images
      sim: Add support for forking
      kvm: Shutdown KVM and disconnect performance counters on fork
      misc: Add a gitignore file based on the current hgignore
      arm: Refactor the TLB test interface
      style: Strip newline when checking lines
      copyright: Update copyright in sort_includes.py
      kvm: Add an option to force context sync on kvm entry/exit
      style: Remove unsupported style.py commands
      scons, style: Rename style.py to hgstyle.py
      style: Change include sorter to yield one line at a time
      style: Refactor the style checker as a Python package
      style: Add a control character checker
      style: Remove style validators
      style: Add repository helper functions
      style: Add a git pre-commit hook
      scons: Automatically install the git style hook
      style: Add a style checker that doesn't depend on Mercurial
      style: Change maximum line length to 79 characters
      arm: Clean up m5ops assembly library
      misc: Don't build region.py as a PySource
      Revert power patch sets with unexpected interactions
      Revert to 74c1e6513bd0 (sim: Thermal support for Linux)
      style: Fix Python 2.6 compatibility
      scons: Fix Python 2.6 compatibility
      dev: Fix incorrect terminal backlog handling
      kvm, arm: Refactor KVM GIC device
      kvm, arm: Make GIC interrupt lines configurable
      arm: Remove BreakPCEvent on guest kernel panic
      tests: Remove stale reference output files
      style: Don't include diff context in git style hook
      arm: Update dts to work with the new HDLCD driver
      dev, arm: Update GIC to use GICv2 register naming
      tests: Enable test running outside of gem5's source tree
      scons: Rewrite git style hook installer
      tests: Add test infrastructure as a Python module
      dev, arm: Add a flag to enable/disable gem5 GIC extensions
      arm: Make EL checks available in SE mode
      arm: Fix incorrect TLB permission check in aarch32
      arm: Use the target EL state when determining fault format
      tests: Fix incorrect stat.txt ignore when updating refs
      scons: Use the new test framework from scons
      arm: Correctly check translation mode (aarch64/aarch32)
      arm: Enable LPAE support by default
      style: Move the last bits of file_types.py to the style package
      tests: Only run Ruby tests when testing Ruby targets
      arm: Correctly check FP/SIMD access permission in aarch32
      arm: Rewrite ERET to behave according to the ARMv8 ARM
      stats: Update to match ARM ISA changes
      tests: Remove working dir assumption in tgen tests
      stats: Update ref stats to match ARM TLB changes
      stats: Silence unused power stats
      sim: Only print the power state transition warning once
      stats: Add power stats to test references
      base: Fix multiple names to one address bug in SymbolTable
      kern, arm: Dump dmesg on kernel panic/oops
      mem: Resolve TrafficGen trace relative to the config
      tests: Split test results into running and verification
      tests: Add a test command to get test status as an exit code
      stats: Update stats to reflect ARM changes
      style: Fix incorrect references style verifiers
      base: Convert ELF .text size check assertion to a warning
      arm: Don't consult the TLB test iface for functional translations
      base: Fix inverted check in ELF .text size warning
      tests: Add regex-based ignore rules for ref files
      arm: Don't report the boot ROM as a memory in config tables
      ruby: Implement support for functional accesses to PIO ranges
      arm, dev: Add support for listing DMA ports in new platforms
      arm, config: Add initial support for Ruby
      arm, config: Exit with fatal error if using Ruby
      stats: Update to match classic memory changes
      cpu: Add missing override in Minor's exec context
      dev: Revert 0a316996de76 [dev, sim: Added missing override...]
      dev, arm: Add a customizable NoMali GPU model
      tests: Add support for functional only tests
      tests, arm: Make switcheroo and checkpoint tests functional
      tests: Make remaining switcheroo tests functional only
      test: Make the memtest and memcheck tests functional only
      tests, arm: Reinstate accidentally removed switcheroo tests
      sim: Add a checkpoint function to test for entries
      dev, arm: Make GenericTimer param handling more robust
      ext: Update fputils to rev 13589cd
      style: Add options to select checkers and apply fixes
      sim: Remove redundant buildEnv import
      python: Fix incorrect header in the DmaDevice wrapper
      dev: Include DmaDevice in NULL builds
      python: Export periodicStatDump
      mem: Make the BaseXBar public to not confuse Python wrappers
      util: Add maintainer tools to create upstream patches
      sim: Remove redundant export_method_cxx_predecls
      python: Don't use Swig to cast stats
      sim: Remove declaration of unused CountedDrainEvent
      python: Move native wrappers to the _m5 namespace
      style: Force Python.h to be included before main header
      arm, kvm: Automatically use the MuxingKvmGic
      python: Add a generalized mechanism to configure stats
      tests: Disable descriptions in stat files
      base: Refactor logging to make log level selection cleaner
      arch: Include generated decoder header after normal headers
      scons: Automatically add a git commit message hook
      power: Avoid forward declarations that confuse wrappers
      gpu-compute: Fix Python/C++ object hierarchy discrepancies
      arm: Clean up the GIC implementation
      dev, arm: Add draining to the GIC model
      arm, dev: Add missing override in the Pl390 GIC model
      util: Add a tool to list outgoing/incoming changes
      python: Automatically disable listeners in batch setups
      dev: Rename VirtIO PCI debug flag
      dev: Add a dummy VirtIO device
      dev, arm: Fix multi-core KVM race in the generic timer
      arm, kvm: Override the kernel's default MPIDR value
      config, arm: Unify checkpoint path handling in bL configs
      config, arm: Add multi-core KVM support to bL config
      sim: Handle cases where Drainable::resume() creates objects
      scons: Fix hook installation error caused by stale cache
      power: Add error checking to MathExprPowerModel
      power: Add a voltage variable to power expressions
      config, arm: Add an example power model
      tests: Remove unused options from tests.py
      ext: Add pybind rev f4b81b3
      ext: Fix undefined macro in pybind
      python: Use PyBind11 instead of SWIG for Python wrappers
      scons: Remove SWIG support
      base, sim, dev: Remove SWIG
      python: Remove SWIG
      util: Fix incorrect return type in m5 writefile
      util: Fix incorrect use of m5_loadsymbol
      util: Add the m5_loadsymbol pseudo op to the m5 tool
      util: Correctly handle short writes in m5 (read|exec)file
      kvm, arm: Fix incorrect PSTATE sync
      arm: Add support for memory-mapped m5ops
      arm: Enable m5ops by default for VExpress_GEM5_V1
      util, arm: Support mmapped m5ops on aarch64
      python: Fix debug flag listing regression
      style: Treat PyBind headers as Python headers
      arm: Remove unused DumpStatsPCEventF class in FreeBSD system
      syscall_emul: Fix undefined macro behavior
      python: Add a helper function to create Python events
      base, sim, arch: Fix clang 5.0 warnings
      python: Remove unused readline import
      python: Fix weird memory issue in wrapped AddrRange vectors
      python: Prevent Python wrappers from deleting SimObjects
      ext: Upgrade PyBind11 to version 2.1.1
      sim: Add hooks to implement event reference counting
      python: Fix PyEvent reference counting bug
      arm: Fix incorrect handling of PMEVTYPERx_EL0 in PMU
      mem-cache: Add missing overrides to BaseCache
      config: Make some MemConfig options optional
      config: Add missing import of 'fatal' in CpuConfig
      config: Make ex5_*.py independent of old configs
      config: Move core timing models to config/common/cores
      config: Clean up core timing model discovery
      config, arm: Don't import timing models for missing CPUs
      kvm, arm: Don't forward IRQ/FIQ when using the kernel's GIC
      tests: Don't treat new stats as a cause for failures
      config: Discover CPU timing models based on target ISA
      arch-arm: Switch to DTOnly as the default machine type
      cpu, kvm: Fix deadlock issue when resuming a drained system
      kvm: Add a helper method to access device event queues
      kvm, arm: Switch to the device EQ when accessing ISA devices
      util: Move the m5ops.h file to a shared directory
      sim: Use named constants for pseudo ops
      arch-arm: Use named constants for m5op instructions
      util, m5: Use consistent naming for m5op C symbols
      util: Move m5op.h to the shared include directory
      style: Add shared gem5 headers to the style checker
      arm, config: Fix CPU names in ARM example configs
      configs, arm: Fix incorrect use of mem_range in bL example
      python: Make GlobalExitEvent.getCode() return an int
      arch-alpha: Add missing overrides
      arch-sparc: Add a FaultVals instantiation for VecDisabled
      arch-x86: Add missing override in the X86 TLB
      arch-arm: Add missing override keywords in fault.hh
      util: Filter out the For-Upstream commit message tag
      dev: Refactor UART->Terminal interface
      dev: Add a dummy serial device
      dev: Move generic serial devices to src/dev/serial
      util: Optionally search entire history when listing changes
      util: Remove support for hg patches in patch creation script
      sim: Add an option to load additional kernel objects
      arch-arm: Add support for the brk instruction
      cpu-o3: Add missing vector stat initializers
      cpu: Don't override ISA if provided by user
      scons: Make sure GTests have the right environment variables
      scons, tests: Add support for GTest XML generation
      scons, tests: Fix occasional linking error
      util: Add an option to specify paths in list_changes.py
      dev: Remove unused interrupt controller in Terminal
      mem: Add PortProxy read/write helper with explicit endianness
      arch-arm: Decode Brk64 instructions
      arch-arm: Add support for automatic reset addr selection
      arch-arm: Add aarch64 semihosting support
      mem: Refactor port proxies to support secure accesses
      arch-arm: Add support for secure state in semihosting
      cpu-o3: Don't add non-speculative mem barriers to the IQ twice
      mem: Add a helper function to get a word of variable length
      ps2: Factor out PS/2 devices into their own subsystem
      ps2: Add VNC support to the keyboard model
      ps2: Add a simple touchscreen model
      ps2: Unify device data buffering
      ps2: Implement the keyboard reset command
      ps2: Add proper touchscreen command handling
      dev, arm: Use the PS/2 framework in the Pl050 model
      ps2: Unify constant names
      dev, arm: Cleanup Pl050 interrupt handling
      dev: Add support for a simple debug UART
      base, dev: Fix port message for vnc and terminal
      arch-arm: Add support for semihosting STDIO redirection
      arch-arm: Fix semihosting arg count for SYS_GET_CMDLINE
      arch-arm: Adjust breakpoint EC depending on source state
      dev, arm: Add support for HYP & secure timers
      arch-arm: Fix page size handling when merging stage 1 and 2
      arch-arm: Respect EL from translation type
      arch-arm: Perform stage 2 lookups using the EL2 state
      system-arm: Update gem5 timer interrupt specification
      arch-arm: Remove dead doingStage2 variable in PT walker
      dev-arm: Add a GIC interrupt adaptor
      dev-arm: Add a MMIO transport interface for VirtIO
      dev-arm: Add a VirtIO MMIO device to VExpress_GEM5_V1
      dev-arm: Remove deprecated GIC test interfaces
      cpu-minor: Remove redundant thread startup call
      system-arm: Split the VExpress_GEM5_V1 base dts
      dev-arm: Use recurseDeviceTree instead of custom in platform
      sim: Use the canonical way of iterating over a dictionary
      arch-arm: Fix incorrect t{0,1}sz field in TTBCR
      mem: Add a memory delay simulator
      python: Fixup incorrect syntax in PyBind argument handler
      cpu: Remove reduntant protobuf includes
      python: Fix call bug in @cxxMethod when override is True
      base: Add a M5_PUBLIC and M5_LOCAL attribute macro
      cpu: Split the traffic generator into two classes
      cpu: Unify error handling for address generators
      cpu: Support trace termination in BaseTrafficGen
      cpu: Add a Python-enabled traffic generator
      configs: Update the DRAM sweep script to use PyTrafficGen
      arch-arm: Don't fail to initialise PMU if BP is missing
      dev, arm: Fix incorrect GIC address range sizes
      config: Move KVM CPU checking to CpuConfig helper module
      dev, arm: Add misc reg tracing to the generic timer
      arm: Add support for tracking TCs in ISA devices
      arm: Use the interrupt adaptor in the PMU
      cpu: Replace the fastmem with a new CPU model
      tests: Convert CircleBuf unit test to a GTest
      tests: Convert AddrRangeMap unit test to a GTest
      sim-se: Use CONFIG_CLONE_BACKWARDS for Arm
      sim-se: Correctly calculate next PC in clone
      sim-se: Refactor clone to avoid most ifdefs
      arch-arm, sim-se: Fix incorrect SP handling in clone
      arch-arm, sim-se: Add support for TLS in clone
      tests: Don't override tick rate in Ruby tests
      tests: Add a helper to run external scripts
      sim: Prepare C++ side for Python 3
      python: Remove getCode() type workaround
      python: Fix native module initialisation on Python 3
      python: Make exception handling Python 3 safe
      arch-mips: Remove unused Python file
      python: Don't assume SimObjects live in the global namespace
      tests: Rewrite Makefiles for pthreads test
      python: Switch to using open instead of file
      python: Update use of exec to work with Python 3
      python: Replace orderdict with collections.OrderedDict
      python: Replace DictMixin with Mapping / MutableMapping
      python: Add missing defines import
      python: Replace dict.has_key with 'key in dict'
      python: Switch from using compare to key in list sort
      python: Replace deprecated repr syntax
      python: Remove uses of tuple unpacking in function params
      python: Add __bool__ helpers in addition to __nonzero__
      python: Use __name__ instead of func_name for Py3 compat
      python: Fix Param initialization issue in Python 3
      python: Add missing operators to NumericParamValue
      python: Make iterator handling Python 3 compatible
      python: Fix param -> int conversion issues
      python: Add fallbacks for packages that have been renamed
      python: Enforce absolute imports for Python 3 compatibility
      scons: Add support for specifying Python version
      python: Fix params/proxy import loop
      tests: Update test scripts to work with Python 3
      python: Add Python 3 workarounds for long
      python: Stop using basestring to test for strings
      scons: Marshal Python sources using the same Python as gem5
      configs: Fix Python 3 iterator and exec compatibility issues
      python: Fix issue when Self proxy resolves to a another proxy
      configs: Use absolute import paths
      mem-cache: Add multi-prefetcher adaptor
      misc: Update MAINTAINERS with a system tag
      stats: Add support for hierarchical stats
      stats: Add support for partial stat dumps
      cpu: Convert traffic gen to use new stats
      mem: Convert CommMonitor to the new stat framework
      stats: Add beta support for HDF5 stat dumps
      stats: Add support for listing available formats
      stats: Create HDF5 stat files relative to simout
      stats: Fix incorrect name conflict panic with grouped stats
      stats: Correctly print new-style dist stat names
      stats: Don't output index in vectors of length 1
      stats: Add a preDumpStats() callback to Stats::Group
      sim: Convert power modelling framework to new-style stats
      mem: Convert DRAM controller to new-style stats
      mem-cache: Switch to new-style stats
      mem: Use new-style stats in the XBar models
      base: Add addIntlvBits to AddrRange
      base: Add classes that encapsulate a channel address
      misc: Add Giacomo Travaglini as an Arm maintainer
      ext: Update fputils to rev 0721843
      ext: Remove non-source files from fputils
      python: Make meta class declarations Python 3 safe

Nilay Vaish <nilay@cs.wisc.edu> (522):
      SLICC: Remove machine name as prefix to functions Currently, the machine name is appended before any of the functions defined with in the sm files. This is not necessary and it also means that these functions cannot be used outside the sm files. This patch does away with the prefixes. Note that the generated C++ files in which the code for these functions is present are still named such that the machine name is the prefix.
      Ruby: Correctly set access permissions for directory entries The access permissions for the directory entries are not being set correctly. This is because pointers are not used for handling directory entries. function. get and set functions for access permissions have been added to the Controller state machine. The changePermission() function provided by the AbstractEntry and AbstractCacheEntry classes has been exposed to SLICC code once again. The set_permission() functionality has been removed.
      Ruby: Correct set LONG_BITS and INDEX_SHIFT in class Set. The code for Set class was written under the assumption that std::numeric_limits<long>::digits returns the number of bits used for data type long, which was presumed to be either 32 or 64. But return value is actually one less, that is, it is either 31 or 63. The value is now being incremented by 1 so as to correctly set it.
      arch: print next upc correctly The patch corrects the print statement which prints the current and the next pc. Instead of the next upc, the next pc was being printed.
      Ruby: Commit files missing from previous commit The previous commit on functional access support in Ruby did not have some of the files required. This patch adds those files to the repository.
      Network_test: Conform it with functional access changes in Ruby Addition of functional access support to Ruby necessitated some changes to the way coherence protocols are written. I had forgotten to update the Network_test protocol. This patch makes those updates.
      Merged with Gabe's recent changes.
      X86: implements copyRegs() function This patch implements the copyRegs() function for the x86 architecture. The patch assumes that no side effects other than TLB invalidation need to be considered while copying the registers. This may not hold true in future.
      se.py: Fixes the way ruby's options are added
      Ruby: Fix dma controller configs/ruby/MI_example.py The dma controller in configs/ruby/MI_example.py was not being set correctly. This patch fixes it.
      Merged with Gabe's changeset.
      Ruby: Fix instantiations of DMA controller and sequencer The patch on Ruby functional accesses made changes to the process of instantiating controllers and sequencers. The DMA controller and sequencer was not updated, hence this patch.
      SLICC: Put functions of a controller in its .cc file Currently, functions associated with a controller go into separate files. This patch puts all the functions in the controller's .cc file. This should hopefully take away some time from compilation.
      Scons: Drop RUBY as compile time option. This patch drops RUBY as a compile time option. Instead the PROTOCOL option is used to figure out whether or not to build Ruby. If the specified protocol is 'None', then Ruby is not compiled.
      Ruby: Remove files and includes not in use
      BuildEnv: Eliminate RUBY as build environment variable This patch replaces RUBY with PROTOCOL in all the SConscript files as the environment variable that decides whether or not certain components of the simulator are compiled.
      Ruby: Initialize some variables.
      Ruby: Eliminate modulo op for computing set size.
      Ruby: Remove some unused code
      SLICC: Pass arguments by reference Arguments to functions were being passed by value. This patch changes SLICC so that arguments are passed by reference.
      LSQ: Moved a couple of lines to enable O3 + Ruby This patch makes O3 CPU work along with the Ruby memory model. Ruby overwrites the senderState pointer with another pointer. The pointer is restored only when Ruby gets done with the packet. LSQ makes use of senderState just after sendTiming() returns. But the dynamic_cast returns a NULL pointer since Ruby's senderState pointer is from a different class. Storing the senderState pointer before calling sendTiming() does away with the problem.
      mc146818: Correctly serialize tickEvent 'tickEvent' was not being serialized as in its place 'event' was being used. This patch rectifies this error.
      Ruby: Reorganize mapping of components In RubySlicc_ComponentMapping.hh, certain '#define's have been used for mapping MachineType to GenericMachineType. These '#define's are being eliminated and the code will now be generated by SLICC instead. Also are being eliminated some of the unused functions from RubySlicc_ComponentMapping.sm.
      Merged with recent changes.
      Ruby FS: Add the options for kernel and simulation script These options were missing from the script ruby_fs.py. This patch adds these options to the script.
      Python: Remove import for random
      Commit due to merge.
      Ruby: Remove some unused typedefs This patch removes some of the unused typedefs. It also moves some of the typedefs from Global.hh to TypeDefines.hh. The patch also eliminates the file NodeID.hh.
      Protocol: Remove standard one and two level files
      x86: Add microop for fence This patch adds a new microop for memory barrier. The microop itself does nothing, but since it is marked as a memory barrier, the O3 CPU should flush all the pending loads and stores before the fence to the memory system.
      MESI Protocol: Add functions for profiling misses
      Tests: Update stats due to addition of fence microop
      Ruby: Process packet instead of RubyRequest in Sequencer This patch changes the implementation of Ruby's recvTiming() function so that it pushes a packet in to the Sequencer instead of a RubyRequest. This requires changes in the Sequencer's makeRequest() and issueRequest() functions, as they also need to operate on a Packet instead of RubyRequest.
      Regression: Update statistics for x86 long regression tests This patch updates reference statistics for the regression tests. This update was necessitated by a recent change in behavior of some instructions in the x86 architecture.
      SLICC: Use pointers for directory entries SLICC uses pointers for cache and TBE entries but not for directory entries. This patch changes the protocols, SLICC and Ruby memory system so that even directory entries are referenced using pointers.
      Ruby: Shuffle some of the included files This patch adds and removes included files from some of the files so as to organize remove some false dependencies and include some files directly instead of transitively.
      X86 TLB: Move a DPRINTF to its correct place The DPRINTF for doing protection checks appears after the checks have been carried out. It is possible that the function returns while the checks are being carried, in which case the printf is missed out. This patch moves the DPRINTF before the checks.
      MESI Coherence Protocol: Fix L2 miss statistics This patch removes calls to uu_ProfileMiss from transitions where the request is satisfied by the L2 cache controller.
      eventq: add a function for replacing head of the queue This patch adds a function for replacing the event at the head of the queue with another event. This helps in running a different set of events. Events already scheduled can processed by replacing the original head event back. This function has been specifically added to support cache warmup and cooldown required for creating and restoring checkpoints.
      Config: Add an option of type 'choice' for cpu type This patch adds a new option for cpu type. This option is of type 'choice' which is similar to a C++ enum, except that it takes string values as possible choices. Following options are being removed -- detailed, timing, inorder.
      Ruby Set: Move NUMBER_WORDS_PER_SET to Set.hh This constant is currently in System.hh, but is only used in Set.hh. It is being moved to Set.hh to remove this artificial dependence of Set.hh on System.hh.
      AbstractController: Remove some of the unused functions
      Ruby Cache: Add param for marking caches as instruction only
      Merged with Nate's commit
      Config: Remove short option string for cpu type
      X86: Add memory fence to I/O instructions
      X86 Regressions: Update stats due to fence instruction
      DPRINTF: Improve some dprintf messages.
      Sparse Memory: Simplify the structure for an entry The SparseMemEntry structure includes just one void* pointer. It seems unnecessary that we have a structure for this. The patch removes the structure and makes use of a typedef on void* instead.
      MOESI Hammer: Remove a couple of bugs A couple of bugs were observed while building checkpointing support in Ruby. This patch changes transitions to remove those errors.
      MOESI Hammer: Update regression test output
      Ruby: remove the files related to the tracer The Ruby Tracer is out of date with the changes that are being carried out to support checkpointing. Hence, it needs to be removed.
      Ruby Memory Vector: Functions for collating and populating pages This patch adds functions to the memory vector class that can be used for collating memory pages to raw trace and for populating pages from a raw trace.
      Ruby: Add infrastructure for recording cache contents This patch changes CacheRecorder, CacheMemory, CacheControllers so that the contents of a cache can be recorded for checkpointing purposes.
      Ruby Sparse Memory: Add function for collating blocks This patch adds function to the Sparse Memory so that the blocks can be recorded in a cache trace. The blocks are added to the cache recorder which can later write them into a file.
      Ruby EventQueue: Remove unused functions
      Ruby Port: Add a list of cpu ports attached to this port
      Ruby Debug Flags: Remove one, add another The flag RubyStoreBuffer is being removed, instead RubySystem is being added
      Ruby: Resurrect Cache Warmup Capability This patch resurrects ruby's cache warmup capability. It essentially makes use of all the infrastructure that was added to the controllers, memories and the cache recorder.
      Config: Add support for restoring using a timing CPU Currently there is an assumption that restoration from a checkpoint will happen by first restoring to an atomic CPU and then switching to a timing CPU. This patch adds support for directly restoring to a timing CPU. It adds a new option '--restore-with-cpu' which is used to specify the type of CPU to which the checkpoint should be restored to. It defaults to 'atomic' which was the case before.
      Ruby: Use map option for selecting b/w sparse and memory vector
      PerfectCacheMemory: Remove references to CacheMsg The definition for the class CacheMsg was removed long back. Some declaration had still survived, which was recently removed. Since the PerfectCacheMemory class relied on this particular declaration, its absence let to compilation breaking down. Hence this patch.
      MemCmd: Add a command for invalidation requests to LSQ This command will be sent from the memory system (Ruby) to the LSQ of an O3 CPU so that the LSQ, if it needs to, invalidates the address in the request packet.
      O3, Ruby: Forward invalidations from Ruby to O3 CPU This patch implements the functionality for forwarding invalidations and replacements from the L1 cache of the Ruby memory system to the O3 CPU. The implementation adds a list of ports to RubyPort. Whenever a replacement or an invalidation is performed, the L1 cache forwards this to all the ports, which is the LSQ in case of the O3 CPU.
      Config: Enable using O3 CPU and Ruby in SE mode
      O3 CPU LSQ: Implement TSO This patch makes O3's LSQ maintain total order between stores. Essentially only the store at the head of the store buffer is allowed to be in flight. Only after that store completes, the next store is issued to the memory system. By default, the x86 architecture will have TSO.
      X86 Regressions: Update stats due to introduction of TSO
      Config: Enable O3 CPU and Ruby in FS mode
      O3 Fetch: Check if PC is pointing to Microcode ROM
      O3 CPU: Provide the squashing instruction This patch adds a function to the ROB that will get the squashing instruction from the ROB's list of instructions. This squashing instruction is used for figuring out the macroop from which the fetch stage should fetch the microops. Further, a check has been added that if the instructions are to be fetched from the cache maintained by the fetch stage, then the data in the cache should be valid and the PC of the thread being fetched from is same as the address of the cache block.
      O3 CPU: Strengthen condition for handling interrupts The condition for handling interrupts is to check whether or not the cpu's instruction list is empty. As observed, this can lead to cases in which even though the instruction list is empty, interrupts are handled when they should not be. The condition is being strengthened so that interrupts get handled only when the last committed microop did not had IsDelayedCommit set.
      O3 CPU: Improve handling of delayed commit flag The delayed commit flag is used in conjunction with interrupt pending flag to figure out whether or not fetch stage should get more instructions. This patch clears this flag when instructions are squashed. Also, in case an interrupt is pending, currently it is not possible to access the instruction cache. This patch allows accessing the cache in case this flag is set.
      Regressions: Update stats due to O3 CPU changes
      sim/system: initialize the pagePtr variable
      MESI: Add queues for stalled requests This patch adds support for stalling the requests queued up at different controllers for the MESI CMP directory protocol. Earlier the controllers would recycle the requests using some fixed latency. This results in younger requests getting serviced first at times, and can result in starvation. Instead all the requests that need a particular block to be in a stable state are moved to a separate queue, where they wait till that block returns to a stable state and then they are processed.
      Ruby: Remove isTagPresent() calls from Sequencer.cc This patch removes the calls to isTagPresent() from Sequencer.cc. These calls are made just for setting the cache block to have been most recently used. The calls have been folded in to the function setMRU().
      Regressions: Update stats due to change in MESI protocol
      Config: make option ruby available always
      x86: Fix switching of CPUs This patch prevents creation of interrupt controller for cpus that will be switched in later
      x86: Fix x86 TLB and Walker This patch adds a function to X86 tlb that returns the walker port. This port is required for correctly connecting the walker ports for the cpu just switched in
      se.py: Changes to ruby portion due to SE/FS merge With the SE/FS merge, interrupt controller is created irrespective of the mode. This patch creates the interrupt controller when Ruby is used and connects its ports.
      FSConfig.py: fix a typo makeLinuxAlphaRubySystem
      ruby_fs.py: Add call to createInterruptController()
      Config: Move setWorkCountOptions() to Simulation.py The function is presently defined in FSConfig.py, which does not seem to be the correct place for it.
      Config: Change the way options are added I am not too happy with the way options are added in files se.py and fs.py currently. This patch moves all the options to the file Options.py, functions from which are called when required.
      Config: corrects the way Ruby attaches to the DMA ports With recent changes to the memory system, a port cannot be assigned a peer port twice. While making use of the Ruby memory system in FS mode, DMA ports were assigned peer twice, once for the classic memory system and once for the Ruby memory system. This patch removes this double assignment of peer ports.
      Ruby: Remove extra statements from Sequencer
      Regression: Add a test for x86 timing full system ruby simulation
      util/regress: Add the missing comma in the list of builds
      Garnet: Correct computation of link utilization The computation for link utilization was incorrect for the flexible network. The utilization was being divided twice by the total time.
      Regression: Stats update for X86 Ruby FS test The kernel originally used to generate the stats is different from the one at use on zizzer. This patch updates the stats with the correct kernel in use.
      Regression: Move x86 fs ruby simulation from quick to long
      X86: Split Condition Code register This patch moves the ECF and EZF bits to individual registers (ecfBit and ezfBit) and the CF and OF bits to cfofFlag registers. This is being done so as to lower the read after write dependencies on the the condition code register. Ultimately we will have the following registers [ZAPS], [OF], [CF], [ECF], [EZF] and [DF]. Note that this is only one part of the solution for lowering the dependencies. The other part will check whether or not the condition code register needs to be actually read. This would be done through a separate patch.
      Ruby Sequencer: Schedule deadlock check event at correct time The scheduling of the deadlock check event was being done incorrectly as the clock was not being multiplied, so as to convert the time into ticks. This patch removes that bug.
      Ruby: Remove the unused src/mem/ruby/common/Driver.* files.
      X86 Regression: update stats due to cc register split
      Config: changes to a couple of error msgs
      Config: Remove setMipsOptions As status matrix, MIPS fs does not work. Hence, these options are not required. Secondly, the function is setting param values for a CPU class. This seems strange, should probably be done in a different way.
      Config: call to setWorkCountOptions() for all ISAs
      X86 TLB: Add a missing = sign
      Ruby: remove some unused stuff from SLICC files
      Ruby: remove config information from ruby.stats This patch removes printConfig() functions from all structures in Ruby. Most of the information is already part of config.ini, and where ever it is not, it would become in due course.
      Regression: update ruby.stats file
      X86 CPUID: Return false if unknown processor family
      Regression: Update stats due to changes to x86 cpuid instruction
      Config: change how cpu class is set This changes the way in which the cpu class while restoring from a checkpoint is set. Earlier it was assumed if cpu type with which to restore is not same as the cpu type with the which to run the simulation, then the checkpoint should be restored with the atomic cpu. This assumption is being dropped. The checkpoint can now be restored with any cpu type, the default being atomic cpu.
      Simulation.py: move code related to checkpointing to functions This patch moves the code related to checkpointing from the run() function to several different functions. The aim is to make the code more manageable. No functionality changes are expected, but since the code is kind of unruly, it is possible that some change might have creeped in.
      System: set kernel to null, if unspecified.
      Alpha System: override startup(), instead of loadState() Alpha System was overriding loadState() function to setup some functional event. The system tried to read/write to memory before the Ruby memory had unserialized the state. With this patch, Alpha System overrides the startup() function, and sets up functional events in this function. This works because startup() is called after Ruby memory system has unserialized the memory state.
      Ruby Banked Array: add copyrights
      MESI Coherence Protocol: Add copyright notice
      MESI Protocol: Correct the virtual network in profile functions The virtual network in a couple of places was incorrectly mentioned as 3 in place of 1. This is being corrected.
      Regression: updates ruby.stats due to change in virtual network
      Ruby Memory Vector: Allow more than 4GB of memory The memory size variable was a 32-bit int. This meant that the size of the memory was limited to 4GB. This patch changes the type of the variable to 64-bit to support larger memory sizes. Thanks to Raghuraman Balasubramanian for bringing this to notice.
      Ruby: Remove RubyEventQueue This patch removes RubyEventQueue. Consumer objects now rely on RubySystem or themselves for scheduling events.
      System: Remove redundant call to startupCPU
      Ruby: remove README.debugging and Decommissioning_note These files were relevant when Ruby was part of GEMS. They are not required any longer.
      se.py: support specifying multiple programs via command line This patch allows for specifying multiple programs via command line. It also adds an option for specifying whether to use of SMT. But SMT does not work for the o3 cpu as of now.
      Ruby Slicc: remove the call to cin.get() function If I understand correctly, this was put in place so that a debugger can be attached when the protocol aborts. While this sounds useful, it is a problem when the simulation is not being actively monitored. I think it is better to remove this.
      Ruby System: Convert to Clocked Object This patch moves Ruby System from being a SimObject to recently introduced ClockedObject.
      Regression: Updates due to changes to Ruby memory controller
      Ruby: Use uint8_t instead of uint8 everywhere
      Ruby: Use uint32_t instead of uint32 everywhere
      ISA Parser: Allow predication of source and destination registers This patch is meant for allowing predicated reads and writes. Note that this predication is different from the ISA provided predication. They way we currently provide the ISA description for X86, we read/write registers that do not need to be actually read/written. This is likely to be true for other ISAs as well. This patch allows for read and write predicates to be associated with operands. It allows for the register indices for source and destination registers to be decided at the time when the microop is constructed. The run time indicies come in to play only when the at least one of the predicates has been provided. This patch will not affect any of the ISAs that do not provide these predicates. Also the patch assumes that the order in which operands appear in any function of the microop is same across all the functions of the microops. A subsequent patch will enable predication for the x86 ISA.
      x86: Add a separate register for D flag bit The D flag bit is part of the cc flag bit register currently. But since it is not being used any where in the implementation, it creates an unnecessary dependency. Hence, it is being moved to a separate register.
      X86: make use of register predication The patch introduces two predicates for condition code registers -- one tests if a register needs to be read, the other tests whether a register needs to be written to. These predicates are evaluated twice -- during construction of the microop and during its execution. Register reads and writes are elided depending on how the predicates evaluate.
      x86 Regressions: Update stats due to register predication
      se.py: removes error in passing options to a binary
      ruby: avoid using g_system_ptr for event scheduling This patch removes the use of g_system_ptr for event scheduling. Each consumer object now needs to specify upfront an EventManager object it would use for scheduling events. This makes the ruby memory system more amenable for a multi-threaded simulation.
      ruby: eliminate typedef integer_t
      MI coherence protocol: add copyright notice
      ruby: move functional access to ruby system This patch moves the code for functional accesses to ruby system. This is because the subsequent patches add support for making functional accesses to the messages in the interconnect. Making those accesses from the ruby port would be cumbersome.
      ruby: remove some unused things in slicc This patch removes the parts of slicc that were required for multi-chip protocols. Going ahead, it seems multi-chip protocols would be implemented by playing with the network itself.
      ruby: remove unused code in protocols
      ruby: rename template_hack to template I don't like using the word hack. Hence, the patch.
      ruby: changes to simple network This patch makes the Switch structure inherit from BasicRouter, as is done in two other networks.
      ruby: makes some members non-static This patch makes some of the members (profiler, network, memory vector) of ruby system non-static.
      Regression Tests: Update statistics
      ruby: reset timing after cache warm up Ruby system was recently converted to a clocked object. Such objects maintain state related to the time that has passed so far. During the cache warmup, Ruby system changes its own time and the global time. Later on, the global time is restored. So Ruby system also needs to reset its own time.
      ruby banked array: do away with event scheduling It seems unecessary that the BankedArray class needs to schedule an event to figure out when the access ends. Instead only the time for the end of access needs to be tracked.
      ruby: allow function definition in slicc structs This patch adds support for function definitions to appear in slicc structs. This is required for supporting functional accesses for different types of messages. Subsequent patches will use this to development.
      ruby: remove AbstractMemOrCache The only place where this abstract class is in use is the memory controller, which it self is an abstract class. Does not seem useful at all.
      ruby: register multiple memory controllers Currently the Ruby System maintains pointer to only one of the memory controllers. But there can be multiple controllers in the system. This patch adds a vector of memory controllers.
      memtest: move check on outstanding requests The Memtest tester allows for only one request to be outstanding for a particular physical address. The check has been written separately for reads and writes. This patch moves the check earlier than its current position so that it need not be written separately for reads and writes.
      ruby: improved support for functional accesses This patch adds support to different entities in the ruby memory system for more reliable functional read/write accesses. Only the simple network has been augmented as of now. Later on Garnet will also support functional accesses. The patch adds functional access code to all the different types of messages that protocols can send around. These messages are functionally accessed by going through the buffers maintained by the network entities. The patch also rectifies some of the bugs found in coherence protocols while testing the patch.
      regressions: update stats due to change to ruby memory system
      regressions: update stats for eio tests
      ruby: functional access updates to network test protocol I had forgotten to change the network test protocol while making changes to ruby for supporting functional accesses. This patch updates the protocol so that it can compile correctly.
      regressions: update stats for ruby fs test
      ruby: bug in functionalRead, revert recent changes Recent changes to functionalRead() in the memory system was not correct. The change allowed for returning data from the first message found in the buffers of the memory system. This is not correct since it is possible that a timing message has data from an older state of the block.
      ruby: support functional accesses in garnet flexible network
      regressions: stats update due to ruby functional access patch
      sim: have a curTick per eventq This patch adds a _curTick variable to an eventq. This variable is updated whenever an event is serviced in function serviceOne(), or all events upto a particular time are processed in function serviceEvents(). This change helps when there are eventqs that do not make use of curTick for scheduling events.
      regression test: update a couple of config.ini files
      ruby: add functions for computing next stride/page address
      ruby: add a prefetcher This patch adds a prefetcher for the ruby memory system. The prefetcher is based on a prefetcher implemented by others (well, I don't know who wrote the original). The prefetcher does stride-based prefetching, both unit and non-unit. It obseves the misses in the cache and trains on these. After the training period is over, the prefetcher starts issuing prefetch requests to the controller.
      ruby: change slicc to allow for constructor args The patch adds support to slicc for recognizing arguments that should be passed to the constructor of a class. I did not like the fact that an explicit check was being carried on the type 'TBETable' to figure out the arguments to be passed to the constructor. The patch also moves some of the member variables that are declared for all the controllers to the base class AbstractController.
      ruby: modify the directed tester to read/write streams The directed tester supports only generating only read or only write accesses. The patch modifies the tester to support streams that have both read and write accesses.
      ruby: add support for prefetching to MESI protocol
      regressions: stats update due to stats from ruby prefetcher
      arm regressions: updates to config.ini, terminal files
      x86: implement x87 fp instruction fsincos This patch implements the fsincos instruction. The code was originally written by Vince Weaver. Gabe had made some comments about the code, but those were never addressed. This patch addresses those comments.
      x86: implement x87 fp instruction fnstsw This patch implements the fnstsw instruction. The code was originally written by Vince Weaver. Gabe had made some comments about the code, but those were never addressed. This patch addresses those comments.
      x86 regressions: stats update due to new x87 instructions
      regressions: stats update due to decoder changes
      x86: Changes to decoder, corrects 9376 The changes made by the changeset 9376 were not quite correct. The patch made changes to the code which resulted in decoder not getting initialized correctly when the state was restored from a checkpoint.
      base simple cpu: removes commented out code about cache ops
      Ruby: use ClockedObject in Consumer class Many Ruby structures inherit from the Consumer, which is used for scheduling events. The Consumer used to relay on an Event Manager for scheduling events and on g_system_ptr for time. With this patch, the Consumer will now use a ClockedObject to schedule events and to query for current time. This resulted in several structures being converted from SimObjects to ClockedObjects. Also, the MessageBuffer class now requires a pointer to a ClockedObject so as to query for time.
      Ruby: remove reference to g_system_ptr from class Message This patch was initiated so as to remove reference to g_system_ptr, the pointer to Ruby System that is used for getting the current time. That simple change actual requires changing a lot many things in slicc and garnet. All these changes are related to how time is handled.
      regressions: update stats due to changes in ruby obj hierarchy
      x86: implement fabs, fchs instructions
      x86: implements emms instruction
      x86: implements fsin, fcos instructions
      x86 cpuid: enable clflush Note that clflush is only being enabled. It is not implemented in actual. A warning is printed if the cpu encounters a clflush instruction. We need to enable this instruction in cpuid since JRE 1.7 tests for it.
      x86 regressions: updates due to new instructions and cpuid
      ruby: remove calls to g_system_ptr->getTime() This patch further removes calls to g_system_ptr->getTime() where ever other clocked objects are available for providing current time.
      x86, cpu: corrects 270c9a75e91f, take over decoder on cpu switch The changes made by the changeset 270c9a75e91f do not work well with switching of cpus. The problem is that decoder for the old thread context holds state that is not taken over by the new decoder.
      regressions: update stats due to branch predictor changes The actual statistical values are being updated for only two tests belonging to sparc architecture and inorder cpu: 00.hello and 02.insttest. For others the patch updates config.ini and name changes to statistical variables.
      ruby: remove call to curCycle in panic() The panic() function already prints the current tick value. This call to curCycle() is as such redundant. Since we are trying to move towards multiple clock domains, this call will print misleading time.
      ruby: remove get_time() This patch replaces get_time() in *.sm files with curCycle() which is now possible since controllers are clocked objects.
      merged 798c2cec8e37 and e96ff45795bc
      ruby: correct computation of number of bits required for address The number of bits required for an address was set to floorLog2(memory size). This is correct under the assumption that the memory size is a power of 2, which is not always true. Hence, floorLog2 is being replaced with ceilLog2.
      sim: remove unused struct priority_compare
      ruby: record fully busy cycle with in the controller This patch does several things. First, the counter for fully busy cycles for a controller is now kept with in the controller, instead of being part of the profiler. Second, the topology class no longer keeps an array of controllers which was only used for printing stats. Instead, ruby system will now ask each controller to print the stats. Thirdly, the statistical variable for recording how many different types were created is being moved in to the controller from the profiler. Note that for printing, the profiler will collate results from different controllers.
      ruby: modifies histogram add() function This patch modifies the Histogram class' add() function so that it can add linear histograms as well. The function assumes that the left end point of the ranges of the two histograms are the same. It also assumes that when the ranges of the two histogram are changed to accomodate an element not in the range, the factor used in changing the range is same for both the histograms.
      base: add some mathematical operators to Cycles class
      ruby: replaces Time with Cycles in many places The patch started of with replacing Time with Cycles in the Consumer class. But to get ruby to compile, the rest of the changes had to be carried out. Subsequent patches will further this process, till we completely replace Time with Cycles.
      ruby: replace Time with Cycles in Message class Concomitant changes are being committed as well, including the io operator<< for the Cycles class.
      ruby: Replace Time with Cycles in SequencerMessage
      ruby: replace Time with Cycles in Memory Controller
      ruby: replace Time with Cycles in MessageBuffer
      ruby: convert block size, memory size to unsigned
      ruby: replace Time with Tick in replacement policy classes
      ruby: replace Time with Cycles in garnet fixed and flexible
      ruby: replace Time with Cycles (final patch in the series) This patch is as of now the final patch in the series of patches that replace Time with Cycles.This patch further replaces Time with Cycles in Sequencer, Profiler, different protocols and related entities.
      ruby: enable multiple clock domains This patch allows ruby to have multiple clock domains. As I understand with this patch, controllers can have different frequencies. The entire network needs to run at a single frequency.
      ruby: MI protocol: add a missing transition The transition for state MII and event Store was found missing during testing. The transition is being added. The controller will not stall the Store request in state MII
      regressions: update stats due to changes to ruby
      ruby: remove unused variable m_print_config in class Topology
      slicc: remove unused variable message_buffer_names
      sim: remove duplicate check on stack size
      ruby: garnet: fixed: implement functional access
      ruby: remove the functional copy of memory in se mode This patch removes the functional copy of the memory that was maintained in the se mode. Now ruby itself will provide the data.
      regressions: stats updates due to no physmem in ruby
      x86: implement some of the x87 instructions This patch implements ftan, fprem, fyl2x, fld* floating-point instructions.
      regressions: x86: stats updates due to new x87 insts
      ruby: set: corrects csprintf() call introduced by 7d95b650c9b6
      ruby: network: move routers from topology to network
      ruby: convert Topology to regular class The Topology class in Ruby does not need to inherit from SimObject class. This patch turns it into a regular class. The topology object is now created in the constructor of the Network class. All the parameters for the topology class have been moved to the network class.
      ruby: connect two controllers using only message buffers This patch modifies ruby so that two controllers can be connected to each other with only message buffers in between. Before this patch, all the controllers had to be connected to the network  for them to communicate with each other. With this patch, one can have protocols where a controller is not connected to the network, but communicates with another controller through a message buffer.
      ruby: move stall and wakeup functions to AbstractController These functions are currently implemented in one of the files related to Slicc. Since these are purely C++ functions, they are better suited to be in the base class.
      slicc: remove check if the L1Cache has a sequencer
      ruby: keep histogram of outstanding requests in seq The histogram for tracking outstanding counts per cycle is maintained in the profiler. For a parallel implementation of the memory system, we need that this histogram is maintained locally. Hence it will now be kept in the sequencer itself. The resulting histograms will be merged when the stats are printed.
      ruby: remove unsued profile functions
      ruby: consumer: avoid using receiver side clock A set of patches was recently committed to allow multiple clock domains in ruby. In those patches, I had inadvertently made an incorrect use of the clocks. Suppose object A needs to schedule an event on object B. It was possible that A accesses B's clock to schedule the event. This is not possible in actual system. Hence, changes are being to the Consumer class so as to avoid such happenings. Note that in a multi eventq simulation, this can possibly lead to an incorrect simulation.
      ruby: message buffer node: used Tick in place of Cycles The message buffer node used to keep time in terms of Cycles. Since the sender and the receiver can have different clock periods, storing node time in cycles requires some conversion. Instead store the time directly in Ticks.
      ruby: message buffer: remove _ptr from some variables The names were getting too long.
      ruby: message buffer: correct previous errors A recent set of patches added support for multiple clock domains to ruby. I had made some errors while writing those patches. The sender was using the receiver side clock while enqueuing a message in the buffer. Those errors became visible while creating (or restoring from) checkpoints. The errors also become visible when a multi eventq scenario occurs.
      ruby: slicc: set sender, receiver clock objs for optional queue
      regressions: updates to config.ini for ruby tests
      config: return exit event instead of cause changeset: a4739b6f799d made some changes that where an exit event should have been returned in place of exit cause. This patch corrects the error.
      regressions: update due to cache latency fix
      regressions: update eio stats due to cache latency fix
      x86: create space in bios memory map As of now, we mark the top 1MB of memory space as unusable. Part of it is actually usable and is required to be marked so by some of the newer versions of linux kernel. This patch marks the top 639KB as usable. This value was chosen by looking at QEMU's output for bios memory map.
      x86: changes to apic, keyboard It is possible that operating system wants to shutdown the lapic timer by writing timer's initial count to 0. This patch adds a check that the timer event is only scheduled if the count is 0.
      o3cpu: commit: changes interrupt handling Currently the commit stage keeps a local copy of the interrupt object. Since the interrupt is usually handled several cycles after the commit stage becomes aware of it, it is possible that the local copy of the interrupt object may not be the interrupt that is actually handled. It is possible that another interrupt occurred in the interval between interrupt detection and interrupt handling.
      regressions: updates due to changes to o3 cpu, x86 memory map
      config: ruby network test: remove piobus check
      ruby: moesi cmp directory: add copyright notice
      Merged c22628fa2564 and 2285b98847d7
      ruby: patch checkpoint restore with garnet Due to recent changes to clocking system in Ruby and the way Ruby restores state from a checkpoint, garnet was failing to run from a checkpointed state. The problem is that Ruby resets the time to zero while warming up the caches. If any component records a local copy of the time (read calls curCycle()) before the simulation has started, then that component will not operate until that time is reached. In the context of this particular patch, the Garnet Network class calls curCycle() at multiple places. Any non-operational component can block in requests in the memory system, which the system interprets as a deadlock. This patch makes changes so that Garnet can successfully run from checkpointed state.
      x86, stats: updates due to lret bugfix
      ruby: mesi coherence protocol: remove unused state M_MB
      x86: regressions: add switcher full test
      configs: ruby: pass the option use_map to directory controller The option was not being passed to directory controllers for the protocols MOESI_CMP_token and MOESI_CMP_directory. This was resulting in an error while instantiating the directory controller as it tries to access the wrong type of memory.
      ruby: moesi cmp directory: cosmetic changes Updates copyright years, removes space at the end of lines, shortens variable names.
      ruby: moesi cmp token: cosmetic changes Updates copyright years, removes space at the end of lines, shortens variable names.
      ruby: mesi cmp directory: cosmetic changes Updates copyright years, removes space at the end of lines, shortens variable names.
      ruby: moesi hammer: cosmetic changes Updates copyright years, removes space at the end of lines, shortens variable names.
      stats: updates statistics for ruby regressions
      x86: add op class for int and fp microops in isa description Currently all the integer microops are marked as IntAluOp and the floating point microops are marked as FloatAddOp. This patch adds support for marking different microops differently. Now IntMultOp, IntDivOp, FloatDivOp, FloatMultOp, FloatCvtOp, FloatSqrtOp classes will be used as well. This will help in providing different latencies for different op class.
      x86: mark instructions for being function call/return Currently call and return instructions are marked as IsCall and IsReturn. Thus, the branch predictor does not use RAS for these instructions. Similarly, the number of function calls that took place is recorded as 0. This patch marks these instructions as they should be.
      x86, regressions: updates stats This is due to op class, function call, walker patches.
      config: add atomic cpu to X86_MESI_CMP_directory build options There is some problem with the way listing cpu options right now. Since Ruby uses the options variable, this variable has to be created in the config file that runs the fs test for x86 and mesi cmp directory combination. While creating the variable, some error is occurs due to the way list of cpu types is now created. Hence, we need to compile all the cpu models.
      stats: allow printing vectors on a single line This patch adds a new flag to specify if the data values for a given vector should be printed in one line in the stats.txt file. The default behavior will be to print the data in multiple lines. It makes changes to print functions to enforce this behavior.
      ruby: remove undefined functions in Address class
      ruby: stats: use gem5's stats for cache and memory controllers This moves event and transition count statistics for cache controllers to gem5's statistics. It does the same for the statistics associated with the memory controller in ruby.
      ruby: remove periodic event from Profiler The Profiler class does not need an event for dumping statistics periodically. This is because there is a method for dumping statistics for all the sim objects periodically. Since Ruby is a sim object, its statistics are also included.
      ruby: remove several unused variables in Profiler This patch removes per processor cycle count, histogram for filter stats, histogram for multicasts, histogram for prefetch wait, some function prototypes that do not have definitions.
      stats: updates due to changes to ruby Ruby's controller statistics have been mostly moved to stats.txt now. Plus stats.txt for solaris/t1000-simple-atomic and arm/20.parser are also being updated.
      config: Do not instantiate membus when using ruby This patch moves the instantiation of system.membus in se.py to the area of code where classic memory system has been dealt with. Ruby does not require this bus and hence it should not be instantiated.
      Added tag stable_2013_06_16 for changeset 07352f119e48
      ruby: remove the three files related to profiling This patch removes the following three files: RubySlicc_Profiler.sm, RubySlicc_Profiler_interface.cc and RubySlicc_Profiler_interface.hh. Only one function prototyped in the file RubySlicc_Profiler.sm. Rest of the code appearing in any of these files is not in use. Therefore, these files are being removed.
      ruby: profiler: lots of inter-related changes The patch started of with removing the global variables from the profiler for profiling the miss latency of requests made to the cache. The corrresponding histograms have been moved to the Sequencer. These are combined together when the histograms are printed. Separate histograms are now maintained for tracking latency of all requests together, of hits only and of misses only.
      ruby: mesi cmp directory: separate actions for external hits This patch adds separate actions for requests that missed in the local cache and messages were sent out to get the requested line. These separate actions are required for differentiating between the hit and miss latencies in the statistics collected.
      ruby: moesi cmp directory: separate actions for external hits This patch adds separate actions for requests that missed in the local cache and messages were sent out to get the requested line. These separate actions are required for differentiating between the hit and miss latencies in the statistics collected.
      stats: updates due to changes to stat collection in ruby
      ruby: check for compatibility between mem size and num dirs The configuration scripts provided for ruby assume that the available physical memory is equally distributed amongst the directory controllers. But there is no check to ensure this assumption has been adhered to. This patch adds the required check.
      ruby: network: remove reconfiguration code This code seems not to be of any use now. There is no path in the simulator that allows for reconfiguring the network. A better approach would be to take a checkpoint and start the simulation from the checkpoint with the new configuration.
      configs: rearrange the available options in Options.py It also changes the instantiation of physmem in se.py so as to make use of the memory size supplied by the mem_size option.
      ruby: append transition comment only when in opt/debug
      regressions: update a couple of configs The configs for pc-simple-timing-ruby, t1000-simple-atomic had not been updated correctly in the patch 6e6cefc1db1f.
      regressions: update a couple stats.txt The statistics for 30.eio-mp, pc-simple-timing-ruby tests are being updated to incorporate the changes due to recent patches.
      x86: add tlb checkpointing This patch adds checkpointing support to x86 tlb. It upgrades the cpt_upgrader.py script so that previously created checkpoints can be updated. It moves the checkpoint version to 6.
      ruby: slicc: move some code to AbstractController Some of the code in StateMachine.py file is added to all the controllers and is independent of the controller definition. This code is being moved to the AbstractController class which is the parent class of all controllers.
      ruby: slicc: remove double trigger, continueProcessing These constructs are not in use and are not being maintained by any one. In addition, it is not known if doubleTrigger works correctly with Ruby now.
      ruby: add option for number of transitions per cycle The number of transitions per cycle that a controller can carry out is a proxy for the number of ports that a controller has. This value is currently 32 which is way too high. The patch introduces an option for the number of ports and uses this option in the protocol files to set the number of transitions. The default value is being set to 4. None of the se regressions change. Ruby stats for the fs regression change and are being updated.
      stats: update ruby.stats, config.ini files for x86 fs test
      ruby: converts sparse memory stats to gem5 style
      stats: adds a Formula operator for division
      ruby: network: shorten variable names
      ruby: network: removes reset functionality
      ruby: remove undefined message size type This message size type does not work well with one of the statistical variables. It also seems unnecessary.
      ruby: profiler: removes function resourceUsage()
      ruby: network: correct naming of routers
      ruby: network: convert to gem5 style stats
      stats: ruby: updates due to recent changes.
      stats: add operator= for DataWrapVec class
      stats: update sparc fs due to recent changes to memory class.
      x86: enables lstat and readlink syscalls
      config: set cwd for processes in se.py
      config: correct example ruby scripts A couple of recent changesets added/deleted/edited some variables that are needed for running the example ruby scripts. This changeset edits these scripts to bring them to a working state.
      Added tag stable_2013_10_14 to the changeset 6a043adb1e8d
      sim: correct ticksToCycles() function.
      stats: updates due to changes to ticksToCycles()
      util: update checkpoint aggregation script The checkpoint aggregation script had become outdated due to numerous changes to checkpoints over the past couple of years.  This updates the script.  It now supports aggregation for x86 architecture instead of alpha.  Also a couple of new options have been added that specify the size of the memory file to be created and whether or not the memory file should be compressed.
      cpu: call BaseCPU startup() function in o3 cpu
      sim: reset stats after startup Currently statistics are reset after the initial / checkpoint state has been loaded. But ruby does some checkpoint processing in its startup() function. So the stats need to be reset after the startup() function has been called. This patch moves the class to stats.reset() to achieve this change in functionality.
      ruby: mesi: remove owner and sharer fields from directory tags
      ruby: declare variables to be unsigned in Address.hh
      ruby: slicc: replace max_in_port_rank with number of inports
      ruby: fix bugs in mesi cmp directory protocol This patch fixes couple of bugs in the L2 controller of the mesi cmp directory protocol.
      stats: updates due to bug fixed in mesi coherence protocol
      ruby: some small changes
      ruby: add support for clusters
      ruby: remove cntrl_id from python config scripts.
      ruby: rename MESI_CMP_directory to MESI_Two_Level
      ruby: add a three level MESI protocol.
      ruby: slicc: remove variable 'addr' used in calls to doTransition This variable causes trouble if a variable of same name is declared in a protocol file. Hence it is being eliminated.
      ruby: fix bug introduced to revision 8523754f8885
      stats: add function for adding two histograms This patch adds a function to the HistStor class for adding two histograms. This functionality is required for Ruby.  It also adds support for printing histograms in a single line.
      ruby: move all statistics to stats.txt, eliminate ruby.stats
      stats: updates due to changes to ruby
      ruby: remove unused label no_vector
      stats: update sparc fs stats
      config: allow more than 3GB of memory for x86 simulations This patch edits the configuration files so that x86 simulations can have more than 3GB of memory.  It also corrects a bug in the MemConfig.py script.
      x86: correct error in emms instruction.
      x86: implements fxch instruction.
      x86: implements  x87 add/sub instructions
      x86: use lfpimm instead of limm for fptan
      x86: add a warning about the number of memory controllers When memory size > 3GB, print a warning that twice the number of memory controllers would be created.
      config: correct bug in x86 drive sys instantiation
      ruby: memory controller: use MemoryNode *
      base: calls abort() from fatal Currently fatal() ends the simulation in a normal fashion.  This results in the call stack getting lost when using a debugger and it is not always possible to debug the simulation just from the information provided by the printed error message.  Even though the error is likely due to a user's fault, the information available should not be thrown away.  Hence, this patch to call abort() from fatal().
      Added tag stable_2014_02_15 to the changeset 459491344fcf
      stats: updates due to branch predictor warming
      ruby: message buffer: removes some unecessary functions.
      ruby: slicc: slight code refactoring
      ruby: network: removes unused code.
      ruby: mesi three level: rename incorrectly named files Two files had been incorrectly named with a .cache suffix.
      ruby: controller: slight code refactoring
      ruby: network: garnet: fixed: removes next cycle functions At several places, there are functions that take a cycle value as input and performs some computation.  Along with each such function, another function was being defined that simply added one more cycle to input and computed the same function.  This patch removes this second copy of the function.  Places where these functions were being called have been updated to use the original function with argument being current cycle + 1.
      ruby: cache: remove not required variable m_cache_name
      ruby: network: garnet: fixed: removes net_ptr from links
      ruby: network: move message buffers to base network class.
      config: ruby_random_test: updates due to recent unrelated changes
      ruby: protocols: remove unused action z_stall
      ruby: slicc: remove unused COPY_HEAD functionality
      ruby: remove few not required #includes
      ruby: message buffer: refactor code Code in two of the functions was exactly the same.  This patch moves this code to a new function which is called from the two functions mentioned initially.
      config: topologies: slight code refactor
      ruby: route all packets through ruby port Currently, the interrupt controller in x86 is connected to the io bus directly.  Therefore the packets between the io devices and the interrupt controller do not go through ruby.  This patch changes ruby port so that these packets arrive at the ruby port first, which then routes them to their destination.  Note that the patch does not make these packets go through the ruby network.  That would happen in a subsequent patch.
      stats: updates due to changes to ruby pio access handling
      ruby: correct errors in changeset 4eec7bdde5b0 Couple of errors were discovered in 4eec7bdde5b0 which necessitated this patch. Firstly, we create interrupt controllers in the se mode, but no piobus was being created.  RubyPort, which earlier used to ignore range changes now forwards those to the piobus.  The lack of piobus resulted in segmentation fault.  This patch creates a piobus even in se mode.  It is not created only when some tester is running.  Secondly,  I had missed out on modifying port connections for other coherence protocols.
      stats: updates due to c0db268f811b
      ruby: profiler: statically allocate stats variable Couple of users observed segmentation fault when the simulator tries to register the statistical variable m_IncompleteTimes.  It seems that there is some problem with the initialization of these variables when allocated in the constructor.
      ruby: make the max_size variable of the MessageBuffer unsigned
      ruby: message buffer: changes related to tracking push/pop times The last pop operation is now tracked as a Tick instead of in Cycles. This helps in avoiding use of the receiver's clock during the enqueue operation.
      ruby: remove some of the unnecessary code
      config: ruby: remove piobus from protocols This patch removes the piobus from the protocol config files.  The ports are now connected to the piobus in the Ruby.py file.
      ruby: no piobus in se mode Piobus was recently added to se scripts for ruby so that the interrupt controller can be connected to something (required since the interrupt controller sends address range messages).  This patch removes the piobus and instead, the pio port of ruby port will now ignore the range change messages in se mode.
      config: remove ruby_fs.py
      config: fs.py: move creating of test/drive systems to functions The code that creates test and drive systems is being moved to separate functions so as to make the code more readable.  Ultimately the two functions would be combined so that the replicated code is eliminated.
      config: ruby: rename _cpu_ruby_ports to _cpu_ports
      ruby: slicc: code refactor
      ruby: garnet: convert network interfaces into clocked objects This helps in configuring the network interfaces from the python script and these objects no longer rely on the network object for the timing information.
      ruby: consumer: avoid accessing wakeup times when waking up Each consumer object maintains a set of tick values when the object is supposed to wakeup and do some processing.  As of now, the object accesses this set both when scheduling a wakeup event and when the object actually wakes up.  The set is accessed during wakeup to remove the current tick value from the set.  This functionality is now being moved to the scheduling function where ticks are removed at a later time.
      stats: updates due to changes to ruby config scripts These updates to ruby regression stats are due to renaming piobus to iobus and dropping piobus in the se mode.
      configs: use SimpleMemory when using ruby in se mode A recent changeset altered the default memory class to DRAMCtrl.  In se mode, ruby uses the physical memory to check if a given address is within the bounds of the physical memory.  SimpleMemory is enough for this.  Moreover, SimpleMemory does not check whether it is connected or not, something which DRAMCtrl does.
      ruby: coherence protocols: drop the phrase IntraChip The phrase is no longer valid since we do not distinguish between inter and intra chip communication.
      ruby: slicc: change enqueue statement As of now, the enqueue statement can take in any number of 'pairs' as argument.  But we only use the pair in which latency is the key.  This latency is allowed to be either a fixed integer or a member variable of controller in which the expression appears.  This patch drops the use of pairs in an enqueue statement.  Instead, an expression is allowed which will be interpreted to be the latency of the enqueue.  This expression can anything allowed by slicc including a constant integer or a member variable.
      config: ruby: remove memory controller from network test It is not in use and not required as such.
      ruby: slicc: slight change to rule for transitions It had an unnecessary pairs token which is being removed.
      ruby: slicc: remove old documentation Has not been maintained at all.  Since there is alternate documentation available on gem5.org, no need to have this separately.
      stats: updates due to o3 smt fix + changes to one ruby regression config.ini file.
      cpu: o3: remove stat totalCommittedInsts This patch removes the stat totalCommittedInsts.  This variable was used for recording the total number of instructions committed across all the threads of a core.  The instructions committed by each thread are recorded invidually. The total would now be generated by summing these individual counts.
      ruby: message buffer: drop dequeue_getDelayCycles() The functionality of updating and returning the delay cycles would now be performed by the dequeue() function itself.
      ruby: remove old protocol documentation
      ruby: slicc: remove unused ids DNUCA*
      stats: changes due to o3 cpu and ruby message buffer patches
      stats: changes due to recent o3 patch.
      Added tag stable_2014_08_26 for changeset cb2e6950956d
      ruby: move files from ruby/system to ruby/structures
      ruby: eliminate type Time There is another type Time in src/base class which results in a conflict.
      ruby: network: move getNumNodes() to base class All the implementations were doing the same things.
      ruby: remove unused toString() from AbstractController
      ruby: slicc: donot prefix machine name to variables This changeset does away with prefixing of member variables of state machines with the identity of the machine itself.
      ruby: mesi three level: slight naming changes.
      ruby: slicc: improve the grammar This patch changes the grammar for SLICC so as to remove some of the redundant / duplicate rules.  In particular rules for object/variable declaration and class member declaration have been unified. Similarly, the rules for a general function and a class method have been unified.
      ruby: slicc: change the way configurable members are specified There are two changes this patch makes to the way configurable members of a state machine are specified in SLICC.  The first change is that the data member declarations will need to be separated by a semi-colon instead of a comma.  Secondly, the default value to be assigned would now use SLICC's assignment operator i.e. ':='.
      mem: change the namespace Message to ProtoMessage The namespace Message conflicts with the Message data type used extensively in Ruby.  Since Ruby is being moved to the same Master/Slave ports based configuration style as the rest of gem5, this conflict needs to be resolved. Hence, the namespace is being renamed to ProtoMessage.
      build opts: add MI_example to NULL ISA A later changeset changes the file src/python/swig/pyobject.cc to include a header file that includes a header file generated at build time depending on the PROTOCOL in use.  Since NULL ISA was not specifying any protocol, this resulted in compilation problems.  Hence, the changeset.
      ruby: message buffers:  significant changes
      ruby: PerfectSwitch: moves code to a per vnet helper function This patch moves code from the wakeup() function to a operateVnet(). The aim is to improve the readiblity of the code.
      x86: set op class of two fp instructions This patch sets op class of two fp instructions: movfp and pop x87 stack as IntAluOp since these instructions do not make use of the fp alu.
      ruby: remove typedef of Index as int64 The Index type defined as typedef int64 does not really provide any help since in most places we use primitive types instead of Index.  Also, the name Index is very generic that it does not merit being used as a typename.
      stats: updates due to recent ruby and x86 changes Also updates many out of date config files.
      ruby: network: revert some of the changes from ad9c042dce54 The changeset ad9c042dce54 made changes to the structures under the network directory to use a map of buffers instead of vector of buffers. The reasoning was that not all vnets that are created are used and we needlessly allocate more buffers than required and then iterate over them while processing network messages.  But the move to map resulted in a slow down which was pointed out by Andreas Hansson.  This patch moves things back to using vector of message buffers.
      base: misc: Add missing header file.
      base: addr range: slight change to validity check The validity check is being changed from < to <= since the end of the range is considered to be a part of it.
      ruby: moesi hammer: correct typo in master-slave assignment
      ruby: structures: coorect #ifndef macros in header files
      config: separate function for instantiating a memory controller This patch moves code for instantiating a single memory controller from the function config_mem() to a separate function.  This is being done so that memory controllers can be instantiated without assuming that they will be attached to the system in a particular fashion.
      ruby: mesi: slight renaming
      ruby: drop Orion network power model
      ruby: network: garnet: remove functions for computing power
      ruby: network: garnet: add statistics for different activities This patch adds some statistics to garnet that record the activity of certain structures in the on-chip network.  These statistics, in a later patch, will be used for computing the energy consumed by the on-chip network.
      ext: add the source code for DSENT This patch adds a tool called DSENT to the ext/ directory.  DSENT is a tool that models power and area for on-chip networks.  The next patch adds a script for using the tool.
      ext: dsent: adds a Python interface, drops C++ one This patch extensively modifies DSENT so that it can be accessed using Python. To access the Python interface, DSENT needs to compiled as a shared library. For this purpose a CMakeLists.txt file has been added.  Some of the code that is not required is being removed.
      util: adds a script for using DSENT This patch adds a python script that processes the configuration and the statistics file from a simulation run.  Configuration and activity of network routers and links obtained from this processing is fed to DSENT via its Python interface.  DSENT then computes the area and the power consumption of these network components.  The script outputs these quantities to the console.
      stats: updates due to changes to x86, stale configs.
      cpu: o3: corrects base FP and CC register index in removeThread()
      stats: updates due to previous mmap and exit_group patches.
      sim: revert 6709bbcf564d The identifier SYS_getdents is not available on Mac OS X.  Therefore, its use results in compilation failure.  It seems there is no straight forward way to implement the system call getdents using readdir() or similar C functions. Hence the commit 6709bbcf564d is being rolled back.
      ruby: dma sequencer: remove RubyPort as parent class As of now DMASequencer inherits from the RubyPort class.  But the code in RubyPort class is heavily tailored for the CPU Sequencer.  There are parts of the code that are not required at all for the DMA sequencer.  Moreover, the next patch uses the dma sequencer for carrying out memory accesses for all the io devices.  Hence, it is better to have a leaner dma sequencer.
      ruby: single physical memory in fs mode Both ruby and the system used to maintain memory copies.  With the changes carried for programmed io accesses, only one single memory is required for fs simulations.  This patch sets the copy of memory that used to reside with the system to null, so that no space is allocated, but address checks can still be carried out.  All the memory accesses now source and sink values to the memory maintained by ruby.
      ruby: remove sparse memory. In my opinion, it creates needless complications in rest of the code. Also, this structure hinders the move towards common set of code for physical memory controllers.
      ruby: slicc: allow adding a bool to an int, like C++.
      ruby: coherence protocols: remove data block from dirctory entry This patch removes the data block present in the directory entry structure of each protocol in gem5's mainline.  Firstly, this is required for moving towards common set of memory controllers for classic and ruby memory systems. Secondly, the data block was being misused in several places.  It was being used for having free access to the physical memory instead of calling on the memory controller.
      ruby: remove the function functionalReadBuffers() This function was added when I had incorrectly arrived at the conclusion that such a function can improve the chances of a functional read succeeding. As was later realized, this is not possible in the current setup.  While the code using this function was dropped long back, this function was not.  Hence the patch.
      ruby: interface with classic memory controller This patch is the final in the series.  The whole series and this patch in particular were written with the aim of interfacing ruby's directory controller with the memory controller in the classic memory system.  This is being done since ruby's memory controller has not being kept up to date with the changes going on in DRAMs.  Classic's memory controller is more up to date and supports multiple different types of DRAM.  This also brings classic and ruby ever more close.  The patch also changes ruby's memory controller to expose the same interface.
      ruby: provide a backing store Ruby's functional accesses are not guaranteed to succeed as of now.  While this is not a problem for the protocols that are currently in the mainline repo, it seems that coherence protocols for gpus rely on a backing store to supply the correct data.  The aim of this patch is to make this backing store configurable i.e. it comes into play only when a particular option: --access-backing-store is invoked.
      stats: updates due to changes to ruby
      stats: changes to x86 o3 fs and sparc fs regression tests.
      configs: small fix to ruby portion of fs.py and se.py In fs.py the io port controller was being attached to the iobus multiple times.  This should be done only once.  In se.py, the the option use_map was being set which no longer exists.
      config: ruby: mi protocol: correct master slave setting for dma In the MI protocol, the master slave connection between the dma controller and network was being set incorrectly.  This patch corrects it.
      Added tag stable_2014_12_14 for changeset bdb307e8be54
      configs: ruby: removes bug introduced by 05b5a6cf3521
      stats: changes due to recent changesets.
      stats: changes due to recent changesets.
      cpu: o3: remove unused function annotateMemoryUnits()
      cpu: o3: remove member variable squashCounter The variable is used in only one place and a whole new function setNextStatus() has been defined just to compute the value of the variable.  Instead of calling the function, the value is now computed in the loop that preceded the function call.
      cpu: o3: combine if with same condition
      cpu: o3: remove unused stat variables.
      cpu: o3: commit: mark pipeline delay variable as consts
      cpu: o3: Remove unused code in iew, add assert instead.
      cpu: o3: another assert instead of check
      stats: changes to due to recent set of patches
      tests: remove not maintained 20.eio-short detailed test
      stats: updates due to recent changesets.
      sim: fix function for emulating dup() The function was using the host fd to obtain the fd object from the simulated process.
      sim: Use NULL instead of None for testing filenames. The filenames are initialized with NULL.  So the test should be checking for them to be == NULL instead == None.
      x86: implements x87 mult/div instructions
      stats: x86: changes due to recent patches
      Added tag stable_2015_04_15 for changeset e17949745150
      x86: change divide-by-zero fault to divide-error Same exception is raised whether division with zero is performed or the quotient is greater than the maximum value that the provided space can hold. Divide-by-Zero is the AMD terminology, while Divide-Error is Intel's.
      cpu: o3: single cycle default div microop latency on x86
      cpu: o3: replace issueLatency with bool pipelined
      ruby: set: replace long by unsigned long UBSan complains about negative value being shifted
      stats: x86: updates due to change in div latency
      stats: arm: updates
      ruby: message: remove a data member added by mistake
      ruby: slicc: remove README
      ruby: remove message buffer node
      ruby: mesi three level: name change to avoid clash The accessor function getDestination() for Destination variable in the coherence message clashes with the getDestination() that is part of the Message class.  Hence the name change.
      ruby: drop NetworkMessage class
      mem: packet: Add const to constructor argument
      o3: correct the number of cc registers in rename map
      stats: update stale config.ini files, eio and few other stats.
      stats: x86: update stats missed out on in preivous changeset
      x86: decode instructions with vex prefix
      stats: x86: updates due to patch on vex
      configs: network test: remove redundant physical memory
      ruby: network: NetworkLink inherits from Consumer now.
      cpu: o3: slight correction to identation in rename_impl.hh
      cpu: implements vector registers
      revert 5af8f40d8f2c
      ruby: correctly number the sequencer in MESI_Three_Level.py
      ruby: mesi two,three level: copy data only when dirty
      ruby: mesi three level: multiple corrections to the protocol
      ruby: slicc: allow mathematical operations on Ticks
      ruby: drop some redundant includes
      sim: clocked object: function for converting cycles to ticks.
      ruby: rename variables Addr to addr
      ruby: replace Address by Addr This patch eliminates the type Address defined by the ruby memory system. This memory system would now use the type Addr that is in use by the rest of the system.
      stats: updates to ruby fs regression test
      ruby: handle llsc accesses through CacheEntry, not CacheMemory
      ruby: drop the [] notation for lookup function.
      ruby: slicc: avoid duplicate code for function argument check Both FuncCallExprAST and MethodCallExprAST had code for checking the arguments with which a function is being called.  The patch does away with this duplication.  Now the code for checking function call arguments resides in the Func class.
      ruby: slicc: use default argument value Before this patch, while one could declare / define a function with default argument values, but the actual function call would require one to specify all the arguments.  This patch changes the check for  function arguments. Now a function call needs to specify arguments that are at least as much as those with default values and at most the total number of arguments taken as input by the function.
      ruby: eliminate type uint64 and int64
      ruby: adds set and way indices to AbstractCacheEntry
      ruby: call setMRU from L1 controllers, not from sequencer Currently the sequencer calls the function setMRU that updates the replacement policy structures with the first level caches.  While functionally this is correct, the problem is that this requires calling findTagInSet() which is an expensive function.  This patch removes the calls to setMRU from the sequencer. All controllers should now update the replacement policy on their own.
      ruby: cache memory: drop {try,test}CacheAccess functions
      ruby: perfect switch: refactor code
      ruby: remove unused functionalRead() function.
      ruby: simple network: store Switch* in PerfectSwitch and Throttle
      ruby: abstract controller: mark some variables as const
      ruby: cache recorder: move check on block size to RubySystem.
      ruby: SubBlock: refactor code
      ruby: remove random seed
      ruby: DataBlock: adds a comment
      ruby: garnet: flexible: refactor flit
      ruby: slicc: remove a stray line in StateMachine.py
      ruby: directory memory: drop unused variable.
      ruby: profiler: provide the number of vnets through ruby system
      ruby: simple network: refactor code
      ruby: add accessor functions to SLICC def of MachineID
      ruby: reverts to changeset: bf82f1f7b040
      ruby: handle llsc accesses through CacheEntry, not CacheMemory
      ruby: eliminate type uint64 and int64 These types are being replaced with uint64_t and int64_t.
      ruby: slicc: avoid duplicate code for function argument check Both FuncCallExprAST and MethodCallExprAST had code for checking the arguments with which a function is being called.  The patch does away with this duplication.  Now the code for checking function call arguments resides in the Func class.
      ruby: garnet: mark few functions const in BaseGarnetNetwork.hh
      ruby: network: drop member m_in_use
      ruby: specify number of vnets for each protocol The default value for number of virtual networks is being removed.  Each protocol should now specify the value it needs.
      stats: updates due to recent changes.
      ruby: directory memory: drop unused variable.
      ruby: remove random seed We no longer use the C library based random number generator: random(). Instead we use the C++ library provided rng.  So setting the random seed for the RubySystem class has no effect.  Hence the variable and the corresponding option are being dropped.
      Added tag stable_2015_09_03 for changeset 60eb3fef9c2d
      merged with recent commits.
      ruby: declare all protocol message buffers as parameters
      ruby: set: reimplement using std::bitset The current Set data structure is slow and therefore is being reimplemented using std::bitset. A maximum limit of 64 is being set on the number of controllers of each type.  This means that for simulating a system with more controllers of a given type, one would need to change the value of the variable NUMBER_BITS_PER_SET
      ruby: adds set and way indices to AbstractCacheEntry
      ruby: call setMRU from L1 controllers, not from sequencer Currently the sequencer calls the function setMRU that updates the replacement policy structures with the first level caches.  While functionally this is correct, the problem is that this requires calling findTagInSet() which is an expensive function.  This patch removes the calls to setMRU from the sequencer. All controllers should now update the replacement policy on their own.
      config: allow ruby to be used with Minor CPU
      ruby: slicc: remove nextLineHack from Type.py
      ruby: simple network: store Switch* in PerfectSwitch and Throttle There are two reasons for doing so:
      ruby: perfect switch: refactor code Refactored the code in operateVnet(), moved partly to a new function operateMessageBuffer().  This is required since a later patch moves to having a wakeup event per MessageBuffer instead of one event for the entire Switch.
      merged with 62e1504b9c64
      ruby: slicc: remove member buffer_expr from Var class This was added by changeset 51f40b101a56.  Instead, buffer_expr would now be associated with the InPort class.
      ruby: topology: refactor code.
      stats: updates due to recent changesets including d0934b57735a
      ruby: sequencer: remove commented out function printProgress()
      ruby: remove unused function removeRequest()
      ruby: message buffer, timer table: significant changes
      stats: slight changes to MOESI_CMP_token.
      stats: updates due to changes to MOESI_hammer
      ruby: slicc: derive DataMember class from Var instead of PairContainer
      ruby: print addresses in hex Changeset 4872dbdea907 replaced Address by Addr, but did not make changes to print statements.  So the addresses which were being printed in hex earlier along with their line address, were now being printed in decimals.  This patch adds a function printAddress(Addr) that can be used to print the address in hex along with the lines address.  This function has been put to use in some of the places.  At other places, change has been made to print just the address in hex.
      ruby: garnet: mark some variables as const
      ruby: abstract controller: mark some variables as const
      ruby: bloom filters:  refactor code
      ruby: garnet: refactor code in network links
      ruby: simple network: refactor code
      ruby: garnet: flexible: refactor flit
      ruby: remove unused functionalRead() function.
      ruby: profiler: provide the number of vnets through ruby system
      configs: fix bug introduced due to 276ad9121192
      o3: drop unused statistic wbPenalized and wbPenalizedRate
      stats: remove wb_penalized and wb_penalized_rate
      stats: updates due to recent chagnesets
      Merged changesets: 47e2adf7fb1a and b65d4e878ed2

Giacomo Travaglini <giacomo.travaglini@arm.com> (430):
      base: Defining make_unique for C++11
      base: Function for mirroring bits in variable length word
      arch-arm: RBIT instruction using mirroring func
      base: Introducing utility for writing raw data in png format
      vnc: Default image writer type set to Auto
      dev: Using Configurable image writer in HDLcd
      arch-arm: Corrected encoding for T32 HVC instruction
      arch-arm: Interface for the ArmStaticInst intWidth field
      arm: Add support for armv8 CRC32 instructions
      arch-arm: Removing FlushPipe fault, using SquashAfter
      arch-arm: Writes to DCCMVAC shouldn't flush pipeline
      arch-arm: Dsb instruction shouldn't flush the pipeline
      arch-arm: Fix MSR/MRS disassemble
      arch-arm: Fix MCR/MRC disassemble
      scons: Build error introduced by site_tools/default.py
      arch-arm: HVC instruction undefined in secure EL1
      arch-arm: Add assertions when extracting an ArmSystem from a TC
      arch-arm: Add haveEL pseudocode function
      arm: Enable ns registers access in secure mode
      arm: Change access permission in TPIDRURO and TPIDRURW
      arch-arm: Change casting type from reinterpret to static
      arch-arm: Instruction size methods in StaticInst class
      arch-arm: Fix StaticInst encoding() method
      arch-arm: Hyp routed undef fault need to change its syndrome
      arch-arm: Fixed WFE/WFI trapping behaviour
      arch-arm: Removing Serializing flag from ISB
      cpu: MinorCPU handling IsSquashAfter flag
      arch-arm: isSecureBelow from armarm pseudocode
      arch-arm: ELUsingAArch32K from armarm pseudocode
      arch-arm: Correct Illegal Exception Return detection
      arch-arm: Fix AArch32 SETEND Instruction
      arch-arm: Change function name for banked miscregs
      arch-arm: Don't change PSTATE in Illegal Exception return
      arch-arm: Correct SecureMonitorTrap vals for aarch32
      sim: Remove _numContexts member in System class
      arch-arm: Change ArmFault cast from reinterpret to static
      arch-arm: Arch regs and pseudo regs distinction
      arch-arm: IMPLEMENTATION DEFINED register
      arch-arm: Semihosting not available in syscall emulation
      arch-arm: Fix Hlt64,Svc64,Hvc64,Smc64,Brk64 disassembly
      arch-arm: HLT using immediate when checking for semihosting
      arch-arm: Adding isa templates for semihosting ops
      arch-arm: Add AArch32 SVC Semihosting interface
      arch-arm: Add AArch32 HLT Semihosting interface
      arch-arm: Make hlt64 a mem barrier with semihosting
      arch-arm: Fix PCAlignmentFault routing to Hypervisor
      arch-arm: Introduce update method in ArmFault class
      arch-arm: Fix FSC generation in AbortFault
      arch-arm: Enable Debug IFSC when faulting to aarch64 mode
      tests: Python regression scripts using new print function
      arch-arm: Implement missing aarch32 TLBI registers
      arch-arm: Adding IPA-Based Invalidating instructions
      arch-arm: ERET from AArch64 to AArch32 ignore MSBs
      tests: Add missing print replacements in tests subdir
      arch-arm: Created function for TLB ASID Invalidation
      arch-arm: Distinguish IS TLBI from non-IS
      arch-arm: Correct mcrr,mrrc disassemble
      arch-arm: Fix secure write of SCTLR when EL3 is AArch64
      arch-arm: Fix AArch32 branch instructions disassemble
      arch-arm: Add support for Tarmac trace-based simulation
      arch-arm: Add support for Tarmac trace generation
      arch-arm: Fix mrc,mcr to cop14 disassemble
      arch-arm: Fix secure MiscReg access when EL3 is not AArch32
      arch-arm: Using explicit invalidation in TLB
      arch-arm: Adding MiscReg Priv (EL1) global flag
      arch-arm: Change disassemble when MSR to UNKNOWN register
      arch-arm: Fix Unknown Instruction disassemble
      arch-arm: Add ARMv8.1 TTBR1_EL2 register
      sim,cpu,mem,arch: Introduced MasterInfo data structure
      scons: Fix --with-ubsan/asan compilation flags
      arch-arm: Map ID_x_EL1 registers to AArch32 version
      sim: Remove trailing dot when assigning a master's name
      arch-arm: Add E2H bit to HCR_EL2 System register
      arch-arm: Implement ARMv8.1 TTBR1_EL2 register
      cpu: Avoid unnecessary dynamic_pointer_cast in atomic model
      arch-arm: S3_<op1>_<Cn>_<Cm>_<op2> are Implementation defined
      arch-arm: MPIDR.MT = 1 in a multithreaded system
      arch-arm: Remove unusued MISCREG_A64_UNIMPL
      arch-arm: ISA param for treating MISCREG_IMPDEF_UNIMPL as NOP
      misc: Substitute pointer to Request with aliased RequestPtr
      misc: Using smart pointers for memory Requests
      arch-arm: Fix missing Request allocation
      arch-arm: Read APSR in User Mode
      arch-arm: Add Illegal Execution flag to PCState
      arch-arm: Adapting IllegalExecution fault for AArch32
      cpu: Fix bug introduced by RequestPtr type change
      arch-arm: BadMode checking if corresponding EL is implemented
      arch-arm: AArch32 execution triggering AArch64 SW Break
      base: Add an asymmetrical Coroutine class
      arch-arm: Introduce RAS System Registers
      arch-arm: Introduce ARMv8.1 Virtual Timer System Registers
      cpu: Allow creation of traffic gen from generic SimObjects
      cpu: Warn when (un)serializing a traffic generator
      base: Fix ucontext compilation error for macOS
      cpu: Stream/SubstreamID support in TrafficGen
      sim: Add System method for MasterID lookup
      mem: Implement base QoS Policies.
      dev-arm: Create a getter for ArmInterruptPin ID number
      dev-arm: Factory SimObject for generating ArmInterruptPin
      dev-arm: Make GenericTimer use standard ArmInterruptPin
      mem: Implement QoS Proportional Fair policy
      arch-arm: raise/clear IRQ when writing to PMOVSCLR/SET
      dev-arm: Take into account PPI enable bit
      dev-arm: Make CpuLocalTimer use standard ArmInterruptPin
      sim: Extend (UN)SERIALIZE_ARRAY to BitUnions
      dev-arm: Fix GICv2 cpu interrupt enable flag
      dev-arm: Implement GICv2 GICD_IGROUPR register
      dev-arm: Create postFiq events for GICv2
      dev-arm: Enable FIQ signaling for Group0 interrupts in GICv2
      cpu: Fix typo in header guard for Noncaching cpu
      arch-arm: Init AArch64 ID registers in SE mode
      arch-arm: Move MiscReg BitUnions into a separate header file
      arch-arm: Implement AArch64 ID_AA64MMFR2_EL1 register
      arch-arm: Implement AArch64 ID regs as bitunions
      sim-se: Different HWCAP for ArmProcess32/64
      sim-se: Set ArmProcess64 hwcaps depending on ID regs
      arch-arm: AArch64 Crypto SHA
      arch-arm: AArch64 Crypto AES
      cpu: Fix MinorCPU executing Crypto Instructions
      arch-arm: Add have_crypto System parameter
      arch-arm: CPTR_EL3.TCPAC traps EL2 accesses to CPACR_EL1
      arch-arm: Fix HVC trapping beahviour
      arch-arm: Trap to EL2 only if not in Secure State
      arch-arm: Refactor AArch64 MSR/MRS trapping
      arch-arm: AArch64 Instruction for MISCREG_IMPDEF_UNIMPL
      arch-arm: IMPDEF for SYS instruction with CRn = {11, 15}
      arch-arm: Remove MISCREG commented numbers
      arch-arm: Refactor ISA::clear by adding a ISA::clear32 method
      arch-arm: Remove SCTLR.VE bit
      arch-arm: Implement AArch32 RVBAR
      arch-arm: ArmSystem::resetAddr64 renamed to be used in AArch32
      arch-arm: Deprecate usage of legacy bootloader patching
      systemc: Push python headers on top of sources
      sim: Move paramIn/Out definition to header file
      sim: Move BitUnion overloading to show/parseParams
      arch-arm: Print register name when warning on AT instructions
      tests: Convert IniFile unit test to a GTest
      ext: Import googlemock, release version 1.8.0
      ext: Build googlemock with googletest
      mem: Compile tracePacket only when TRACING_ON is defined
      base, systemc: Fix clang compilation
      arch-arm: Add Crypto in SE mode
      dev-arm: Move VGic from Realview.py to Gic.py
      dev-arm: Implement GIC-400 model from GicV2
      base: Make it possible to convert strings to enums
      arch-arm: Fix usage of RegId constructor for VecElem
      cpu: Fix usage of setArchVecElem
      arch-arm: Read VMPIDR instead of MPIDR when EL2 is Enabled
      arch-arm: Move AArch32 IMPLEMENTATION DEFINED registers
      arch-arm: Remove SWP and SWPB instructions
      arch-arm: IsStoreConditional flag set depending on flavor
      arch-arm: Implement LoadAcquire/StoreRelease in AArch32
      arch: Provide traceback when parsing ISA code
      arch-arm: Remove unused float operands
      cpu: Add VecElem entries in MinorCPU Scoreboard
      cpu: Fix VecElemClass bugs in cpu models
      arch-arm: Inital vector rename mode depending on A32/A64
      cpu: O3 rename using the flatIndex instead of index
      cpu, arch, arch-arm: Wire unused VecElem code in the O3 model
      arch: Fix VecElem Operand generation in ISA parser
      arch-arm: Use VecElem instead of FloatReg for FP instruction
      arch-arm: Remove floatReg operand type
      arch-arm, configs: Create single instance of DTB autogeneration
      configs: Enable DTB autogeneration in starter_fs.py
      configs: Unifiy interpretation of Realview mem_regions
      configs, arch-arm: Using AddrRange for Realview mem_regions
      arch-arm: Allow ArmPPI usage for PMU
      arch-arm: Fix extra comma in b7ce897f1e9545785bde982f72d04830c19d9a30
      arch-arm: Fix Virtual interrupts in AArch64
      configs: simpoint-profile usable with NonCachingCPUs only
      cpu: Fix fast build broken due to unused variable
      base: Fix enums checkpointing
      arch-arm: Move GICv3 detection at startup time
      dev-arm: Set ICV_IGRPEN<n>_EL1-ICH_VMCR_EL2 mapping on reads
      dev-arm: Set ICV_PMR_EL1-ICH_VMCR_EL2 mapping on reads
      base: Fix CircularQueue when diffing iterators
      base: Fix CircularQueue's operator-= when negative subtraction
      dev-arm: Set/Unset dma coherent mode from python
      dev-arm: Writing ICENABLER for non-SPIs is RAZ/WI (or RES0)
      dev-arm: Fix GICv3 overflow for INTID > 256
      dev-arm: Rename GIC maintenance interrupt from ppint to maint_int
      arch-arm: Fix index generation for VecElem operands
      dev-arm: Make GICv3 maintenance interrupt an ArmInterrupt
      cpu: O3 switchFreeList checking VecElems instead of FloatRegs
      arch-arm: Enable PMSELR_EL0 read in PMU
      dev-arm: Check for maximum number of supported PE in GICv3
      dev-arm: Add GICv4 extension switch in GICv3
      dev-arm: Limit number of max PE in GICv3 to 128
      dev-arm: Move GICv3 (Re)Ditributor address in Realview.py
      arch-arm: Correct target EL field in TLBI operations
      arch-arm: Remove un-needed hyp flag in TLBI operations
      arch-arm: updateMiscReg not setting isHyp in aarch64
      arch-arm: Report real instruction encoding when Undefined
      arch-arm: Faults DebugFlag now printing inst opcode if available
      dev-arm: Fix Bitwise operation in GICv3
      dev-arm: Fix GICv3 LPI loop
      dev-arm: GICv3 LPI tables are using physical addresses
      dev-arm: Check EnableLPIs before checking for pending LPIs
      dev-arm: Disable LPI Configuration Table caching
      dev-arm: Fix GICv3 LPIs priority value
      dev-arm: Take LPIs into account when interacting with CPUIF regs
      dev-arm: Add several LPI methods in Gicv3Redistributor
      dev-arm: Get a Gicv3Redistributor ptr from phys address
      dev-arm: Read correct version of ICC_BPR register
      dev-arm: Add named variable for GICD_TYPER.IDBits
      dev-arm: Store a PhysProxy port in Gicv3Redist
      dev: StreamID generation in DMA device
      Revert "cpu: fix branching when thread is suspended in MinorCPU"
      Revert "cpu: stop scheduling suspended threads in MinorCPU"
      Revert "cpu: fix how a thread starts up in MinorCPU"
      dev-arm: Provide a GICv3 ITS Implementation
      arch-arm: Change mcrMrc15TrapToHyp signature
      arch-arm: Expose haveGicv3CPUInterface to the ISA interface
      arch-arm: Trap virtual accesses to GICv3 SGI registers
      arch-arm: Fix fallthrough when trapping at EL2
      arch-arm: Fix WalkerState,Descriptors default constructor
      base: Rename TestFiber into SwitchingFiber
      base: Provide a getter for Fiber::started boolean variable
      dev-arm: Reapply GICv3 changes that were lost during refactoring
      arch-arm: Move the memacc_code before op_wb in fp loads
      configs: Fix NULL dram-lowp regressions
      dev-arm: Remove un-needed Q_CONS_PROD_MASK macro
      dev-arm: Use global import path for MemObject
      cpu: isDrained renamed to isCpuDrained
      dev-arm: Fix SMMUv3 ContextDescriptor pointer shift
      arch-arm: Use ExceptionLevel type in TlbEntry
      arch-arm: Clean Fault generation when processing Long Descriptor
      arch-arm: Add HPD bit for TCR_EL2/EL3
      arch-arm: Implement ARMv8.1-HPD, Hierarchical permission disable
      dev-arm: Use override keyword for SMMUv3 PTOPS
      dev-arm: SMMUv3 Table walks using TnSZ
      dev-arm: TnSZ fields need to be cached in SMMUv3::ConfigCache
      dev-arm: Define enum masks for SMMU_CR0 register
      dev-arm: Polish SMMUv3 CMDQ setup
      dev-arm: Fix SMMUv3 CMDQ wrapping
      dev-arm: Rewrite SMMUv3 Commands
      arch-arm: Rewrite MSR immediate instruction class
      arch-arm: Implement ARMv8.1-PAN, Privileged access never
      dev-arm: Perform SMMUv3 CFG Invalidation at device interface
      python: FdtState using interrupt-cells
      dev-arm: Use FdtState to generate GIC properites
      dev-arm: Fix PCI node's interrupt-map property
      dev-arm: Enable DTB autogeneration in GICv3
      dev-arm: Add Gicv3Distributor members for GICv3 GICD_PIDRx
      dev-arm: Add GITS_PIDR2 register to the ITS memory map
      arch-arm: Rewrite the currEL helper method to use opModeToEL
      arch-arm: Overload currEL helper with CPSR argument
      arch-arm: Replace direct use cpsr.el with currEL helper
      arch-arm: Replace occ of opModeToEL(currOpMode/cpsr) with currEL
      dev-arm: Add redistributor-stride property to GICv3
      dev-arm: Allow 32 bit accesses to GITS_C(WRITER/READR/BASER)
      dev-arm: Start using GITS_CTLR.quiescent bit
      dev-arm: Fix GITS_BASER initialization/access
      dev-arm: Fix GICv3 ITS indexing error
      arm,kvm: Fix python imports from global namespace
      dev-arm: Improper translation slot release in SMMUv3
      dev-arm: Fix SGI generation
      arch-arm: Fix read/setMiscReg for AArch32 GICv3 ICC regs
      arch-arm: SGI registers undecoded in AArch32
      dev-arm: Fix GICv3 IGRPMOD writes
      dev-arm: Rewrite GICv3 update
      dev-arm: Writing GICD_CTLR should trigger an update
      dev-arm: Check if INTID group is enabled when reading HPPIRx
      dev-arm: Cpu interface groupEnabled check for global enable
      dev-arm: Allow 32-bit access to GITS_TYPER
      dev-arm: Add GICv3 unimplemented Hyp Active Priorities Group regs
      dev-arm: Rewrite ICC_BPR0/ICC_BPR1 handling
      arch-arm: SySDC64 Instructions (CMO) using MiscRegIndex
      arch-arm: Use same template across all MSR inst
      arch-arm: Add explicit AArch64 MiscReg banking
      dev-arm: Add read/writeBanked helpers to GICv3
      arch-arm: MISCREG_ICC_BPR1_EL1 using AA64 banking
      arch-arm, dev-arm: MISCREG_ICC_CTLR_EL1 using AA64 banking
      arch-arm, dev-arm: MISCREG_ICC_AP1R0_EL1 using AA64 banking
      arch-arm, dev-arm: MISCREG_ICC_IGRPEN1_EL1 using AA64 banking
      dev-arm: State update when setting MISCREG_ICC_IGRPENx register
      dev: Enable Terminal output's dump to stdout
      dev-arm: Add GICD_SGIR register
      dev-arm: Implement message-based SPIs
      dev-arm: Fix mapping between IGRPEN1_EL3 and IGRPEN1_EL1
      dev-arm: Fix GICv3 ITS cmdq wrapping
      dev-arm: Writes to IGRPEN1_EL3 triggering update
      dev-arm: Initialize GICD_TYPER once at construction time
      dev-arm: Cleanup GICv3 initialization
      dev-arm: Add resetHppi method in the GICv3 cpu interface
      dev-arm: Reset HPPI when clearing an LPI
      dev: Enable DTB IOMMU binding with a DMA object
      dev-arm: Store the IOMMU reference from within the SMMU::connect
      dev-arm: Allow IOMMU binding to HDLcd
      arch-arm: PSTATE.PAN affecting EL2 only when HCR_EL2.E2H=1
      arch-arm: ISV bit in DataAbort should check for translation stage
      arch-arm: Fix Data Abort ISS when caused by Atomic operation
      arch-arm: PSTATE.PAN changes should inval cached regs in TLB
      dev-arm: Add HDLcd DTB autogeneration
      dev-arm: Conditionally enable HDLcd when doing DTB autogen
      arch-arm: Create helper for sending events (SEV)
      sim: Mark System::getThreadContext method as const
      arch-arm: Set CM bit in DataAbort
      arch-arm: Annotate CM flag in AA64 CM Instructions
      dev-arm, configs: Remove RealViewPBX platform
      arch-arm: Move generateDtb to ArmSystem
      configs: Add simpleSystem helper to generate devices.SimpleSystem
      dev-arm: Carve out a portion of VExpress_GEM5 for the bootloader
      base: Fix gem5.fast compilation
      base: Using scoped string in DPRINTFNR
      dev-arm, configs: Using _on_chip_memory for on chip memory
      configs: Do not assume bootmem is a System child
      configs: Clean setupBootLoader signature
      base: Name segments after their index
      configs: Add baremetal.py example script
      dev-arm: Add SMMUv3 to VExpress_GEM5_V*
      arch-arm: Annotate original address in CMOs
      arch-arm: Provide SVE support to the TarmacTracer
      arch-arm: Fix TarmacParser handling of 64bit LD/ST
      tests: Remove Noncoherent cache from regressions
      tests: Using super for calling superclass __init__
      tests: Using super in arm_generic whenever possible
      tests: Specify a non-default root folder for regressions
      arch-arm: Fix long descriptors cacheability during table walks
      arch-arm: Fix short descriptors cacheability during table walks
      base: Remove tests making use of Big/LittleEndianOrder Namespace
      dev-arm: Adjust off_chip ranges in VExpress_GEM5 platform
      arch-arm: Make the Tarmac parsed registers case insensitive
      configs: Fix baremetal platform
      sim-se: Check Path redirection when mmapping
      configs: Add root redirect path in SE mode only when set
      base: Fix DPRINTF_UNCONDITIONAL on gem5.fast
      configs: Add --redirects for syscall emulation
      base, python: Allow dirname selection for the interpreter
      sim-se: Avoid function overloading for syscall implementation
      mem: Add byteEnable copy to Request copy constructor
      mem: Add Request::isMasked to check for byte strobing
      tests: AArch64 Linux as quick regressions (instead of AArch32)
      arch-arm: Replace NumFloatV8ArchRegs with NumVecV8ArchRegs
      arch-arm: Reorder arch/arm/registers.hh constants
      arch-arm: Fix NumVecV7ArchRegs value (64->16)
      arch-arm: Unify VLdmStm behaviour when reg out of index
      arch-arm: Disambuiguate NumFloatV7ArchRegs usage
      cpu: Add byteEnable assertions to readMem and initateMemRead
      cpu: Fix coding style (byteEnable->byte_enable)
      cpu: Replace empty byteEnable check with Request::isMasked
      arch-arm: Avoid creating an empty byteEnable vector
      arch-arm: Always initialize SVE memData
      configs: arm realview(64) regressions using VExpress_GEM5_V1
      tests: Always print stderr in gem5 Fixtures
      dev-arm: Fix SMMUv3 16KB next-level table address masking
      system-arm: Rename ARM bootloader directories
      system-arm: Rename ARM bootloader source
      system-arm: GICv2/GICv3 have different Distributor addresses
      base: Move AtomicOpFunctors to a dedicated header
      arch, base: Move arm AtomicOpFunctor into the generic header
      base, gpu-compute: Move gpu AMOs into the generic header
      tests: fs/linux/arm passing M5_PATH via commandline
      tests: Adding --bin-path option to select tests bin directory
      tests: Add a timeout to getremotetime
      tests: Fix python line break in m5_exit test
      arch-arm: Split translateFs to distinguish when MMU is on/off
      tests: Move old quick regressions back into their original set
      arch-arm: LDTRSW was not marked as unpriviledged
      configs: Using VExpress_GEM5_V1 as a default for Options.py
      tests: Add --host tag
      tests: hello_se using host tag
      tests,misc: update TESTING.md documentation
      ext: Add failure node to JUnit xml file
      cpu: Mark ExecContext::tcBase() as const
      arch-arm: Fix ArmKVM build
      base: Use a int to store fgetc return value
      arch-arm: Be more verbose on load/store construction
      arch, arch-arm: Use BaseISA in RenameMode interface
      cpu: Fix vector renaming bug
      dev-arm: Fix setupBootloader for VExpress_GEM5_V2
      learning-gem5: Use zero initialization in hello_goodbye test
      tests: simple_ruby_test's valid_host is X86 only
      arch-arm: Remove unused getArmSystem helper
      python: The new module has been removed in python3
      misc: string.join has been removed in python3
      misc: Replace __metaclass__ with six.add_metaclass
      misc: Replace basestring with six.string_types
      arch-arm: python3 "/" will always produce a float
      arch-arm: Speedup ARM execution by avoiding expensive RTTI check
      arch-arm: Hint the compiler to inline getArmSystem
      arch-arm: Remove unnecessary RegIndex set for VSTR VFP inst
      arch-arm: Fix Arch detection in FS if there is not bootloader
      misc: Views and Iterators instead of Lists in python3
      scons: file removed from python3
      misc: Text vs Byte string in python3
      misc: Make exception handling python3 compliant
      arch: Bring closure out of p_global_let
      arch: Convert exec keyword to exec() function
      dev-arm: Fix VExpressFastmodel.py indentation
      arch: list.sort() sorting by key only in python3
      tests: Use relative path for python3 compliance
      arch-x86: Fix imports for Python 3 compatibility
      arch-x86: Add Python 3 workarounds for long
      power: Fix regStats for PowerModel and PowerModelState
      arch-arm: Fix ArmSystem::_resetAddr evalutation
      tests: Add --bin-path option to insttest regressions
      dev-arm: Add flash1 memory to VExpress_GEM5 platform
      arch-arm: Fix aapcs32/aapcs64 compilation issues
      arch-arm: Make load_addr_mask=0 for ArmFsLinux only
      configs: Make --disk-image optional in baremetal.py
      configs: Enable Semihosting for baremetal.py
      configs: Initialize atags_addr in baremetal.py
      configs: Use ArmFsWorkload for Arm baremetal
      dev-arm: Don't use args and kwargs on attachIO
      dev-arm: Fix pci_mem_base setting in VExpress_GEM5_Base
      configs: Enabling SimObj CLI for baremetal platform
      arch-arm: CNTHCTL trap to EL2 only if ARMv8.6-ECV implemented
      arch-arm: Handle empty object_file scenario in ArmFsWorkload
      dev-arm: Fix checkpointing for the GenericTimer
      tests: Reduce checkpoint interval used by realview regressions
      tests: Fail checkpoint regressions if no cpt has been taken
      arch-arm: Remove unnecessary haveGICv3CPUInterface
      arch, cpu: Add a takeOverFrom method for switching ISAs
      arch-arm: Override ISA::takeOverFrom for the Arm ISA
      tests: Run realview(64) tests with VExpress_GEM5_Foundation
      arch-sparc: MAP_32BIT does not exist on solaris
      configs: Add --semi-path option to baremetal.py
      configs: Add --machine-type option to baremetal.py
      configs: Add an example workloads module
      configs: Produce list of workload types in workloads.py
      configs: Use workloads.py in baremetal.py
      arch-arm: Do not increment exponent if FPSCR.FZ in fplib
      arch-arm: SVE instructions do not use AHP format
      sim, arch-arm: Restore capability of running without a kernel
      configs: Do not require args.kernel to be set in baremetal.py
      util: Port git hooks to python3
      util: Make cpt_upgraders python3 compatible
      python: Manually convert float to int when using %x
      scons: Add readCommandWithReturn helper

Daniel Carvalho <odanrc@yahoo.com.br> (226):
      mem: Standardize mem folder header guards
      mem-cache: Remove extra numSets zero check.
      mem-cache: Make cache warmup percentage a parameter.
      mem-cache: Fix CacheSet memory leak
      mem-cache: Vectorize C arrays in BaseSetAssoc.
      mem-cache: Remove extra block init in BaseSetAssoc
      mem-cache: Use findBlock() in accessBlock()
      mem-cache: Fix bug generated by 8282
      mem-cache: Use CacheBlk parameter on address regeneration
      mem-cache: Split array indexing and replacement policies.
      mem-cache: Create MRU replacement policy
      mem-cache: Fix MRU rebase
      mem-cache: Create FIFO replacement policy
      mem-cache: Create BRRIP replacement policy
      mem-cache: Create RRIP Replacement Policy
      mem-cache: Create LFU replacement policy
      mem-cache: Fix FALRU data block seg fault
      mem-cache: Use Packet functions to write data blocks
      mem-cache: Create BIP Replacement Policy
      mem-cache: Create LIP Replacement Policy
      mem-cache: Move insertBlock functionality in FALRU
      mem: Remove unused 'using namespace'
      mem-cache: Add MoveToTail to FALRU
      mem-cache: Create NRU Replacement Policy
      mem-cache: Use secure flag in FALRU's findBlock
      mem-cache: Use findBlock in FALRU's block access
      mem-cache: Use block iteration in BaseSetAssoc
      mem-cache: ReplacementPolicy specific replacement data
      mem-cache: Create Second-Chance replacement policy
      mem-cache: Create block insertion function
      mem-cache: Fix RandomReplData
      mem-cache: Fix secure bit modification
      mem-cache: Create an address aware TempCacheBlk
      mem-cache: Privatize extractSet
      mem-cache: Use ReplaceableEntry in findBlockBySetAndWay
      mem-cache: Return evictions along with victims
      mem-cache: Move tagsInUse to children
      mem-cache: Use secure bit in findVictim
      mem-cache: Change Cache block tag check
      ruby: Fix initial weight in weighted LRU
      mem-cache: Create Sector Cache
      mem-cache: Make packet const in insertBlock
      mem-cache: Insert on block allocation
      mem-cache: Forward declare ReplaceableEntry
      mem-cache: Initialize CacheBlk data pointer
      mem-cache: Create Skewed Assoc placement policy
      mem-cache: Fix non-bijective function in Skewed caches
      mem-cache: Fix FALRU inCachesMask initialization
      mem-cache: Make boundaries in FALRU an STL container
      mem-cache: Make checking function const in FALRU
      mem-cache: Fix FALRU hash invalidation
      configs: Fix CPUClass typo in se.py
      mem-cache: Remove Packet dependency in Tags
      mem-cache: Create tags initialization function
      mem-cache: Use possible locations to find block
      mem-cache: Use set and way for ReplaceableEntry
      mem-cache: Split Tags for indexing policies
      mem-cache: Remove CacheSet.hh
      mem-cache: Create Tree-PLRU replacement policy
      mem-cache: Virtualize block print
      mem-cache: Rename blk.cc/hh to cache_blk.cc/hh
      mem-cache: Move sector_blks to tags folder
      mem-cache: Factor ReplaceableEntry out
      mem-cache: Add missing includes in TreePLRU
      mem-cache: Move evictBlock(CacheBlk*, PacketList&) to base
      mem-cache: Fix double block invalidation
      mem: Use Packet writing functions instead of memcpy
      mem-ruby: Use Packet writing functions instead of memcpy
      configs: Add missing path to ruby imports
      mem-cache: Move access latency calculation to Cache
      mem-cache: Remove Cache dependency from Tags
      mem-cache: Cleanup prefetchers
      mem-cache: Return entry in StridePrefetcher::pcTableHit()
      mem-cache: Vectorize StridePrefetcher's entries.
      mem-cache: Make PCTable context independent
      mem-cache: Add invalidation function to StrideEntry
      mem-cache: Make StridePrefetcher use Replacement Policies
      mem-cache: Add setters to validate and secure block
      mem-cache: Optimize sector valid and secure check
      mem-cache: Add getter and setter to CacheBlk::whenReady
      mem-cache: Remove writebacks parameter from serviceMSHRTargets
      mem-cache: Workaround for setWhenReady assertion
      base: Fix unitialized storage
      mem-cache: Remove old todo about latency in hit function
      mem-cache: Use header delay on latency calculation
      mem-cache: Fix recvTimingReq doWritebacks tick
      mem-cache: Add lookup latency to access' whenReady
      mem-cache: Allow tag-only accesses on latency calculation
      mem-cache: Add header delay to handleFill whenReady
      mem-cache: Revert "mem-cache: Remove Packet dependency in Tags"
      sim: Add size to array unserialization error message
      python: Fix unknown params and proxy multiplication
      mem-cache: Fix write hit latency calculation order
      configs: Remove default kernel value from system creation
      mem-cache: Remove extra cache header from AMAP
      mem: Allow packet to provide its own addr range
      mem: Make DRAMCtrl::decodeAddr const
      mem-cache: Assert Entry inherits from QueueEntry in Queue
      mem-cache: Move Target to QueueEntry
      mem: Add packet matching functions
      mem-cache: Add match functions to QueueEntry
      mem-cache: Remove blk_addr from Queue::trySatisfyFunctional
      mem-cache: Fix increasing replacement count
      mem-cache: Fix fix of replacement count
      tests: Add missing kernels to system creation
      mem-cache: Stub compression framework
      mem-cache: Create CacheComp debug flag
      mem-cache: Add compression data to CompressionBlk
      mem-cache: Add block size to findVictim
      mem-cache: Create cache compressor
      mem-cache: Add compression stats
      mem-cache: Create BDI Compressor
      mem-cache: Add compression and decompression calls
      mem-cache: Add co-allocation function to compressed tags
      mem-cache: Handle data expansion
      mem-cache: Remove writebacks packet list
      tests: Fix import scope of test
      configs: Fix FileSystemConfig import
      mem-ruby: Replace string parameter in MultiBitSelBloomFilter
      cpu: Revamp saturating counters
      base: Move SatCounter to base directory
      base: Add GTest to SatCounter
      base: Add operators to SatCounter
      mem-cache: Use SatCounter for prefetchers
      Revert "mem-cache: Remove writebacks packet list"
      base: Fix missing headers to CircularQueue
      mem-ruby: Bloom filters - Remove in/decrement
      mem-ruby: Standardize Bloom Filter deletion support
      mem-ruby: Remove Bloom Filter's print()
      mem-ruby: Remove index based functions in bloom filters
      mem-ruby: Fix MultiGrainBloomFilter total count calculation
      mem-ruby: Cleanup filters
      mem-ruby: Generalize use of bloom filters' isSet
      mem-ruby: Make Bloom Filters SimObjects
      mem-ruby: Parameterize block size in Bloom Filters
      mem-ruby: Remove Bloom Filters' ruby dependency
      mem-ruby: Fix MultiGrainBloomFilter accessing
      mem-cache: Create CPack compressor
      mem-cache: Fix set and way of sub-entries
      mem: Encapsulate retry variables of SnoopFilter
      mem: Move eraseIfNullEntry to when holder is updated
      mem-cache: Fix non-virtual base destructor of Repl Entry
      mem-ruby: Parameterize xor bits in BlockBloomFilter
      mem-ruby: Make MultiGrainBloomFilter generic
      mem-ruby: Remove NonCountingBloomFilter
      mem-ruby: Finish implementing BloomFilter merge
      mem-ruby: Make H3 inherit from MultiBitSelBloomFilter
      mem-ruby: Define BloomFilter namespace
      base: Add function to saturate SatCounter
      mem-cache: Use SatCounter for RRPV
      configs: Fix replacement policy assignment
      mem-ruby: Move Bloom Filters to base
      base: Make Bulk inherit from MultiBitSel Bloom Filter
      base: Make Bloom Filter counting by default
      base: Add a perfect bloom filter
      mem-cache: Fix BDI size calculation
      mem-ruby: Remove bitRemove
      mem-ruby: Remove maskHighOrderBits
      mem-ruby: Remove shiftLowOrderBits
      mem-ruby: Fix maskLowOrderBits
      mem-ruby: Make bitSelect use bits<Addr>
      mem-ruby: Remove inexistent functions from Util
      configs: Remove is_atomic_cpu check
      configs: Create a basic ObjectList
      configs: Port CPUConfig to use the common object list
      configs: Port BPConfig to use the common object list
      configs: Port HWPConfig to the common object list
      configs: Port MemConfig to the common object list
      configs: Port PlatformConfig to the common object list
      mem-cache: Fix invalid whenReady
      configs: Isolate ISA related object lists
      configs: Fix undefined BaseCPU
      mem-cache: Do not try to compress dataless packets
      mem-cache: Limit compression size
      mem-cache: Use shouldAllocate() instead of CPack's decompress()
      mem-cache: Factor out CPack's dictionary functionality
      mem-cache: Templatize DictionaryCompressor
      mem-cache: Add an uncompressed pattern to compressors
      mem-cache: Add a masked pattern to compressors
      mem-cache: Add a masked const value pattern to compressors
      mem-cache: Inform unused bits instead of bytes in compressor pattern
      mem-cache: Add a repeated value pattern to compressors
      mem-cache: Fix missing header in associative set
      mem-cache: Implement FPC-D cache compression
      mem-cache: Implement a zero compressor
      mem-cache: Implement a repeated values compressor
      mem-cache: Implement BDI sub-compressors
      mem-cache: Implement a multi compressor
      mem-cache: Make BDI a multi compressor
      mem-cache: Implement a perfect compressor
      mem-cache: Modify compressor to appease newer compilers
      util: Add a git commit-msg hook
      mem-cache: Move unused prefetches counter update
      mem: Encapsulate mapping gem5 to host address space
      base: Fix negative op-assign of SatCounter
      mem-garnet: Use smart pointers for CrossbarSwitch's members
      mem-cache: Factor out multiple block eviction
      mem-cache: Add more compression stats
      mem-cache: Make findVictim non-const
      mem-cache: Add multiple eviction stats
      mem-cache: Add getter for the number of valid sub-blks
      mem-cache: Add print function to ReplaceableEntry
      mem-cache: Fix invalidation of prefetchers
      mem-cache,mem-ruby: Move WeightedLRU RP
      base: Fix squares of stats
      configs: Fix relative import in non-package in configs
      base: Add static assert to trie
      mem-garnet: Remove delete of param pointers of GarnetNetwork
      mem-garnet: Remove delete of param pointers of SimpleNetwork
      mem-garnet: Use static allocation in VirtualChannel
      mem-garnet: Use static allocation in OutputUnit
      mem-garnet: Use static allocation in InputUnit
      mem-garnet: Use static allocation in NetworkInterface
      mem-garnet: Use static allocation in NetworkLink
      mem-garnet: Use static allocation in Switch
      mem-garnet: Use smart pointers in Router's members
      mem-garnet: Use static allocation in CrossbarSwitch
      base: Fix undefined behavior in mask generation
      mem-cache: Create Prefetcher namespace
      mem-cache: Fix priority of multi compressor
      mem-cache: Fix DCPT with CircularQueue
      mem-cache: Use CircularQueue for the STeMS's RMOB
      mem-cache: Use CircularQueue in PIF prefetcher
      mem-cache: Cleanup of SBOOE prefetcher
      mem-cache: Use SatCounter in Stride prefetcher
      mem-cache: Use AssociativeSet in Stride prefetcher

Nikos Nikoleris <nikos.nikoleris@arm.com> (211):
      x86, kvm: Fix bug in the RFlags get and set functions
      cpu: fix RetiredStores probe point
      cpu: commit probe notification on every microop or macroop The ppCommit should notify the attached listener every time the cpu commits a microop or non microcoded insturction. The listener can then decide whether it will process only the last microop (eg. SimPoint probe).
      cpu: fix system total instructions accounting
      dev: (un)serialize fix for the RTC and RTC Timer Interrupt events
      x86: Adjust the size of the values written to the x87 misc registers All x87 misc registers are implemented in an array of 64 bit values but in real hardware the size of some of these registers is smaller. Previsouly all 64 bits where incorrectly set and then later read.  To ensure correctness we mask the value in setMiscRegNoEffect to write only the valid bits.
      mem: fix the line length in the cache related classes
      mem: change NULL to nullptr in the cache related classes
      mem: remove redudant check whether the cache forwards snoops
      mem: fix headers include order in the cache related classes
      mem: Fix the snoop filter when there is a downstream addr mapper
      arm: Mark uninitialized new TLB entries as not valid
      mem: Remove stale argument from a DPRINTF in the cache code
      mem: Add support for secure packets in the snoop filter
      cpu, arch: fix the type used for the request flags
      mem: Print an MSHR without triggering any assertions
      mem: Add support for repopulating the flags of an MSHR TargetList
      mem: Keep track of allocOnFill in the TargetList
      mem: Service only the 1st FromCPU MSHR target on ReadRespWithInv
      cpu: Change traffic generators to use different values for writes
      mem: Make packet debug printing more uniform
      mem: Assert that the responderHadWritable is set only once
      mem: Always use InvalidateReq to service WriteLineReq misses
      mem: Don't use hasSharers in the snoopFilter for memory responses
      mem: Allow non invalidating snoops on an InvalidateReq MSHR
      mem: Invalidate a blk when servicing the 1st invalidating target
      mem: Respond to InvalidateReq when the block is (pending) dirty
      config: Add whole line accesses to improve memchecker's coverage
      config: Add an option to generate a random topology in memcheck
      proto: Fix warnings for protoc v3
      arm: Blame the right instruction address on a Prefetch Abort
      arm: Fix DPRINTFs with arguments in the instruction declarations
      mem: Remove stale argument from a panic statement
      misc: Add dtb files to the ignore list for git and mercurial
      mem: Populate the secure flag in the writeback visitor
      mem: Always use the helper function to invalidate a block
      mem: Remove unused functions from the tag classes
      mem: Remove unused type BlkList from the cache and the tags
      mem: Remove unused arguments (asid/contex_id) from accessBlock
      mem: Remove the unused asid field from the CacheBlk class
      mem: Remove unused size field from the CacheBlk class
      mem: Use pkt::getBlockAddr instead of BaseCace::blockAlign
      mem: Make blkAlign a common function between all tag classes
      tests: Warn not fail when reading invalid pickle status files
      arm: Treat Write-Through Normal memory as Non-Cacheable
      arm: Don't panic when checking coprocessor read/write permissions
      arch-sparc: Fix wrong indentation causing warnings for gcc 6
      python: Fix unproxing of VectorParams
      ruby: Don't set the block data when a store conditional fails
      ruby: Add support for address ranges in the directory
      ruby, arm: Forward invalidations to the local exclusive monitor
      config: Warn not fail for ARM systems configured with ruby
      scons: Make MOESI_CMP_directory the default ARM ruby protocol
      arm: Refactor the VExpress_EMM system creation
      tests: Add ARM MOESI_CMP_directory regressions
      tests: Fix path for module imports in ARM system configs
      cpu-o3: Avoid early checker verification for store conditionals
      cpu-o3: Check predication before the SQ size for a debug print
      mem: Signal the local monitor when clearing the global monitor
      arch-arm: Signal an event when executing store exclusives
      arch-arm: Allow dc ivac from EL0 when SCTLR_EL1.UCI=1
      mem: Align the snoop behavior in the XBar for atomic and timing
      cpu-o3: Prevent cpu from suspending if it is already draining
      mem: Add the notion of point of unification in the coherent xbar
      mem: Add function to check if the slave can receive a timing req
      mem-cache: Add support for checking whether a cache is busy
      mem: Add a WriteClean command to the packet class
      mem: Add support for WriteClean packets in the memory system
      mem: Support for specifying the destination of a WriteClean
      mem: Add support for cache maintenance operation requests
      mem: Promote deferred targets only when the block is valid
      mem: Add support for CMOs in the cache
      mem: Add support for handling CMOs in the MSHRs
      mem: Co-ordination of CMOs in the xbar
      mem: Allow CMOs as snooping requests in the snoop filter
      mem: Handle CMO responses in the snoop filter
      mem: Ignore clean requests in the abstract memory
      cpu: Add support for CMOs in the cpu models
      arm: Add CMO support for Non-Cacheable memory
      mem-ruby: Prevent ruby from crashing on CMOs
      arm: Add support for the mcr dc{ic,i,c}mvac, dccmvau instructions
      arm: Add support for the dc {civac, cvac, cvau, ivac} instr
      mem-cache: Prune unnecessary writebacks in exclusive caches
      mem-ruby: Add support for multiple DMA engines in MESI_Two_Level
      mem-ruby: Remove function that maps responses to a DMA engine
      mem-ruby: Fix wakeup timeouts for the MOESI_CMP_token protocol
      base: Fix unused function warning
      mem-cache: Cleaned blocks should be marked as not writable
      mem-cache: Only pendingModified MSHRs can satisfy CMO snoops
      arch-arm: Fault when dc ivac is executed from EL0
      arch-arm: Fix cache line size for cache maintenace inst
      arch-arm: Fix printing of the data cache maintenance instructions
      arch-arm: Turn dc ivac to dc civac when some conditions are met
      arch-arm: Check cache maintenance insts for permission faults
      arch-arm: Unify permission checks for dc * instructions
      arch-arm: Change the type of fault for dc ivac instructions
      configs: Fix L3Cache instantiation in lat_mem_rd.py
      mem-cache: Remove unnecessary block initialization on writeback
      mem-cache: Populate the secure bit when the temp block is filled
      mem-cache: Remove mumBlock redundant initialiation from FALRU
      mem-cache: Remove redundant block initialization on allocation
      mem-cache: Populate whenReady for blocks filled from writebacks
      mem-cache: Make invalidate a common function between tag classes
      mem-cache: Make the block invalidate functions virtual
      arch-arm: Fix unused variable warning in faults.cc
      arch-arm, configs: Treat the bootloader rom as cacheable memory
      mem-cache: Allow clean operations when block allocation fails
      mem-cache: Remove unused return value from the recvTimingReq func
      mem-cache: Revamp multiple size tracking for FALRU caches
      mem-cache: Simplify writeback for the tempBlock in recvTimingResp
      base: Add M5 flag for [[nodiscard]] attribute
      mem-cache: Move replacements stat to the base cache class
      mem-cache: Remove isTouched field from the CacheBlk
      mem-cache: Move reference count stats update to blk invalidation
      mem-cache: Determine if an MSHR has requests from another cache
      mem-cache: Refactor the cache recvTimingResp function
      mem-cache: Refactor the cache recvTimingReq function
      mem-cache: Refactor the recvAtomic function
      mem-cache: Delegate block invalidation to block allocation
      mem-cache: Add helper function to perform evictions
      mem-cache: Adopt a more sensible cache class hierarchy
      mem-cache: Move cache bypass mechanism to the ports
      mem-cache: Add a non-coherent cache
      mem-cache: Fix include directives in the cache related classes
      mem-cache: Replace block visitor with std::function
      mem-cache: Remove unnecessary cast in SectorTags::findVictim
      dev-arm: Fix the address range for some I/O devices
      mem-cache: Fix support for secure blocks in the FALRU cache
      base, mem: Disambiguate if an addr range is contained or overlaps
      mem: Use address range to find the destination port in the xbar
      mem: Use address range to find the right physical address
      base: Fix includes in AddrRangeMap header file
      mem-cache: Selectively clear downstream pending
      mem-cache: Fix promoting of targets that need writable
      mem-cache: Promote targets that don't require writable
      mem-cache: Promote deferred targets on cache clean responses
      python: Add support for multiplying proxies to compatible Param
      configs: Use the same address ranges for dir and mem_ctrls
      base: Fix isSubset() for addr ranges with interleaving
      mem-cache: Fix bug in handleAtomicReqMiss
      mem: Determine if an MSHR does a whole-line write
      mem: Restructure whole-line writes to simplify write merging
      mem: Delay servicing an MSHR after its allocation
      mem: Add write coalescing and write-no-allocate to the caches
      mem-cache: Fix unused variable warning in FALRU:invalidate()
      mem-ruby: Fix MOESI_CMP_directory in ports order
      configs: Revamp ruby mem test to align with MemTest
      mem-cache: Align how we handle requests in atomic with timing
      arch-arm: Add missing template declaration
      base: Add missing overrides in statistics header
      base, sim: Add missing destructors
      base: Fix fiber compilation issue for Mac OS
      scons: Disable systemc on Mac OS
      systemc: Allow specific functions to shadow the base class method
      scons: Disable partial linking on Mac OS
      python: Add support for scoped enums
      cpu-o3: Make the smtFetchPolicy a Param.ScopedEnum
      cpu-o3: Make the smtLSQPolicy a Param.ScopedEnum
      cpu-o3: Make the smtIQPolicy a Param.ScopedEnum
      cpu-o3: Make the smtROBPolicy a Param.ScopedEnum
      cpu-o3: Make the smtCommitPolicy a Param.ScopedEnum
      mem: Determine if a packet queue forces ordering at construction
      mem: Allow inserts in the begining of a packet queue
      mem-cache: Copy over flags to forwarded response
      cpu: Correctly account for executed instructions in simple cpus
      mem-cache: Fix MSHR handling of cache clean requests
      mem-cache: Mark block as dirty after a SWPrefetchEXResp
      base: Add function to count trailing zeros in a 64-bit integer
      base: Fix ctz32 for systems where unsigned int is not 32bit
      base: Extend AddrRange to support more flexible addressing
      base: Extend unit tests for AddrRange
      python: Add binding for the new AddrRange c++ constructor
      configs: Add python3 workarounds in read_config
      configs: Fix read_config to work with new AddrRange serialization
      python: Fix cxx_ini_parse for ScopedEnum
      python: Fix AddrRange legacy ParamValue wrapper
      python: Add support for exporting static class methods from c++
      tests: Add base class for fixtures that generate a target file
      tests: Refactor the Gem5Fixture to derive from UniqueFixture
      tests: Add support for downloaded archive fixtures
      tests: Add Arm full system regressions to the new framework
      cpu: Fix checker cpu instantiation
      cpu: Make use of DRAMCtrl::AddrMap in the traffic generators
      mem-cache: Fix MSHR whole line write tracking
      mem-cache: Avoid promotion of incompatible deferred targets
      mem: Fix DRAM controller to operate on its own address space
      arch-arm: Simplify AMO code generation templates
      base: Fix AddrRange::isSubset() check
      mem-cache: Avoid write merging if there are reads in between
      mem-cache: Ensure that responses get data from the right source
      mem-cache: Forward snoops when the cache is not responding
      scons: Cleanup code that enables asan and ubsan
      python: Remove unnecessary exports from pybind enums
      configs: Fix argument handling sweep.py
      arch-arm: Add missing include in QARMA implementation
      sim: Add function that returns all variables in a MathExpr
      base: Add support for resolving stats within groups by name
      base, python, sim: Add support for resoving a stat using its name
      sim-power: Fix the way the power model accesses stats
      configs: Change fs_power.py to use absolute paths for stats
      arch-arm: Downgrade constexpr causing build errors to const
      arch-arm, mem-ruby, sim: Add missing overrides
      sim: Fix mismatch between #ifndef and #define in varargs.hh
      arch-arm: Fix function signature inconsistencies in semihosting
      mem-ruby: Removed the unused parameter m_id from VirtualChannel
      arch-arm: Fix inconsistency in variable name
      scons: Disable unsupported -Wl,--as-needed in MacOS
      arch-arm: Fix access modifier in Arm*ProcessBits class
      mem-ruby: Avoid const from member due to &Message::operator=(...)
      sim: Inheritance fixes in varargs
      scons: Build the marshal binary in a bare minimum environment

Ali Saidi <Ali.Saidi@arm.com> (190):
      ARM: Handle case where new TLB size is different from previous TLB size.
      ARM: Cleanup m5ops usage of r0 and r1 a bit.
      Config: Add support for a Self.all proxy object
      O3: Make sure fetch doesn't go off into the weeds during speculation.
      IO: Handle case where ISA Fake device is being used as a fake memory.
      O3: Update stats for fetch and bp changes.
      ARM: Update stats for better miscreg support for MP configurations.
      Mem: Fix issue with prefetches originating at non-L1 caches getting stale data
      O3: Fix uninitialized variable in the tournament branch predictor.
      ARM: quiet what can be a very noise CLCD controller.
      Prefetcher: Fix some memory leaks with the prefetcher.
      ARM: Fix a memory leak with the table walker.
      O3: Update stats for LSQ changes.
      LSQ: Set store predictor to periodically clear itself as recommended in the storesets paper.
      ARM: Add support for DIV/SDIV instructions.
      StoreSet: Update stats for store-set clearing
      IDE: Fix issues with new PIIX kernel driver and our model.
      ARM: Make GIC function that should only be called by GIC protected.
      ARM: Add support for Versatile Express boards
      ARM: Add VExpress_E support with PCIe to gem5
      Mem: Put prefetcher notify call before packet is deleted.
      ARM: Mark some variables uncacheable until boot all CPUs are enabled.
      ARM: Add some MP regressions and clean up the disk images and kernels a bit
      LSQ: Only trigger a memory  violation with a load/load if the value changes.
      O3: Update stats for new ordering fix.
      Prefetch: Don't prefetch if address is in the write queue.
      IGbE: Clean up debug printing and proprly account for copied bytes.
      MIPS: Fix regressions tests
      ARM: Fix small bug in config script that prevents android from booting
      SPARC: update SE stats for FP fix
      O3: Add stat that counts how many cycles the O3 cpu was quiesced.
      ARM: Add IsSerializeAfter and IsNonSpeculative flag to the syscall instruction .
      ARM: Add support for having a TLB cache.
      imported patch ext/stats_updates.patch
      SE: Don't warn when not extending stack as it's too noisy with O3.
      Trace: FIx issue with creation of trace file with output dir overhaul.
      IO: Fix bug in DMA Device where receiving a snoop on DMA port would cause a panic.
      cpu2000: Add missing art benchmark to all
      ARM: Add support for initparam m5 op
      stats: Update stats for ARM init param changes.
      ARM: Add support for running multiple systems
      O3: Add support of function tracing with O3 CPU.
      config: support outputing a pickle of the configuration tree
      O3: Remove some asserts that no longer seem to be valid.
      Config: Fix issue with JSON output
      config: Fix json output for Python lt 2.6.
      Automated merge with ssh://repo.gem5.org/gem5
      Packet: Remove meaningless assert statement
      Packet: Put back part of the assert
      stats: undo parser change from initparam change
      Mem: Add simple bandwidth stats to PhysicalMemory
      sim: display final value of curTick in stats Different from sim_ticks in that this value is restored from checkpoints and is never reset. Useful for aligning with framebuffer output ticks
      stats: Update stats for final tick and memory bandwidth patches
      configs: More fixes for the memory system updates
      mem: Add a master ID to each request object.
      stats: update stats for insts/ops and master id changes
      configs: fix minor config bugs posted on the mailing list
      tests: fix diff-out script for op/inst stat changes.
      bp: fix up stats for changes to branch predictor
      Cache: Fix an issue with LRU when bonus block is used to complete transaction.
      ARM: Add RTC device for ARM platforms.
      ARM: Add support for Versatile Express extended  memory map
      ARM: FIx missing cf controller connection.
      ARM: FIx a bug preventing multiple cores booting a VExpress_EMM machine.
      cache: Allow main memory to be at disjoint address ranges.
      ARM: Fix valgrind reported error on O3 that was causing minor stats changes.
      System: Move code in initState() back into constructor whenever possible.
      ARM: Don't reset CPUs that are going to be switched in.
      ARM: Update stats for valgrind fix and replace config.inis which are out of date.
      ARM: Update stats for CBNZ fix.
      ARM: Fix memory starting at non-zero address and exceeding max mem for a system.
      ARM: Fix uninitialized value in ARM RTC model.
      ARM: Clean up condCodes in IT blocks.
      ARM: Update stats for IT and conditional branch changes
      Cache: Panic if you attempt to create a checkpoint with a cache in the system
      stats: track if the stats have been enabled and prevent requesting master id
      ARM: Update m5op assembly for thumb compilation.
      gem5: Fix a number of incorrect case statements
      base: fix a invalid ?: operator
      gem5: fix a number of use after free issues
      gem5: fix some iterator use and erase bugs
      gem5: assert before indexing intro arrays to verify bounds
      ARM: Fix incorrect use of not operators in arm devices
      dev: use correct delete operation in SimpleDisk
      Cache: restructure code that actually isn't a loop
      mem: fix bug with CopyStringOut and null string termination.
      stats: fix bug in assert for 2d vector
      stats: fix compilation of unit test.
      ARM: update stats for clock frequency fix.
      ARM: Fix compilation on ARM after Gabe's change.
      ARM: Fix over-eager assert in gic.
      sim: Remove FastAlloc
      sim: Add support for tcmalloc if it's installed and available. This package is available in Ubuntu, Debian, and Redhat as google-perftools. With multiple tests on a single machine I've seen a little over 10% performance gain with tcmalloc.
      O3: Clean up the O3 structures and try to pack them a bit better.
      stats: Add stats unittest for total calculations.
      sim: Provide a framework for detecting out of data checkpoints and migrating them.
      all: Update stats for memory per master and total fix.
      cpt: update some comments in the checkpoint migration script
      ISA: Back-out NoopMachInst as a StaticInstPtr change.
      mem: Delay deleting of incoming packets by one call.
      scons: Make compiler version error more verbose and easier to debug.
      ARM: Fix address range issue with VExpress EMM
      ARM: Fix issue with predicted next pc being wrong because of advance() ordering.
      ARM: Update version of linux we claim to be to 3.0.0.
      Cache: Only invalidate a line in the cache when an uncacheable write is seen.
      ARM: Fix identification of one RAS pop instruction.
      Stats: Update stats for RAS and LRU fixes.
      stats: update stats for icache change not allowing dirty data
      stats: fix some miss-committed changes from the icache change
      stats: revert pc-simple-timing-ruby-MESI_CMP_directory to before last update
      sysemul: bump all linux versions of for syscal emulation to 3.0.
      stats: Update stats for syscall emulation Linux kernel changes.
      ARM: Fix one of the timers used in the VExpress EMM platform.
      loader: initialize all memory in the ObjectFile objects.
      Igbe: Newer kernels seem to allow TSO headers and packet data to be in one desc
      ARM: fix m5 op binary to properly convert 64bit operands
      ARM: Fix the compiler and platform identification for building on ARM.
      dev: Fix bifield definition in timer_cpulocal.hh
      O3: Get rid of incorrect assert in RAS.
      gem5: Update the README file to be a bit less out-of-date.
      ARM: Predict target of more instructions that modify PC.
      ARM: Squash outstanding walks when instructions are squashed.
      mem: Add a gasket that allows memory ranges to be re-mapped.
      O3: Pack the comm structures a bit better to reduce their size.
      ARM: update stats for bp and squash fixes.
      sim: Fix as issue where exit events on instr queues are used after freed.
      update stats for preceeding changes
      mem: fix use after free issue in memories until 4-phase work complete.
      cache: add note about where conflicts are handled
      tests: Always specify memory mode in every test system.
      cpu: rename the misleading inSyscall to noSquashFromTC
      o3: Fix issue with LLSC ordering and speculation
      stats: update stats for previous changes.
      stats: update stats for previous six changes
      config: Fix issue with changeset: a4739b6f799d.
      cpu: Fix a livelock in the o3 cpu.
      cpu: fix case with o3 cpu blocking and unblocking decode in cycle
      ARM: Fix an issue with clang generating wrong code.
      cpu: include set in o3/commit_impl.
      arm: fix some fp comparisons that worked by accident.
      stats: update regressions for o3 changes in renaming and translation.
      stats: more zizzer stats fun
      config: Fix --prog-interval command line option
      ARM: fix some cases where instructions that write to fp reg 15 are accidently branches.
      cpu: fix a switching issue with the o3 cpu.
      stats: update patches for branch predictor and fetch updates.
      cpu: fix a switching issue with the o3 cpu.
      stats: Update stats for O3 switching fix.
      scons: ammend swig warning error to version 2.0.10 as well
      ARM: Fix configuration files for bare-metal binaries.
      dev: Allow additional UART interrupts to be set
      config: Fix memtest example script
      arm, config: Fix a small issue with the dtb file being specified
      mem: Make MemoryAccess flag more verbose
      cpu: Fix O3 uncacheable load that is replayed but misses the TLB
      arm: Fix a GIC mask register bug
      cpu: Fix O3 issuse with load+barrier instructions.
      arm: fix m5ops binary for ARM and add m5fail.
      mem: Remove explict cast from memhelper.
      cpu: Add CPU support for generatig wake up events when LLSC adresses are snooped.
      cpu: Add support for instructions that zero cache lines.
      arch, cpu: Add support for flattening misc register indexes.
      stats: update stats for cache occupancy and clock domain changes
      stats: update stats for ARMv8 changes
      mem: Wakeup sleeping CPUs without caches on LLSC
      sim, arm: implement more of the at variety syscalls
      arm: allow DC instructions by default so SE mode works
      arm: Make sure UndefinedInstructions are properly initialized
      dev, arm: Add support for linux generic pci host driver
      arm: Assume we have a kernel that supports pci devices
      arm: Support >2GB of memory for AArch64 systems
      dev: seperate legacy io offsets from PCI offset
      cpu: Add support to checker for CACHE_BLOCK_ZERO commands.
      arm: Mark some miscregs (timer counter) registers at unverifiable.
      arm: fix bare-metal memory setup.
      arm: Fix multi-system AArch64 boot w/caches.
      arm, mem: Fix drain bug and provide drain prints for more components.
      arm, tests: Update config files to more recent kernels and create 64-bit regressions.
      tests: Update regressions for the new kernels and various preceeding fixes.
      automated merge
      arm, tests: Add 64-bit ARM regression tests
      arm, tests: Forgot the system.terminal files for the new regressions.
      tests: Update stats no match.
      arm: Fix timing wakeup with LLSC
      cpu: remove legion tracer
      cpu: Put all CPU instruction tracers in a single file
      cpu: Remove all notion that we know when the cpu is misspeculating.
      sim: Clean up InstRecord
      arm: always set the IsFirstMicroop flag
      cpu: add support for outputing a protobuf formatted CPU trace

Steve Reinhardt <stever@gmail.com> (132):
      SConstruct: automatically update .hg/hgrc with style hooks. Seems easier than pestering people about it. Note also that path is now absolute, so you don't get errors when invoking hg from subdirectories. Also whacked unused mercurial_bin_not_found message (the code that used this was deleted a couple months ago in rev 5138d1e453f1).
      params.py: enhance IpAddress param handling
      pseudo_inst: clean up workbegin/workend functions Use exitSimLoop() function instead of explicitly scheduling on mainEventQueue (which won't work once we go to multiple event queues).  Also introduced a local params variable to shorten a lot of expressions.
      event: minor cleanup Initialize flags via the Event constructor instead of calling setFlags() in the body of the derived class's constructor.  I forget exactly why, but this made life easier when implementing multi-queue support.
      style.py: don't die on empty files
      scons/swig: refactor some of the scons/SWIG code
      SimObject: add export_method* hooks to export C++ methods to Python
      dev: clean up PioDevice and DmaDevive getPort() methods.
      tests: fix spurious scons "Error 1" messages
      syscall_emul: implement MAP_FIXED option to mmap()
      SE: move page allocation from PageTable to Process
      debug: fix AllFlags::disable()
      Alpha: warn_once about broken PAL breakpoints.
      SimObject: make get_config_as_dict() tolerate undefined params
      EIO: update stats (mostly order change, some renames)
      DynInst: get rid of dead MyHash code.
      SConstruct: update comments & doc strings
      SConstruct: rename and document AddM5Option
      SCons: restore Werror option in src/SConscript
      scons: update minimum SWIG version to 1.3.34
      scons: allow override of SWIG binary on command line
      Add hook to call map() on Process from python. This enables configuration scripts to set up mappings from process virtual addresses to specific physical addresses in SE mode.  This feature is needed to support modeling of user-accessible memories or devices in SE mode, avoiding the complexities of FS mode and the need to write a device driver.
      Added tag stable_2012_02_02 for changeset 549b72de8f72
      Added tag stable_2012_06_28 for changeset f75ee4849c40
      test: Restore eio ref files clobbered in rev 8800b05e1cb3.
      test: Update eio ref outputs due to recent changes
      str: add an overloaded startswith() utility method for various string types and use it in a few places.
      syscall_emul: clean up open() code a bit.
      process: add progName() virtual function
      SETranslatingPortProxy: fix bug in tryReadString()
      scons: don't die on warnings in swig-generated code
      Updating EIO regression reference outputs for new stats.
      devices: make more classes derive from BasicPioDevice A couple of devices that have single fixed memory mapped regions were not derived from BasicPioDevice, when that's exactly the functionality that BasicPioDevice provides.  This patch gets rid of a little bit of redundant code by making those devices actually do so.
      dev/arm: get rid of AmbaDev namespace
      dev: consistently end device classes in 'Device'
      dev: make BasicPioDevice take size in constructor
      util/regress: set --no-lto on regressions
      stats: update eio stats
      tests: update reference outputs
      cpu: clean up architectural register classification
      cpu/inorder: merge register class enums
      cpu/o3: clean up physical register file
      cpu/o3: clean up scoreboard object
      isa: clean up register constants
      cpu: rename *_DepTag constants to *_Reg_Base
      cpu/o3: clean up rename map and free list
      scons: fix minor update-ref bug in regressions
      ruby: eliminate non-determinism from ruby.stats output
      test: update stats
      tests: suppress output on switcheroo tests
      sim: simulate with multiple threads and event queues This patch adds support for simulating with multiple threads, each of which operates on an event queue.  Each sim object specifies which eventq is would like to be on.  A custom barrier implementation is being added using which eventqs synchronize.
      python: don't die on assignment to cloned object
      python: provide better error message for wrapped C++ methods
      config, x86: move kernel specification from tests to FSConfig.py
      stats: update eio stats for recent changes
      tests: update eio ref outputs for new stats
      tests: update t1000 & pc-switcheroo-full stats
      syscall emulation: clean up & comment SyscallReturn
      style: eliminate equality tests with true and false
      stats: update for O3 changes
      syscall emulation: fix DPRINTF arg ordering bug
      kern: get rid of unused linux syscall files
      sim: remove unused MemoryModeStrings array
      syscall emulation: fix fast build issue
      stats: update for syscall DPRINTF change
      stats: update eio stats for recent changes
      stats: update t1000 stats for recent changes
      syscall_emul: add EmulatedDriver object
      syscall_emul: Put BufferArg classes in a separate header.
      syscall_emul: devirtualize BaseBufferArg methods
      syscall_emul: minor style fix to LiveProcess constructor
      syscall_emul: add retry flag to SyscallReturn
      Backed out prior changeset f9fb64a72259
      config: make M5_PATH a real search path
      config: rename 'file' var
      stats: update eio stats
      mem: clean up write buffer check in Cache::handleSnoop()
      mem: restructure Packet cmd initialization a bit more
      mem: add local var in Cache::recvTimingResp()
      mem: remove redundant test in in Cache::recvTimingResp()
      stats: update Minor stats due to PF bug fix
      misc: quote args in echoed command line
      config: expand '~' and '~user' in paths
      mem: rename Locked/LOCKED to LockedRMW/LOCKED_RMW
      stats: update a few stats from long O3 runs
      stats: update for previous changeset
      syscall_emul: fix warn_once behavior
      stats: update EIO stats for snoop filter changes
      x86: implement fild, fucomi, and fucomip x87 insts
      x86: implement rcpps and rcpss SSE insts
      sim: print pid in output header
      sim: add ExecMacro to Exec* compound debug flags
      arch: clean up isa_parser error handling
      syscall_emul: don't check host fd when allocating target fd
      tests: update EIO reference outputs
      stats: more updates due to PCI changes
      mem: add CacheVerbose debug flag, filter noisy DPRINTFs
      mem: fix bug in packet access endianness changes
      stats: update SPARC FS stats
      sim: don't ignore SIG_TRAP
      arch: get rid of unused LargestRead typedef
      arch: don't call *Timing functions from *Atomic versions
      cpu: remove unnecessary data ptr from O3 internal read() funcs
      cpu. arch: add initiateMemRead() to ExecContext interface
      sim: fix redundant --debug-start help string
      stats: update EIO stats for recent changes
      util: delete old unused style-checking scripts
      util: clean up and extend style checker
      style: remove trailing whitespace
      style: fix missing spaces in control statements
      util: added line length and boolean comparison style checkers
      util: fix apparent statetrace bug
      x86: create function to check miscreg validity
      style: eliminate explicit boolean comparisons
      syscall_emul: fix bug in aux vector initialization
      arch: get rid of dummy var init
      arch, x86: add support for arrays as memory operands
      stats: update gpu-ruby-GPU_RfO stats
      scons: fix building in non-standard locations
      stats: overdue updates to long regressions
      stats: update stats for mmap() change.
      syscall_emul: move mmapGrowsDown() to LiveProcess
      stats: update stats for mmap changes
      stats: update stats for ld.so support
      syscall_emul: factor out flag tables into common file
      syscall_emul: remove mmapFlagTable
      tests: update EIO ref stats for removed cache stats
      stats: update EIO stats
      stats: update EIO stats
      tests: remove EIO tests
      arch-x86: implement movntps/movntpd SSE insts
      sim-se: create Proc out files in out dir

Brandon Potter <brandon.potter@amd.com> (112):
      base: add new ChunkGenerator method to identify last chunk
      syscall_emul: fix warning with wrong syscall name Also nix extra whitespace.
      syscall_emul: update getrlimit to use warn Don't use std::cerr directly, and just return EINVAL instead of aborting.
      syscall_emul: implement clock_gettime system call
      cpu: remove conditional check (count > 0) on o3 IQ squashes
      config: enable setting SE-mode environment variables from file
      ruby: remove extra whitespace and correct misspelled words
      ruby: replace g_ruby_start with per-RubySystem m_start_cycle
      ruby: replace global g_system_ptr with per-object pointers
      ruby: replace global g_abs_controls with per-RubySystem var
      ruby: dma sequencer: removes redundant code
      syscall_emul: file descriptor interface changes
      base: refactor process class (specifically FdMap and friends)
      syscall_emul: standardized file descriptor name and add return checks.
      style: change Process function calls to use camelCase
      syscall_emul, style: fix newline issue inside assert
      syscall_emul, style: refactor lseek
      syscall_emul: rename OpenFlagTransTable struct
      syscall_emul: add many Linux kernel flags
      syscall_emul: extend mmap system call to support file backed mmaps
      syscall_emul: fix bugs for mmap2 system call and x86-32 syscalls
      syscall_emul: update x86 mmap base address
      base: support dynamic loading of Linux ELF objects in SE mode
      base: style cleanup for ObjectFile and ElfObject
      base: add symbol support for dynamic libraries
      hsail: remove the panic guarding function directives
      hsail: generate mov instructions for more arith_types and bit_types
      hsail: add a wavesize case statement to register operand code
      hsail: add popcount type and generate popcount instructions
      hsail: add stub type and stub out several instructions
      hsail: disable asserts to allow immediate operands i.e. 0 with loads
      syscall_emul: extend sysinfo system call to include mem_unit
      syscall_emul: add support for x86 statfs system calls
      syscall_emul: implement fallocate
      base: remove header file to prevent a macro name collision
      style: [patch 1/22] use /r/3648/ to reorganize includes
      syscall_emul: [patch 2/22] move SyscallDesc into its own .hh and .cc
      syscall_emul: #ifdef new system calls to allow builds on OSX and BSD
      style: [patch 3/22] reduce include dependencies in some headers
      syscall_emul: [patch 4/22] remove redundant M5_pid field from process
      sim: fix out-of-bounds error in syscall_desc
      sparc: fix bugs caused by cd7f3a1dbf55
      syscall_emul: [patch 5/22] remove LiveProcess class and use Process instead
      syscall_emul: [patch 6/22] remove unused fields from Process class
      syscall_emul: [patch 7/22] remove numCpus method
      syscall_emul: [patch 8/22] refactor process class
      syscall_emul: [patch 9/22] remove unused global variable (num_processes)
      syscall_emul: [patch 10/22] refactor fdentry and add fdarray class
      base: fix small memory leak in the ELF loader
      x86: remove redundant condition check in tlb code
      syscall_emul: [patch 11/22] extend functionality of fcntl
      style: [patch 12/22] fix preliminary style issues for subsequent fault patch
      syscall_emul: [patch 13/22] add system call retry capability
      gpu-compute: mark functions with override if replacing virtual
      x86: remove unnecessary parameter from functions
      syscall_emul: [patch 14/22] adds identifier system calls
      syscall_emul: [PATCH 15/22] add clone/execve for threading and multiprocess simulations
      syscall-emul: Remove unused class and member
      syscall-emul: Move memState into its own file
      style: Correct some style issues
      syscall-emul: Add functionality to open syscalls
      syscall-emul: Add or extend dup, dup2, and pipe
      syscall-emul: Adds SE mode signal feature
      syscall-emul: Add the tgkill system call
      syscall-emul: Rewrite system call exit code
      syscall-emul: Ignore unimplemented system calls
      style: change NULL to nullptr in syscall files
      syscall-emul: change NULL to nullptr in Process files
      syscall-emul: Hotfix for FreeBSD/Mac builds
      style: fix line lengths and include ordering
      syscall_emul, riscv: add override keyword to RISCV Process class
      style: change C/C++ source permissions to noexec
      mem: fix page_table bug for .fast build
      ruby: bugfix for MESI_Three_Level protocol
      ruby,gpu-compute: bugfix for GPU_VIPER* protocols
      gpu-compute: use X86ISA::TlbEntry over GpuTlbEntry
      hsail-x86: fix addr_range_map error
      hsail-x86: fix gpu dynamic instruction error
      ruby: remove unused code inside '#if 0 ... #endif'
      tests: add a stack printer test
      scons,ruby: do not generate unnecessary files
      util: add util/maint/show_changes_by_file.py tool
      syscall_emul: expand AuxVector class
      syscall_emul: style changes and FDArray refactor
      syscall_emul: refactor FDEntry and children classes
      syscall_emul: implement dir-related syscalls
      sim-se: add socket-based functionality
      sim-se: add calls for network transmissions
      sim-se: add syscalls related to polling
      sim-se: add ability to get/set sock metadata
      sim-se add readv and modifies writev
      sim-se: add socket ioctls
      sim-se: bugfix for 54c77aa055e
      sim-se: add eventfd system call
      config, sim-se: bugfix for 54c77aa0
      sim-se: change syscall function signature
      sim-se: remove comment for code that moved
      sim-se: const for loader's loadSection param
      x86: fix movsd bug on %xmm register
      sim-se: add new option to getrlimit syscall
      sim-se: fstat64 bugfix
      sim-se: small performance optimization
      sim-se: small refactor on pipe syscall
      sim-se: add new getpgrp system call
      sim-se, tests: add a new sim-se test
      sim-se: remove unused parameter
      sim-se: minor refactor for ProcessParams::create
      sim-se: rename Process::setpgid member
      cpu-o3: bugfix for partial faults in x86
      cpu-o3,tests: add page boundary access test
      base,tests: Expanded GTests for addr_range.hh
      cpu,sim-se: move error checks in syscall methods

Curtis Dunham <Curtis.Dunham@arm.com> (111):
      scons: Shush scons
      stats: better error message for uninitialized statistic
      arch: remove 'null update' check in isa-parser
      base: explicitly suggest potential use of 'All' debug flags
      arm: Correctly display disassembly of vldmia/vstmia
      scons: Require SWIG >= 2.0.4 and remove vector typemaps
      ext: disable PLY debugging
      arm: cleanup ARM ISA definition
      arch: remove inline specifiers on all inst constrs, all ISAs
      cpu: add more instruction mix statistics
      arch: teach ISA parser how to split code across files
      arm: add preliminary ISA splits for ARM arch
      arm: remove dead code fplib mul64x64
      sim: bump checkpoint version for multiple event queues
      arm: support 16kb vm granules
      arm: use condition code registers for ARM ISA
      mem: Refactor assignment of Packet types
      cpu, mem: Make software prefetches non-blocking
      mem: write streaming support via WriteInvalidate promotion
      tests: automatically kill regressions that take too long
      mem: Provide better diagnostic for unconnected port
      mem: Output precise range when XBar has conflicts
      dev: Output invalid access size in IsaFake panic
      scons: create dummy target to have SWIG generate C++ classes
      scons: Generate a single debug flag C++ file
      scons: Add --without-tcmalloc build option
      mem: have WriteInvalidate obsolete MSHRs
      mem: don't inhibit WriteInv's or defer snoops on their MSHRs
      mem: Remove WriteInvalidate support
      mem: Support WriteInvalidate (again)
      arm: Add stats to table walker
      mem: Hide WriteInvalidate requests from prefetchers
      sim: fix reference counting of PythonEvent
      sim: prioritize async events; prevent starvation
      base: add an accessor and operators ==,!= to address ranges
      config: add --root-device machine parameter
      sim: Reuse the same limit_event in simulate()
      config: Add ability to exit simulation after initialization
      sim: Update limit_event reuse to final version
      ext: Add SST connector
      config: Support full-system with SST's memory system
      arm: implement the CONTEXTIDR_EL2 system reg.
      sim, arm: add checkpoint upgrader for d02b45a5
      base: remove fd from object loaders
      scons: remove dead leading underscore check
      sim: make warning for absent optional parameters optional
      sim: support checkpointing std::set<std::string>'s
      sim: tag-based checkpoint versioning
      base: remove Trace::enabled flag
      ext: fix SST connector
      ext: fix SST connector
      ext: remove redundant parameter in example SST+gem5 test
      ext: fix SST connector
      scons: always generate sim/tags.cc
      base: support gzip-compressed object files
      cpu: Implement per-thread GHRs
      stats: update stats for thermals, indirect BP
      style: improve compatibility with old git versions
      style: respect ignores for git commit
      style: ignore test data in style checks
      scons: emit correct message before installing git hook
      stats: update for snoop filter tweak
      stats: update and fix e273e86a873d
      tests: add 'CHANGED' output to pickle viewer
      arm: refactor page table format determination
      stats: update references
      arm: enable EL2 support
      arm: refactor page table walking
      stats: update references
      arm: bank GIC registers per CPU
      arm: s/ctx_id/ctx/ the GIC
      commit 15c633eea52f21dae8cb3a195823b3cdec7be491 Author: Curtis Dunham <Curtis.Dunham@arm.com>     ext: update SST connector for SST 6.0
      ext: eliminate warnings in SST connector
      base: eliminate ipython warning
      ext: update SST test config
      arm: disable GIC extensions
      stats: update references
      arm: update AArch{64,32} register mappings
      arm: remove SCTLR.FI
      arm: audit SCTLR
      arm: miscreg refactoring
      arm: compute ID_PFR{0,1} registers
      arm: compute ID_AA64PFR{0,1}_EL1 registers
      arm: provide correct timer availability in ID_PFR1 register
      stats: update references
      dist, dev: fix etherswitch upgrade script
      sim: add support for checkpoint downgrading
      sim: allow forward dependencies in checkpoint upgraders
      tests: check for gem5 binary before tests
      sim,kvm,arm: fix typos
      sim, kvm: make KvmVM a System parameter
      arm, kvm: implement MuxingKvmGic
      arm, kvm: remove KvmGic
      arm: correct register read bug in Pl390 GIC
      arm: refactor packet processing in Pl390 GIC
      arm, dev: refactor GIC Pl390 GICD_ITARGETSRn handling
      arm, dev: add basic support for GICC_BPR register
      arm, kvm: implement GIC state transfer
      arm, dev: stub out GIC distributor interrupt groups
      kvm: move Kvm check from ARM Kvm GIC to System
      dev,arm: remove and recreate timer events around drains
      dev,arm: add Kvm mode of operation for CP15 timer
      arm,kvm: update CP15 timer model when exiting Kvm
      kvm, arm: don't create interrupt events while saving GIC state
      tests: Fix path for module imports in ARM system configs again
      arm: make Arm GenericTimer a ClockedObject
      config, arm: enable device tree autogeneration for bigLITTLE
      arch-arm: understandably initialize register mappings
      arm: extend MiscReg metadata structures
      arch-arm: understandably initialize register permissions
      arm: properly handle RES0/1 for SCTLRs

Tony Gutierrez <anthony.gutierrez@amd.com> (96):
      ARM: Update config files for Android/BBench images available on website.
      cpu: add separate stats for insts/ops both globally and per cpu model
      cpu: Don't init simple and inorder CPUs if they are defered.
      ARM: implement the ProcessInfo methods
      configs: add run scripts for ics/gb versions of android and bbench
      ARM: fix value of MISCREG_CTR returned by readMiscReg()
      cache: don't allow dirty data in the i-cache
      checker: make checker cpu id match its host's cpu id
      dma: remove unused variable
      configs: add option for repeatedly switching back-and-forth between cpu types.
      O3,ARM: fix some problems with drain/switchout functionality and add Drain DPRINTFs
      sim: fix overflow check in simulate because Tick is now unsigned
      stats: remove duplicate instruction stats from the commit stage
      bus: removed outdated warn regarding 64 B block sizes
      cache: remove drainManager because it's not used
      ext lib: add libfdt to enable flattened device tree support
      loader: add a flattened device tree blob (dtb) object
      options: add command line option for dtb file
      rcs scripts: remove bbench.rcS
      cpu: remove local/globalHistoryBits params from branch pred
      arm: use -march when compiling m5op_arm.S
      sim: fix event priority name for debug-start option
      cpu: allow the fetch buffer to be smaller than a cache line
      arm: armv8 boot options to enable v8
      arm: fix typos in makefile for ARM m5 util and link statically
      ext: add McPAT source
      arm: set default kernels for VExpress_EMM and VExpress_EMM64
      config: remove unecessary assignment of etherlink interfaces
      arm: make the bi-mode predictor the default for O3_ARM_v7a_BP
      cpu: implement a bi-mode branch predictor
      base: fix some bugs in EthAddr
      base: fix operator== for comparing EthAddr objects
      arm: make the PseudoLRU tags the default for the O3_ARM_v7aL2
      mem: refactor LRU cache tags and add random replacement tags
      arm: fix build_drive_system when not using default options
      util: add a vimrc that matches gem5 style guide
      slicc: export uint64_t instead of uint64
      ruby: update WireBuffer API to match that of MessageBuffer
      misc: ignore object files and static libs in util/m5
      slicc: fixes for the Address to Addr changeset (11025)
      mem: remove acq/rel cmds from packet and add mem fence req
      stats: bump stats to reflect ruby tester changes
      ruby: slicc: remove support for single machine, multiple types
      ruby: slicc: have a static MachineType
      * * * mem: support for gpu-style RMWs in ruby
      mem: write combining for ruby protocols
      gpu-compute: AMD's baseline GPU model
      stats: update stats to after GPU checkin
      ruby: send address ranges from RubyPort
      gpu-compute: remove brig_object.hh from hsa_object.cc
      ruby: move range change send from RubyPort to derived classes.
      gpu-compute: fix uninitialized member bug in GPUDynInst
      gpu-compute: fix spacing in GPUDynInst ctor
      gpu-compute: fix bug in GPUDynInst::isScalarRegister()
      x86, sim: add some syscalls to X86
      sim: fix issues with pwrite(); don't enable fstatfs
      gpu-compute: fix typo in GPUDispatcher
      ruby: make a RequestDesc class instead of std::pair
      gpu-compute, arch: add some methods to the base inst classes for ISA support
      gpu-compute: move disassemle() implementation to GPUStaticInst
      gpu-compute: remove inst enums and use bit flag for attributes
      hsail, gpu-compute: remove doGm/SmReturn add completeAcc
      gpu-compute, hsail: call discardFetch() from the WF
      gpu-compute: add instruction mix stats for the gpu
      gpu-compute: add gpu_isa.hh to switch hdrs, add GPUISA to WF
      gpu-compute, hsail: make the PC a byte address, not an instruction index
      gpu-compute: use System cache line size in the GPU
      gpu-compute, hsail: pass GPUDynInstPtr to getRegisterIndex()
      gpu-compute: support in-order data delivery in GM pipe
      hsail,gpu-compute: fixes to appease clang++
      x86: fix loading/storing of Float80 types
      x86: fix issue with casting in Cvtf2i
      ruby: add default ctor for MachineID type
      gpu-compute: init valid field of GpuTlbEntry in default ctor
      gpu-compute: fix segfault when constructing GPUExecContext
      hsail: fix unsigned offset bug in address calculation
      ruby: fix issue with unused var in DMASequencer
      ruby: fix typo in DMASequencer::ackCallback()
      ruby: guard usage of GPUCoalescer code in Profiler
      gpu-compute: remove unnecessary member from class
      gpu-compute: call createThreads() on cpu objs in apu_se.py
      configs, mem-ruby: fix issues with style in AMD license
      mem-ruby: fix more style issues in AMD licenses
      gpu-compute: fix bad asserts in gpu tlb and cu tlb port
      arch-x86: Enable the umask system call
      arch-x86: Enable fstatfs for x86_64
      gpu-compute: Cleanup the scheduler a bit
      style: fix amd license and style issues
      misc: Update workflow requirements in CONTRIBUTING.md
      arch-x86: Add sys/syscall.h to x86 process.cc/syscall_emul.cc
      cpu-o3: Fix bug in LSQUnit(uint32_t, uint32_t) ctor
      sim-se: remove /sys from special paths
      arch: Bump MaxVecRegLenInBytes to 4096
      arch-gcn3: Add files for arch gcn3 (GPU machine ISA)
      dev-hsa: Add HSA device and HSA packet processor
      misc: Add build opts for GCN3 GPU ISA

Jason Lowe-Power <jason@lowepower.com> (88):
      Ruby NetDest: add assert for bad element in netdest
      Ruby: Clean up topology changes This patch moves instantiateTopology into Ruby.py and removes the mem/ruby/network/topologies directory. It also adds some extra inheritance to the topologies to clean up some issues in the existing topologies.
      Ruby: Add RubySystem parameter to MemoryControl This guarantees that RubySystem object is created before the MemoryController object is created.
      Ruby: Correct DataBlock =operator The =operator for the DataBlock class was incorrectly interpreting the class member m_alloc. This variable stands for whether the assigned memory for the data block needs to be freed or not by the class itself. It seems that the =operator interpreted the variable as whether the memory is assigned to the data block. This wrong interpretation was causing values not to propagate to RubySystem::m_mem_vec_ptr. This caused major issues with restoring from checkpoints when using a protocol which verified that the cache data was consistent with the backing store (i.e. MOESI-hammer).
      Ruby: Modify Scons so that we can put .sm files in extras Also allows for header files which are required in slicc generated code to be in a directory other than src/mem/ruby/slicc_interface.
      Ruby: Use block size in configuring directory bits in address This patch replaces hard coded values used in Ruby's configuration files for setting directory bits with values based on the block size in use.
      Ruby: Fix typo in Slicc if-statement AST error
      Ruby: More descriptive message buffer connection fatal
      Ruby: Update backing store option to propagate through to all RubyPorts
      Ruby: Remove assert in RubyPort retry list logic
      config: Add configs scripts used in Learning gem5
      tests: Add tests for the Learning gem5 scripts
      stats: files for regression tests for Learning gem5 scripts
      tests: Update learning gem5 tests scripts with copyright
      misc: merge with sytle checker fix
      style: Make the style fixers safe
      stats: Add more information to uninitialized error
      cpu: Remove branch predictor function predictInOrder
      tests: Regression stats updated for recent patches
      misc: Add Python.h header to pyevents.hh
      misc: Update #!env calls for python to explicit version
      x86: Fix implicit stack addressing in 64-bit mode
      misc: Add a CONTRIBUTING document
      misc: Add MAINTAINERS file
      dev: Add ATA command used in recent Linux kernels
      scons: Add use_tuntap to export list
      sim: Updated ClockedObject power state warning
      cpu-o3: Add M5_VAR_USED to variable
      learning_gem5: Add code for simple SimObject
      learning_gem5: Add code for hello-goodbye example
      learning_gem5: Adds the simple MemObject code
      learning_gem5: Adding code for SimpleCache
      misc: Update MAINTAINERS with learning-gem5 tag
      ext: Upgrade PyBind11 to version 2.2.1
      misc: Updates for gcc7.2 for x86
      dev: Fix i8042 device errors
      mem-cache: Fix missing overrides
      learning_gem5: Update README for Learning gem5
      tests: Add test program for C++ threads
      sim-se: Add /sys/devices/system/cpu/online file
      arch-x86,sim-se: Bump kernel version to 3.2
      sim-se: Fix fallthrough in prlimit
      arch-x86,sim-se: Enable prlimit syscall
      learning_gem5: Add a simple Ruby protocol
      learning_gem5: Add config files for MSI protocol
      learning_gem5: Ruby random tester files for MSI
      learning_gem5: Add a simple config for MI_example
      ruby: Make sure addresses print in hex
      mem-cache: fix missing overrides in repl policies
      docs: Fix power model doxygen
      ruby: Revamp standalone SLICC script
      mem-cache: Fix TempCacheBlock insert
      misc: Fix BaseCPU doxygen
      misc: Update CONTRIBUTING with gerrit changes
      configs: Always exit with code 0
      tests: Fix hello.c test program
      tests: Add documentation for new testing code
      tests: Add Makefiles for hello
      tests: Add explicit build test
      ext: Cherry-pick pybind change to support GCC 8
      misc: Appease GCC 8
      tests: Convert tgen-simple-memory to new framework
      tests: Convert memtest to new framework
      ext,test: Provide default terminal size
      ext,tests: Make return code based on test results
      tests,ext: Add skip_cleanup implementation for TempdirFixture
      ext,tests: Add back failing exceptions
      tests: Fix race condition in download fixture
      tests: Use full path for DownloadedProgram
      tests: Add ignore for stdin not terminal
      tests: Add Jenkins presubmit and continuous test scripts
      mem: Reverse order of write/read mem queue check
      configs: Add full path for learning_gem5 binaries
      configs: Fix import path error in learning_gem5 part3
      learning_gem5: Fix vector port panic in SimpleCache
      learning_gem5,configs: Update ruby_test
      tests: Add protocol as an option to SconsFixture
      configs: Generalize FileSystemConfig for non se.py
      misc: Update MAINTAINERS
      sim-se: Fix invalid delete of params on clone
      misc: Update MAINTAINERS file
      misc: Add Giacomo Travaglini to PMC
      sim: Fix pseudo instruction parameter loading
      arch-x86: Change guest ABI for x86 pseudo insts
      ext: Fix tmpfiles in testlib
      tests: Update tests to save output on failure
      configs: Remove old boot files
      scons: Update python-config flags for python3.8

Korey Sewell <ksewell@umich.edu> (84):
      sparc: compilation fixes for inorder Add a few constants and functions that the InOrder model wants for SPARC. * * * sparc: add eaComp function InOrder separates the address generation from the actual access so give Sparc that functionality * * * sparc: add control flags for branches branch predictors and other cpu model functions need to know specific information about branches, so add the necessary flags here
      sparc: update simple cpu regressions use stats file generated by zizzer
      sparc: merge regr. updates w/last update
      sparc: don't use directcntrl branch flag this flag is only used for early branch resolution in the O3 model (of pc-relative branches) but this isnt cleanly working even when the branch target code is added for sparc. For now, we'll ignore this optimization and add a todo in the SPARC ISA for future developers
      o3:  missing newlines on some dprintfs
      sparc: update o3 regressions
      sparc: update long regressions
      inorder: use m5_hash_map for skedCache since we dont care about if the cache of instruction schedules is sorted or not, then the hash map should be faster
      simple-thread: give a name() function for debugging w/the SimpleThread object
      inorder: use flattenIdx for reg indexing - also use "threadId()" instead of readTid() everywhere - this will help support more complex ISA indexing
      inorder: add types for dependency checks
      inorder: update bpred code clean up control flow to make it easier to understand
      cpus/isa: add a != operator for pcstate
      inorder: inst. iterator cleanup get rid of accessing iterators (for instructions) by reference
      inorder: update support for branch delay slots
      inorder: ISA-zero reg handling ignore writes to the ISA zero register
      inorder: handle faults at writeback stage call trap function when a fault is received
      inorder: assert on macro-ops provide a sanity check for someone coding a new architecture
      inorder: find register dependencies "lazily" Architectures like SPARC need to read the window pointer in order to figure out it's register dependence. However, this may not get updated until after an instruction gets executed, so now we lazily detect the register dependence in the EXE stage (execution unit or use_def). This makes sure we get the mapping after the most current change.
      inorder: scheduling for nonspec insts make handling of speculative and nonspeculative insts more explicit
      inorder: register file stats keep stats for int/float reg file usage instead of aggregating across reg file types
      inorder: addtl functionaly for inst. skeds add find and end functions for inst. schedules that can search by stage number
      inorder: simplify handling of split accesses
      inorder: make marking of dest. regs an explicit request formerly, this was implicit when you accessed the execution unit or the use-def unit but it's better that this just be something that a user can specify.
      inorder: DynInst handling of stores for big-endian ISAs The DynInst was not performing the host-to-guest translation which ended up breaking stores for SPARC
      sparc: init. cache state in TLB valgrind complains and its a potential source of instability, so go ahead and set it to 0 to start
      inorder: use setupSquash for misspeculation implement a clean interface to handle branch misprediction and eventually all pipeline flushing
      inorder: cleanup intercomm. structs/squash info
      inorder: implement trap handling
      inorder: update event priorities dont use offset to calculate this but rather an enum that can be updated
      inorder: add flatDestReg member to dyninst use it in reg. dep. tracking
      imported patch squash_from_next_stage
      imported patch recoverPCfromTrap
      inorder: no dep. tracking for zero reg this causes forwarding a bad value register value
      inorder: remove stalls on trap squash
      inorder: priority for grad/squash events define separate priority resource pool squash and graduate events
      inorder: branch predictor update only update BTB on a taken branch and update branch predictor w/pcstate from instruction --- only pay attention to branch predictor updates if the the inst. is in fact a branch
      inorder: support for compare and swap insts dont treat read() and write() fields as mut. exclusive
      inorder: remove decode squash also, cleanup comments for gem5.fast compilation
      inorder: don't stall after stores once a ST is sent off, it's OK to keep processing, however it's a little more complicated to handle the packet acknowledging the store is completed
      inorder: don't stall after stores once a ST is sent off, it's OK to keep processing, however it's a little more complicated to handle the packet acknowledging the store is completed
      inorder: cleanup events in resource pool remove events in the resource pool that can be called from the CPU event, since the CPU event is scheduled at the same time at the resource pool event. ---- Also, match the resPool event function names to the cpu event function names ----
      inorder: optionally track faulting instructions
      inorder: bug in mdu segfault was caused by squashed multiply thats in the process of an event. use isProcessing flag to handle this and cleanup the MDU code
      inorder: treat SE mode syscalls as a trapping instruction define a syscallContext to schedule the syscall and then use syscall() to actually perform the action
      inorder: redefine DynInst FP result type Sharing the FP value w/the integer values was giving inconsistent results esp. when their is a 32-bit integer register matched w/a 64-bit float value
      inorder: fetchBuffer tracking calculate blocks in use for the fetch buffer to figure out how many total blocks are pending
      inorder: remove memdep tracking for default pipeline speculative load/store pipelines can reenable this
      inorder: make InOrder CPU FS compilable/visible make syscall a SE mode only functionality copy over basic FS functions (hwrei) to make FS compile
      alpha: make hwrei a control inst this always changes the PC and is basically an impromptu branch instruction. why not speculate on this instead of always be forced to mispredict/squash after the hwrei gets resolved?
      inorder: stall stores on store conditionals & compare/swaps
      inorder: squash and trap behind a tlb fault
      inorder: explicit fault check Before graduating an instruction, explicitly check fault by making the fault check it's own separate command that can be put on an instruction schedule.
      inorder: check for interrupts each tick use a dummy instruction to facilitate the squash after the interrupts trap
      inorder: register ports for FS mode handle "snoop" port registration as well as functional port setup for FS mode
      inorder: dont handle multiple faults on same cycle if a faulting instruction reaches an execution unit, then ignore it and pass it through the pipeline.
      alpha: naming for dtb faults Just "dfault" gets confusing while debugging. Why not differentiate whether it's an access violation or page fault
      alpha: fix warn_once for prefetches
      inorder: handle serializing instructions including IPR accesses and store-conditionals. These class of instructions will not execute correctly in a superscalar machine
      inorder/dtb: make sure DTB translate correct address The DTB expects the correct PC in the ThreadContext but how if the memory accesses are speculative? Shouldn't we send along the requestor's PC to the translate functions?
      inorder: use trapPending flag to manage traps
      inorder: use separate float-reg bits function in dyninst this will make sure we get the correct view of a FP register
      inorder: clear fetchbuffer on traps implement clearfetchbufferfunction extend predecoder to use multiple threads and clear those on trap
      mips: mark unaligned access flag as true
      inorder: add necessary debug flag header files
      inorder: se compile fixes
      inorder:tracing: fix fault tracing bug
      inorder: SE mode TLB faults handle them like we do in FS mode, by blocking the TLB until the fault is handled by the fault->invoke()
      inorder: cleanup dprintfs in cache unit
      inorder: se: squash after syscalls
      inorder: clear reg. dep entry after removing from list this will safeguard future code from trying to remove from the list twice. That code wouldnt break but would waste time.
      inorder: update SE regressions
      inorder: add eon regression
      inorder: add 10.linux-boot regression
      inorder: update eon regr w/eon info previous commit copied over O3 stats, this one puts the inorder ones in the right place
      inorder: gem5.opt compile variable name typo.
      inorder: merge gabes compile fix
      inorder: alpha-hello regression update
      alpha:o3:simple: update simout/err files A few prior changesets have changed the gem5 output in a way that wont cause errors but may be confusing for someone trying to debug the regressions. Ones that I caught were: - no more "warn: <hash address" - typo in the ALPHA Prefetch unimplemented warning
      merge regression updates
      inorder: sparc: add hello world regression - add InOrderCPU compile option to SPARC - add hello regression for SPARC
      inorder: sparc: add 02.insttest regression
      alpha:hwrei:rollback for o3 change hwrei back to being a non-control instruction so O3-FS mode will work add squash in inorder that will catch a hwrei (or any other genric instruction) that isnt a control inst but changes the PC. Additional testing still needs to be done for inorder-FS mode but this change will free O3 development back up in the interim
      inorder-fs: temp. regression removal remove this regression till the fix for the hwrei instruction is put in

Bobby R. Bruce <bbruce@ucdavis.edu> (82):
      ext: Updated Pybind11 to version 2.4.1.
      misc: Added line wrapping functionality for Sim-Object desc
      dev, misc: Fixing "may be used unitialized" compilation error
      tests: Migrated refcnt.cc test from src/unitttest to a gtest
      tests, misc: Updating TESTING.md to describe running unit tests
      misc: Updating contributing.md to discuss Gerrit guidelines
      Tests: Added GTests for base/callback.cc
      tests: Added GTests for base/atomicio.cc
      tests: Added GTests for base/bitfield.hh
      tests: Added GTests for base/str.cc
      tests, base: Fixed incorrect implementation of StrTest.ToLower test.
      tests,base: Added GTests for base/match.cc
      tests,base: Added GTests for base/condcodes.hh
      tests: Added GTests for base/types.cc
      tests: Added GTests for base/chunk_generator.hh
      tests: Added GTests for byteswap.hh
      tests, base: Added GTests for base/intmath.cc
      test,base: Added GTest for base/loader/image_file_data.cc
      tests,base: Added GTests for exec_ecoff.h and exec_aout.h
      misc: CONTRIBUTING.md to advise linking Jira Issues in commits
      scons: Added channel_addr.cc dependency to channel_addr GTest
      tests: Setup Kokoro to run the GTest suite.
      misc: Added 'fastmodel' to MAINTAINERS
      tests: Added functionality to allow the ignoring of test suites
      tests: Updated gtest/logging.cc to print log rather than fail.
      tests,base: Added GTest for base/socket.cc
      tests: Migrated old quick/se/00.hello tests
      tests: Renaming tests to include dash between words
      tests: Updated tests to download from http://dist.gem5.org
      misc: Updated CONTRIBUTING.md to discuss branches
      tests: Removing 10.mcf tests
      tests: Removed 20.parser tests
      tests: Removed 40.perlbmk tests
      tests: Removed 30.eon tests
      tests: Removed 60.bzip2 tests
      tests: Removed 50.vortex tests
      tests: Removed the old ALPHA tests
      tests: Removed old quick/se/00.hello test resources
      tests: Removed 70.twolf tests
      misc: Updated old gem5 website URLs with new gem5 website URLs
      misc: Removed old contribution guidelines regarding branches
      misc: Updated CONTRIBUTING.md for master-as-stable setup
      misc: Updated CONTRIBUTING.md to discuss WIP changes
      misc: Updated CONTRIBUTING.md to discuss releases and hotfixes
      misc: Updated git-commit-msg.py to print rejected commit
      misc: Updated Doxygen to state version as v19.0.0.0
      misc: Updated CONTRIBUTING.md to reflect altered release policy
      misc: Merged release-staging-v19.0.0.0 into develop
      tests: Migrated insttest tests to be run via  `./main.py run`
      misc: merge branch 'release-staging-v19.0.0.0' into develop
      tests: Removed unneeded 02.insttest data
      Merge "misc: merge branch 'release-staging-v19.0.0.0' into develop" into develop
      tests,misc: Updated tests/.gitignore to ignore test resources
      tests: Fixed .testignore from 'arch64' to 'aarch64'
      tests: Migrated 51.memcheck scons-based tests to testlib
      tests: Updated 'hello_se' to include other CPU types
      tests: Added MIPS ISA test to learning_gem5/part1_tests.py
      tests,misc: Created presubmit.yaml Google Cloud Build files
      tests: Migrated 80.dram scons-based tests to testlib framework
      tests,arch-alpha: Removing ALPHA ISA from testlib config
      tests: Migrated 40.m5threads-test-atomic scons tests to testlib
      tests: Removed old scon-based 40.m5threads-test-atomic tests
      tests: Increased Kokoro's timeout to 5 hours
      misc: Added Dockerfile for Python3
      misc: Added Dockerfile for minimum gem5 dependencies
      misc: Added Dockerfile for GCC of different versions
      misc: Added Dockerfile for clang
      tests,learning-gem5: Moved MIPS ISA test from part 1 to long
      tests: Migrated 10.linux-boot scons-based test to testlib
      tests,misc: Updated presubmit YAML to use main.py '-t' flag
      base,misc: Added version to code
      tests: Removed "tests/long"
      tests: Removed "tests/quick"
      misc: Removed unneeded Doxygen pages
      misc,tests: Updated and generalized the resource url for tests
      misc: Added RELEASE-NOTES.md
      misc: Updated version to 20.0.0.0
      misc: Updated resources bucket url to version 20
      misc: Added Dockerfile for Ubuntu 20.04
      misc: Removed python3 Dockerfile
      misc: Added python-six as a dependency in 18.04 docker
      misc: Added missing optional dependencies to 18.04 Docker

Ciro Santilli <ciro.santilli@arm.com> (78):
      dev, arm: accept and ignore writes to GIC APRn registers
      dev-arm: improve Pl390 parameters
      dev-arm: rename Pl390 to GicV2
      config, dev-arm: Fix UART handling baremetal mode
      dev-arm: fix build to missing Pl390 to Gicv2 rename
      scons: remove as version check
      dev, arm: remove the RealViewEB platform
      syscall_emul: update arm uname release to 3.7.0+
      arm: update hint instruction decoding to match ARMv8.5
      arm: treat aarch64 hints as NOPs instead of panic
      python: Add utility function to override config parameters
      config: add --param to fs.py, se.py and fs_bigLITTLE.py
      syscall_emul: implement arm openat
      syscall_emul: fix openat when directory does not end in "/"
      scons: add --gold-linker to link with the gold linker
      systemc: set endianess to fix build for ARM host
      sim-se: only implement getdentsFunc on supported hosts
      arch-arm: fix the aarch64 GDB stub
      arch-arm: only change the pc address when GDB registers are set
      base: increase the GDB buffer size dynamically
      arch-arm: correctly set floats from GDB on aarch64
      base: add support for GDB's XML architecture definition
      scons: allow embedding arbitrary blobs into the gem5 executable
      scons: add helpers to access GDB XML description files
      ext: import GDB XML target description files for arm
      arch-arm: implement the GDB XML target description for ARM
      dev-arm: fix --generate-dtb for ARM
      configs, arch-arm: don't search for default DTB and kernel
      configs: fs.py remove --generate-dtb and enable it by default
      tests: fix arm regression due to kernel not found
      scons: fix unused auto-generated blob variable in clang
      arch-arm: implement floating point aarch32 VCVTA family
      python: fix tracing after Python 3 refactor
      arch-arm: rename operands to match spec in isa/formats/fp.isa
      arch-arm: implement VMINNM and VMAXNM SIMD version
      arch-arm: implement VMINNM and VMAXNM scalar version
      sim-se: add a release parameter to Process.py
      arch-arm: implement VMINNM scalar thumb
      scons: allow passing arbitrary CCFLAGS and LDFLAGS from the CLI
      base: assert that stats bucket size is greater than 0
      arch-arm, cpu: fix ARM ubsan build on GCC 7.4.0
      mem-ruby: fix build with PROTOCOL=MOESI_hammer
      cpu: reset byte_enable across writeMem calls
      arch-arm: fix GDB stub after SVE
      config: skip access to branchPred in ARM KVM
      kvm, arm: fix the size of MISCREG_FPSR and MISCREG_FPCR
      sim-se: fix futexFunc TGT_FUTEX_WAIT always selects bitset
      cpu, sim-se: don't wake up threads that are awake in futex
      tests: add squashfs make to m5-exit
      system-arm: ignore .gen directory that contains DTS files
      system-arm: gitignore the aarch64 bootloader object files
      sim-se: don't wake up threads that are halted on futex
      cpu: log thread activate and suspend with --debug-flags Thread
      base: add the --debug-flag to DPRINTF output with FmtFlag
      base: create DPRINTF_UNCONDITIONAL
      base: generalize ExecTicks to all messages with FmtTicksOff
      cpu: prefix ExecEnable to the native trace to match DPRINTF
      sim: prefix --debug-flags Event logs with the flag name
      dev-arm: Automatically assign PCI device ids in attachPciDevice
      base: add the FmtStackTrace debug option
      dev-virtio: use diod basename as the default 9p path
      dev-virtio: don't set the 9p default root
      dev-virtio: VIO9P turns on diod verbose output with -d 1
      dev-virtio,configs: expose 9p diod virtio on ARM
      scons: fix --gold-linker build after --as-needed
      dev-arm: add boot_loader param to RealView setupBootLoader
      config: add --bootloader to fs.py and fs_bigLITTLE.py
      configs: fs.py can take multiple disk images on most ISAs
      configs: allow fs.py and fs_bigLITTLE.py to work without M5_PATH
      scons,systemc: disable systemc tests scons by default
      sim: print --debug-flag Event execution and instance ID
      configs: fix forwarding of --bootloader to fs.py
      configs: make --disk-images optional in fs.py
      sim-se: add missing path redirection to mmap createObjectFile
      configs: remove exec of Options.py from ruby_mem_test.py
      mem: make MemTest panic on a packet error
      tests: fix the memcheck test
      tests: create tests for various traffic generators on NULL

Mitch Hayenga <mitch.hayenga@arm.com> (74):
      Device: Make changes necessary to support a coherent page walker cache.
      Fix memory corruption issue with CopyStringOut()
      stats: Provide a mechanism to get a callback when stats are dumped.
      mem: Fix use-after-free bug
      mem: Make LL/SC locks fine grained
      arm: add access syscall for ARM SE mode
      mem: Fix cache latency bug Fixes a latency calculation bug for accesses during a cache line fill.
      sim: Fix two bugs relating to software caching of PageTable entries.
      base: Fix race condition in the socket listen function
      arm: Enable umask syscall in SE mode
      mem: prefetcher: add options, support for unaligned addresses
      mem: Allowed tagged instruction prefetching in stride prefetcher For systems with a tightly coupled L2, a stride-based prefetcher may observe access requests from both instruction and data L1 caches.  However, the PC address of an instruction miss gives no relevant training information to the stride based prefetcher(there is no stride to train).  In theses cases, its better if the L2 stride prefetcher simply reverted back to a simple N-block ahead prefetcher.  This patch enables this option.
      mem: Add additional tolerance to stride prefetcher Forces the prefetcher to mispredict twice in a row before resetting the confidence of prefetching.  This helps cases where a load PC strides by a constant factor, however it may operate on different arrays at times. Avoids the cost of retraining.  Primarily helps with small iteration loops.
      scons: Fixes uninitialized warnings issued by clang
      scons: Fix clang version identification for OSX
      arm: Don't use a stack allocated mnemonic
      mem: Don't print out the data of a cache block
      cpu: Fix case where o3 lsq could print out uninitialized data
      cpu: Fix setTranslateLatency() bug for squashed instructions
      util: Valgrind suppression addition
      mem: Squash prefetch requests from downstream caches
      ext: clang fix for flexible array members
      mem: Properly set cache block status fields on writebacks
      mips: Fix RLIMIT_RSS naming
      config: Change parsing of Addr so hex values work from scripts
      dev: Avoid invalid sized reads in PL390 with DPRINTF enabled
      arch: Properly guess OpClass from optional StaticInst flags
      cpu: Change writeback modeling for outstanding instructions
      cpu: Fix o3 front-end pipeline interlock behavior
      cpu: Add a fetch queue to the o3 cpu
      cpu: Fix incorrect speculative branch predictor behavior
      cpu: Fix SMT scheduling issue with the O3 cpu
      cpu: Fix o3 quiesce fetch bug
      cpu: Fix cache blocked load behavior in o3 cpu
      arm: Mark v7 cbz instructions as direct branches
      arm: Fix v8 neon latency issue for loads/stores
      cpu: Fix o3 drain bug
      x86: Flag instructions that call suspend as IsQuiesce
      arm: Make memory ops work on 64bit/128-bit quantities
      mem: Add accessor function for vaddr
      cpu: Only iterate over possible threads on the o3 cpu
      mem: Remove the GHB prefetcher from the source tree
      cpu: Add ExecFlags debug flag
      alpha,arm,mips,power,x86,cpu,sim: Cleanup activate/deactivate
      cpu: Remove unused deallocateContext calls
      cpu: Remove Ozone CPU from the source tree
      cpu: Add drain check functionality to IEW
      cpu: Add writeback modeling for drain functionality
      mem: Delete unused variable in Garnet NetworkLink
      mem: Add parameter to reserve MSHR entries for demand access
      mem: Rework the structuring of the prefetchers
      mem: Fix bug relating to writebacks and prefetches
      mem: Fix event scheduling issue for prefetches
      mem: Change prefetcher to use random_mt
      cpu: Change thread assignments for heterogenous SMT
      config,cpu: Add SMT support to Atomic and Timing CPUs
      cpu: Add per-thread monitors
      arm: SMT MPIDR Setting
      isa,cpu: Add support for FS SMT Interrupts
      cpu,isa,mem: Add per-thread wakeup logic
      arm: Change TLB Software Caching
      arm: Squash after returning from exceptions in v7
      cpu: Add instruction opclass histogram to minor
      cpu: Fix BTB threading oversight
      cpu: Add an indirect branch target predictor
      mem: Remove threadId from memory request class
      cpu: Fix BTB threading oversight
      cpu: Add an indirect branch target predictor
      cpu: Implement per-thread GHRs
      mem: Remove threadId from memory request class
      isa: Modify get/check interrupt routines
      cpu: Add SMT support to MinorCPU
      cpu: Fix Minor SMT WFI/drain interaction issues
      isa,arm: Add missing AArch32 FP instructions

Adrian Herrera <adrian.herrera@arm.com> (59):
      dev-arm: pending SMMU transl update on constructor/destructor
      dev-arm: drain implementation for SMMUv3
      configs: root, platform options in fs bigLITTLE
      dev-arm,system-arm: missing GICv3 ranges property
      dev-arm: Implement invalidateVA/VAA in SMMUv3 WalkCache
      dev-arm: modify GICv3 ITS default addr
      dev-arm: Gicv3 ITS device tree autogen
      system-arm: Add ITS node in platforms/vexpress_gem5_v2_base.dtsi
      arch-arm: generic method for getting an ArmSystem
      dev-arm: optional instantiation of GICv3 ITS
      arch-arm: fix routeToHyp for AArch64 in faults
      arch-arm: R/W interface to AArch32 HCR2 misc reg
      arch-arm: default MIDR for Armv8 ISA processors
      dev-arm: device name in AmbaFake accesses
      dev-arm: GenericTimer, freq as 32-bit value
      dev-arm: GenericTimer, configurable base and low freqs
      sim: kernelExtras if no kernel provided
      arch-arm: AArch64 trap check, arbitrary ECs/Imms
      arch-arm: Secure EL2 checking
      python: fix "fatal" usage in fdthelper
      sim: kernelExtras optional load addresses
      arch-arm: Semihosting, fix SYS_FLEN
      configs-arm: enable PMU instantiation in CpuCluster
      dev-arm: GICv3, handle GICR_ICFGR0 WI behaviour
      arch-arm: Semihosting, specify files root dir
      misc: Reflect changes of arm bootloader name
      dev-arm: VExpress_GEM5_Base, fix daughterboard reference
      system-arm: bigLITTLE with VExpress_GEM5_V2 in dtb
      arch-arm: Virtualization Host Extensions checking
      arch-arm: ELIsInHost, check VHE and SecEL2
      dev-arm: add FixedClock SimObject
      dev-arm: VExpress_GEM5_Base, add refclock 32KHz
      dev-arm: add Watchdog Module SP805 model
      dev-arm: SP805 peripherals in VExpress_GEM5_Base
      system-arm: AArch64 boot, init CNTFRQ_EL0
      arch-arm: reg access permissions highest EL helper
      arch-arm: AArch64 reg access HCR_EL2.E2H filter
      arch-arm: Fix CNTFRQ_EL0 permission bits
      misc: pass ThreadContext on ISA clear
      arch-arm: ArmISA::clear, inval TLB cached miscregs
      dev-arm: default _on_chip_memory on RealView
      dev-arm: RealView, add support for off-chip memory
      dev-arm: PL031, fix AMBA ID and clock names
      dev-arm: Add flash0 memory to VExpress_GEM5 platform
      dev-arm: Add trusted SRAM memory to VExpress_GEM5 platform
      dev-arm: Add trusted SP805 to VExpress_GEM5 platform
      dev-arm: Add missing UARTs (PL011) to VExpress_GEM5 platform
      dev-arm: Refactor GenericTimer
      arch-arm: GenericTimer arch regs, perms/trapping
      arch-arm: Rewrite getMPIDR
      dev-arm: add FVP Base Power Controller model
      dev-arm: SMMUv3, single interconnect attachment
      dev-arm: Instantiate FVPBasePwrCtrl in VExpress_GEM5
      cpu: IntrControl, clear all and check helpers
      dev-arm: Adjust idreg value in RealViewCtrl
      arch-arm, dev-arm: WakeRequest implementation
      arch-arm, dev-arm: Autogen PSCI node in DTB
      configs: add option for memory channel intlv.
      dev-arm: Add VExpress_GEM5_Foundation platform

Alec Roelke <alec.roelke@gmail.com> (56):
      arch: [Patch 1/5] Added RISC-V base instruction set RV64I
      riscv: [Patch 2/5] Added RISC-V multiply extension RV64M
      riscv: [Patch 3/5] Added RISCV floating point extensions RV64FD
      riscv: [Patch 4/5] Added RISC-V atomic memory extension RV64A
      riscv: [Patch 5/5] Added missing support for timing CPU models
      riscv: [Patch 6/5] Improve Linux emulation for RISC-V
      riscv: [Patch 7/5] Corrected LRSC semantics
      riscv: [Patch 8/5] Added some regression tests to RISC-V
      riscv: Fix crash when syscall argument reg index is too high
      riscv: Remove ECALL tests from insttest
      riscv: enable unaligned memory accesses
      riscv: fix error on memory op address overflow
      riscv: add remote gdb support
      riscv: fix compatibility with Linux toolchain
      riscv: fix Linux problems with LR and SC ops
      riscv: Fix crashes with large or frequent mmaps
      cpu: fix problem with forwarding and locked load
      arch-riscv: Fix bad stack initialization
      tests: Update RISC-V hello test and stats
      arch-riscv: Restructure ISA description
      arch-riscv: Add support for compressed extension RV64C
      arch-riscv,tests: Add insttests for RV64C
      riscv: Add unused attribute to some registers.hh constants
      riscv: Fix bugs with RISC-V decoder and detailed CPUs
      tests: Upate RISC-V binaries and results
      riscv: Define register index constants using literals
      sim-se: Add prlimit system call
      sim-se: Add default to SyscallDesc constructor
      arch-riscv: Add missing system calls
      arch-riscv: Move static_inst into a directory
      arch-riscv: Move standard ops out of ISA
      arch-riscv: Move unknown out of ISA description
      arch-riscv: Move parts of mem insts out of ISA
      arch-riscv: Remove static parts of AMOs out of ISA
      arch-riscv: Add missing license paragraphs
      arch-riscv: Remove spaces around ea_code
      arch-riscv: use sext rather than manual masks
      arch-riscv: Move compressed ops out of ISA
      arch-riscv: Increase maximum stack size
      arch-riscv: Define AT_RANDOM properly
      arch-riscv: Remove "magic" syscall number constant
      arch-riscv: Correct syscall argument reg count
      arch-riscv: Make use of ImmOp's polymorphism
      arch-riscv: Don't crash when printing unknown CSRs
      arch-riscv: Fix floating-point conversion bugs
      arch-riscv: Fix floating-poing op classes
      arch-riscv: Fix compressed branch op offset
      arch-riscv: Update CSR implementations
      arch-riscv: Add support for fault handling
      arch-riscv: Add support for trap value register
      arch-riscv: Add xret instructions
      arch-riscv: Fix reset function and style
      arch-riscv: Add interrupt handling
      arch-riscv: Implement MHARTID CSR
      arch-riscv: fix GDB register cache
      arch-riscv: set MaxMiscDestRegs to 2

Brad Beckmann <brad.beckmann@amd.com> (48):
      Ruby: Add support for functional accesses This patch rpovides functional access support in Ruby. Currently only the M5Port of RubyPort supports functional accesses. The support for functional through the PioPort will be added as a separate patch.
      config: removed unnecessary slashes This patch removes unnecessary slashes from a couple of python scripts.
      Regression: Updates regression outputs for Ruby memtest This patch updates the regression outputs for Ruby memtest. This was required because of the changes carried out by the addition of functional access support to Ruby.
      MOESI_hammer: Fixed uniprocessor DMA bug
      ruby: added generic dma machine
      physmem: Improved fatal message for size mismatch
      MOESI_hammer: fixed L2 to L1 infinite stalls and deadlock
      regress: updated hammer memtest and rubytest outputs
      rubytest: seperated read and write ports.
      MOESI_hammer: fixed bug with single cpu + flushes, then modified the regression tester to check this functionality
      python: added __nonzero__ function to SimObject Bool params
      MOESI_hammer: tbe allocation and dependent wakeup fixes
      slicc: fixed error message when the type has no inheritance
      sim-ruby: checkpointing fixes and dependent eventq improvements
      ruby: set SimpleTiming as the default cpu
      regress: ruby random tester and hammer stats updates
      rubytest: remove spurious printf
      ruby: changes how Topologies are created
      cpu: added assertions to ensure the correct proxies are used
      ruby: banked cache array resource model
      imported patch jason/slicc-external-structure-fix
      # User Brad Beckmann <Brad.Beckmann@amd.com> ruby: fixed msgptr print call
      ruby: remove the cpu assumptions for the random tester
      # User Brad Beckmann <Brad.Beckmann@amd.com> ruby: fixed fatal print statement
      x86: logSize and lruSeq are now optional ckpt params
      regress: ruby stat additions and config changes
      ruby: improved DRAM reset comment
      x86: added page size in bytes tlb entry function
      ruby: removed the very old double trigger hack
      ruby: add useful dprints to sequencer
      ruby: re-added the addressToInt slicc interface function
      util: added .mk makefile extension to file_types.py
      util: added .cl OpenCL extension to file_type.py
      slicc: fatal->panic on invalid transitions
      slicc: improved stalling support in protocols
      slicc: enable overloading in functions not in classes
      slicc: fix error in conflicing symbol declaration
      ruby: improved stall and wait debugging
      ruby: removed invalid assert in message comparitor
      mem: add boolean to disable PacketQueue's size sanity check
      ruby: added stl vector of ints to be used by SLICC
      ruby: more flexible ruby tester support
      regress: updates required for the compute-gpu patches
      ruby: changed all references to numCPs to num-cp
      ruby: removed Write_Only AccessPermission
      mem: minor dprintf fix to abstract mem
      ruby: correct size for partial memory writes
      mem-ruby: Consistent dprintf formats for issue outcomes

Joel Hestness <jthestness@gmail.com> (43):
      Ruby: remove unused functions in CacheMemory: get/setMemoryValue
      ruby: tag and data cache access support
      Ruby Memory Controller: Fix clocking
      stats: Update Ruby regressions for memory controller fix
      Base CPU: Initialize profileEvent to NULL The profileEvent pointer is tested against NULL in various places, but it is not initialized unless running in full-system mode. In SE mode, this can result in segmentation faults when profileEvent default intializes to something other than NULL.
      Standard Switch: Drain the system before switching CPUs When switching from an atomic CPU to any of the timing CPUs, a drain is unnecessary since no events are scheduled in atomic mode. However, when trying to switch CPUs starting with a timing CPU, there may be events scheduled. This change ensures that all events are drained from the system by calling m5.drain before switching CPUs.
      se.py Ruby: Connect TLB walker ports In order to ensure correct functionality of switch CPUs, the TLB walker ports must be connected to the Ruby system in x86 simulation.
      RubyPort and Sequencer: Fix draining
      O3 IEW: Make incrWb and decrWb clearer
      Ruby System, Cache Recorder: Use delete [] for trace vars
      Ruby: Order profilers based on version
      Ruby: Add field to slicc machine for generic type
      Ruby: Delete packet requests during warmup
      Ruby: Fix RubyPort evict packet memory leak
      Configs: Fix handling of maxtick and take_checkpoints
      stats: Bump Ruby stats for new changesets
      ruby: MessageBuffer: Remove unused m_size variable
      Configs: Fix up maxtick and maxtime
      ruby: Statically allocate stats in SimpleNetwork, Switch, Throttle
      config: Initialize and check cpt_starttick
      cpu: Dynamically instantiate O3 CPU LSQUnits
      ruby: Fix Topology throttle connections
      configs: Fix ruby_fs.py cache line size
      sim: More rigorous clocking comments
      Util: Do not style check symlinks
      syscall_emul: Return correct writev value
      ruby: Fix RubySystem warm-up and cool-down scope
      ruby: Remove the RubyCache/CacheMemory latency
      ruby: Change PerfectCacheMemory::lookup to return pointer
      ruby: Expose MessageBuffers as SimObjects
      ruby: Protocol changes for SimObject MessageBuffers
      stats: Bump for MessageBuffer, cache latency changes
      syscall_emul: Bandage readlink /proc/self/exe
      ruby: RubyMemoryControl delete requests
      ruby: Fix memory leak in AbstractController
      ruby: RubyPort delete snoop requests
      arch, x86: Delete packet in IntDevice::recvResponse
      ruby: Fix CacheMemory allocate leak
      sim: Don't quiesce UDelayEvents with 0 latency
      stats: Update for UDelayEvent quiesce change
      ruby: Fix block_on behavior
      ruby: Make MessageBuffers actually finite sized
      sim: Fix SE mode checkpoint restore file handling

Geoffrey Blake <geoffrey.blake@arm.com> (36):
      O3: Fix up pipelining icache accesses in fetch stage to function properly
      ARM: Add per-cpu local timers for ARM.
      Fix bugs due to interaction between SEV instructions and O3 pipeline
      Packet: Add derived class FunctionalPacket to enable partial functional reads
      CheckerCPU: Re-factor CheckerCPU to be compatible with current gem5
      CheckerCPU: Make CheckerCPU runtime selectable instead of compile selectable
      CheckerCPU: Add function stubs to non-ARM ISA source to compile with CheckerCPU
      CheckerCPU: Make some basic regression tests for CheckerCPU
      O3/Ozone: Eliminate dead code counting software prefetch insts
      ARM: IT doesn't need to be serializing.
      ARM: Add PCIe support to VExpress_EMM model and remove deprecated ELT
      cpu: Fix rename mis-handling serializing instructions when resource constrained
      cpu: Avoid duplicate entries in tracking structures for writes to misc regs
      config: Fix for port references generated multiple times
      config: Fix ommission of number base in ethernet address param
      config: Fix handling of parents for simobject vectors
      base: Add support for ipv6 into inet.hh/inet.cc
      dev: Fix race conditions in IDE device on newer kernels
      dev: Add support for MSI-X and Capability Lists for ARM and PCI devices
      checker: CheckerCPU handling of MiscRegs was incorrect
      arm: Handle functional TLB walks properly
      arm: Panics in miscreg read functions can be tripped by O3 model
      arch, arm: Preserve TLB bootUncacheability when switching CPUs
      config: Avoid generating a reference to myself for Parent.any
      config: Add hooks to enable new config sys
      config: Add SubSystem container for simobjects
      cache: Fix handling of LL/SC requests under contention
      config: Refactor RealviewEMM to fit into new config system
      config: Add port splicing capability to PortRef class
      config: Fix vectorparam command line parsing
      dev: refactor pci config space for sysfs scanning
      config: Fix typo in Float param
      mem: Enable CommMonitor to output traces in atomic mode
      arm, dev: Fix flash model serialization code typos
      cpu: Query CPU for inst executed from Python
      sim: Implement load_addr_mask auto-calculation

David Hashe <david.hashe@amd.com> (34):
      config: Update location of ruby topologies in help
      slicc: isinstance bugfix
      syscall: Add readlink to x86 with special case /proc/self/exe
      x86: x86 instruction-implementation bug fixes
      cpu: Fixed a bug on where to fetch the next instruction from
      mem: Hit callback delay fix
      slicc: support for multiple message types on the same buffer
      slicc: support for transitions with a wildcard next state
      slicc: improve support for prefix operations
      slicc: fix missing inline function in LocalVariableAST
      slicc: Fix bug in enqueue and peek statements.
      slicc: support for multiple cache entry types in the same state machine
      ruby: give access to cache tag/data latencies from SLICC
      ruby: initialize replacement policies with their own simobjs
      slicc: support for local variable declarations in action blocks
      slicc: support for arbitrary DPRINTF flags (not just RubySlicc)
      ruby: speed up function used for cache walks
      ruby: allocate a block in CacheMemory without updating LRU state
      mem: add request types for acquire and release
      config: add base class for ruby controllers
      ruby: Fix for stallAndWait bug
      ruby: fix deadlock bug in banked array resource checks
      ruby: adds size and empty apis to the msg buffer stallmap
      ruby: expose access permission to replacement policies
      ruby: change advance_stage for flit_d
      ruby: change router pipeline stages to 2
      ruby: rename System.{hh,cc} to RubySystem.{hh,cc}
      mem: add request types for acquire and release
      ruby: split CPU and GPU latency stats
      cpu, mem, sim: Change how KVM maps memory
      tests: Add example of using KVM acceleration with an app
      config: KVM acceleration for apu_se.py
      sim-se: add a faux-filesystem
      configs: faux-filesystem fix w/ ruby in se mode

Gabor Dozsa <gabor.dozsa@arm.com> (33):
      dev: add support for multi gem5 runs
      pseudo inst,util: Add optional key to initparam pseudo instruction
      dev: Distributed Ethernet link for distributed gem5 simulations
      config: Updates for distributed gem5 simulations
      misc: Fix argument handling for m5 initparam util
      style: respect per verifier ignores for git commit
      style: remove extra newline from white space verifier fix method
      style: catch trailing white spaces in make and dts files
      arm, config: Add an example ARM big.LITTLE(tm) configuration script
      arm, config: Fixups for the example big.LITTLE(tm) configuration
      arm, config: Add missing IOCache in bL config
      dev: Fix race conditions at terminating dist-gem5 simulations
      arm,config: Refactor the example big.LITTLE(tm) configuration
      config: Refactor the network switch configuration file
      arm,config: Add dist-gem5 support to the big.LITTLE(tm) config
      config: Change mem_range attribute naming in ARM SimpleSystem
      config, arm: FS configuration for the ARM starter kit
      config, arm: SE configuration for the ARM starter kit
      arch: Fix unserialization of VectorReg value
      cpu-o3: Add cache read ports limit to LSQ
      x86: Mark translation as delayed in case of a hw page table walk
      cpu-o3: Increase LSQ buffer sizes to match max vector length
      cpu-o3: Reset fault status for mem access in pushRequest
      sim: Add getter to fault virtual address
      arch-arm: Add first-/non-faulting load instructions
      cpu: Add first-/non-faulting load support to Minor and O3
      arch-arm: Fix tracing code for SVE gather
      arch-arm: Fix reg dependency for SVE gather microops
      cpu-o3: Fix too strict assert condition in writeback()
      cpu: Fix the type of the effective mem request size
      cpu: Disable MinorCPU value forwarding with write strobes
      cpu: Use enums for O3CPU store value forwarding
      cpu: Disable O3CPU value forwarding with write strobes

Javier Bueno Hedo <javier.bueno@metempsy.com> (31):
      mem-cache: implement a probe-based interface
      mem-cache: fix invalid iterator access
      mem-cache: a missing cast was truncating addresses
      mem-cache: virtual address support for prefetchers
      mem-cache: allow prefetchers to emit page crossing references
      mem-cache: Signature Path Prefetcher
      mem-cache: Access Map Pattern Matching Prefetcher
      mem-cache: Updated version of the Signature Path Prefetcher
      cpu: Made the Loop Predictor a SimObject
      mem-cache: Added the Delta Correlating Prediction Tables Prefetcher
      mem-cache: Irregular Stream Buffer Prefetcher
      cpu: Added 8KB and 64KB TAGE-SC-L branch predictor
      mem-cache: Added the Slim AMPM Prefetcher
      mem-cache: Add a mechanism to iterate all entries of an AssociativeSet
      mem-cache: Added extra information to PrefetchInfo
      mem-cache: Added the Indirect Memory Prefetcher
      mem-cache: Added the STeMS prefetcher
      configs: fix class reference in CacheConfigs
      config: Use the corresponding HPI Caches when using the HPI cpu
      cpu: Added a probe to notify the address of retired instructions
      mem-cache: Fix panic in Indirect Memory prefetcher
      mem-cache: ISB prefetcher was triggering an assertion
      mem-cache: Fix PIF prefetcher compilation error with NULL ISA
      mem-cache: AMPM Prefetcher fails when restoring from a checkpoint
      config: Add flag options to set the hardware prefetchers to use
      configs: Fix duplicate branchPred reference in Simulation.py
      arch-arm: Do not check MustBeOne flag for TLB requests from the prefetcher
      mem-cache: Support for page crossing prefetches
      mem-cache: Accuracy-based rate control for prefetchers
      cpu: Added the Multiperspective Perceptron Predictor (8KB and 64KB)
      cpu: Added the Multiperspective Perceptron Predictor with TAGE (8KB and 64KB)

Tiago Mück <tiago.muck@arm.com> (30):
      sim: Clocked object debug message updated for clarity
      sim: ScopedMigration does nothing if both eqs are the same
      sim-se: Fixed initialization array size
      mem-ruby: Fix MOESI_CMP_directory blocked line handling
      mem-ruby: Prevent response stalls on MOESI_CMP_directory
      mem-ruby: Fix MOESI_CMP_dir debug msg
      mem-ruby: Change MOESI_CMP_Dir L2 addressing
      mem-ruby: Unique ranks for MOESI_CMP_dir in ports
      mem-ruby: Do not change blocked msg enqueue info
      mem-ruby: Hit latencies defined by the controllers
      mem-ruby: Cache latencies for MOESI_CMP_dir
      mem-ruby: MOESI_CMP_dir cleanup
      misc: Added dot_writer for Ruby's network topology
      mem: Add invalid context id check on LLSC checks
      base: Add warn_if_once macro
      mem: Snoop filter support for large systems
      mem: Parameterize coherent xbar sanity checks
      cpu: Fix rescheduling of progress check events
      cpu: TrafficGen as BaseCPU
      cpu: Limit TrafficGen outstanding reqs
      cpu: Additional TrafficGen stats
      base: AddrRange does not merge single interleaved ranges
      misc: dot_writer fixup
      dev-arm: A9SCU fixup
      mem-cache: mark block as dirty when handling SW prefetch
      dev-arm: Check for gem5 extensions in GicV2
      mem-ruby: Allow MessageBuffer functional reads
      mem-ruby: Add functionalReadBuffers to AbstractController
      mem-ruby: SimpleNetwork implementation of functional reads
      mem-ruby: Fix Ruby handling of functional requests

Andrew Bardsley <Andrew.Bardsley@arm.com> (28):
      dev: Fix IsaFake's cxx_header setting
      cpu: Allow setWhen on trace objects
      arm: Add branch flags onto macroops
      cpu: Timebuf const accessors
      cpu: Add flag name printing to StaticInst
      cpu: Useful getters for ActivityRecorder
      cpu: `Minor' in-order CPU model
      cpu: Minor CPU add regression tests for ARM and ALPHA
      sim: Fix checkpoint restore for Ticked
      arm: ISA X31 destination register fix
      style: Fix line continuation, especially in debug messages
      cpu: Fix memory access in Minor not setting parent Request flags
      config: Cleanup .json config file generation
      base: Add getSectionNames to IniFile
      config: Add a --without-python option to build process
      base: Reimplement the DPRINTF mechanism in a Logger class
      sim: SystemC hosting
      mem: Add ExternalMaster and ExternalSlave ports
      cpu: Fix barrier push to store buffer when full bug in Minor
      config: Fix checkpoint restore in C++ config example
      config: SystemC Gem5Control top level additions
      config: Fix to SystemC example's event handling
      arm: Fix TLB ignoring faults when table walking
      cpu: Fix memoryIssueLimit checking in Minor
      cpu: Fix retries on barrier/store in Minor's store buffer
      cpu: Fix a bug in counting issued instructions in MinorCPU
      sim: Update C++ config example to match SystemC example
      config: Added missing types to JSON/INI Python reader

Sean Wilson <spwilson2@wisc.edu> (28):
      x86: Add consistent overrides to process.hh
      tests: Fix a typo for the default MI_example protocol
      sim: Remove DelayFunction
      mem: Move the Rank construction logic to the Rank constructor
      sim: Add generic EventFunctionWrapper
      mem: Replace EventWrapper in PacketQueue with EventFunctionWrapper
      mem: Replace EventWrapper use with EventFunctionWrapper
      cpu, gpu-compute: Replace EventWrapper use with EventFunctionWrapper
      arm: Replace EventWrapper use with EventFunctionWrapper
      dev: Replace EventWrapper use with EventFunctionWrapper
      sim, x86: Replace EventWrapper use with EventFunctionWrapper
      arm: Fix memleak in VGic by adding destructor
      arm: Fix memleak in Pl390 by adding destructor
      mips, x86: Refactor some Event subclasses into lambdas
      sim, gdb: Refactor some Event subclasses into lambdas
      gpu-compute: Refactor some Event subclasses to lambdas
      cpu: Refactor some Event subclasses to lambdas
      kvm, mem: Refactor some Event subclasses into lambdas
      testers: Refactor some Event subclasses to lambdas
      net: Refactor some Event subclasses to lambdas
      dev: Refactor some Event subclasses to lambdas
      arm: Refactor some Event subclasses to lambdas
      ruby: Refactor some Event subclasses to lambdas
      sim, x86: Make clone a virtual function
      tests,ext: Add a new testing library proposal
      tests: Add a simple example test
      tests: Add test for the m5-exit instruction.
      testlib: No catch of custom exceptions in sandbox

Tuan Ta <qtt2@cornell.edu> (28):
      gpu-compute: Fixed a bug in global memory pipeline
      gpu-compute: Fixed a bug in decoding Atomic ST
      arch-riscv: Add an implementation of set_tid_address syscall in RISCV
      arch-riscv: Ignore set_robust_list and get_robust_list syscalls
      sim: Fix a bug in prlimit syscall in SE mode
      arch-riscv: Ignore sched_yield syscall in SE mode
      arch-riscv,sim: Support clone syscall in RISC-V
      riscv: throw IllegalInstFault when decoding invalid instructions
      tests: add some pthread and std::thread unit tests
      base,mem: Support AtomicOpFunctor in the classic memory system
      arch: support issuing Atomic Mem Operation (AMO) requests
      cpu: add a new instruction type 'Atomic'
      cpu: Prevent suspended TimingSimple CPUs from fetching next instructions
      tests,style: add RISC-V assembly tests
      arch-riscv: Initialize interrupt mask
      cpu: fix how a thread starts up in MinorCPU
      riscv: remove NonSpeculative flag from fence inst
      cpu: fixed how O3 CPU executes an exit system call
      sim,kern: support FUTEX_WAIT_BITSET and FUTEX_WAKE_BITSET ops
      arch-riscv: initialize RISC-V's thread pointer register in clone syscall
      sim,cpu: make exit_group halt all threads in a group
      riscv: ignore nanosleep syscall
      cpu: stop scheduling suspended threads in all stages of MinorCPU
      cpu: fix how branching is handled when a thread is suspended in MinorCPU
      riscv: fixed syscall return value
      sim: handle the case when there're not enough HW thread contexts
      cpu: support atomic memory request type with AtomicOpFunctor
      riscv: fix AMO, LR and SC instructions

Alexandru Dutu <alexandru.dutu@amd.com> (27):
      mem: adding a multi-level page table class This patch defines a multi-level page table class that stores the page table in system memory, consistent with ISA specifications. In this way, cpu models that use the actual hardware to execute (e.g. KvmCPU), are able to traverse the page table.
      mem: adding architectural page table support for SE mode This patch enables the use of page tables that are stored in system memory and respect x86 specification, in SE mode. It defines an architectural page table for x86 as a MultiLevelPageTable class and puts a placeholder class for other ISAs page tables, giving the possibility for future implementation.
      cpuid, x86: Enabling more features in CPUid Adding more features in the CPUid with the purpose of supporting running the KvmCPU in SE mode.
      kvm, x86: Adding support for SE mode execution This patch adds methods in KvmCPU model to handle KVM exits caused by syscall instructions and page faults. These types of exits will be encountered if KvmCPU is run in SE mode.
      x86: Segment initialization to support KvmCPU in SE This patch sets up low and high privilege code and data segments and places them in the following order: cs low, ds low, ds, cs, in the GDT. Additionally, a syscall and page fault handler for KvmCPU in SE mode are defined. The order of the segment selectors in GDT is required in this manner for interrupt handling to work properly. Segment initialization is done for all the thread contexts.
      config, kvm: Enabling KvmCPU in SE mode This patch modifies se.py such that it can now use kvm cpu model.
      mem: Page Table long lines
      mem: Multi Level Page Table bug fix
      mem: Page Table map api modification
      cpu: Idle CPU status logic revised
      x86: revamp cmpxchg8b/cmpxchg16b implementation
      syscall_emul: add extra debug support for syscalls
      gpu-compute: Remove WFContext WFContext struct is currently unused and it has been rendered not useful in saving and restoring the context of a Wavefront. Wavefront class should be sufficient for that purpose and the runtime can figure out the memory size it will need to allocate for a Wavefront through an IOCTL.
      gpu-compute: Wavefront refactoring Renaming members of the Wavefront class in accordance with the style guide.
      gpu-compute: Adding ioctl for HW context size Adding runtime support for determining the memory required by a SIMD engine when executing a particular wavefront.
      gpu-compute: Changing reconvergenceStack type std::stack has no iterators, therefore the reconvergence stack can't be iterated without poping elements off. We will be using std::list instead to be able to iterate for saving and restoring purposes.
      gpu-compute: Adding vector register file debug messages This patch introduces DPRINTFs for reading and writing to and from the vector register file.
      gpu-compute: Refactoring Wavefront::dynWaveId
      gpu-compute: Adding context serialization methods to Wavefront This patch adds methods to serialize the context of a particular wavefront to the simulated system memory. Context serialization is used when a wavefront is preempeted (i.e. context switch).
      hsail: Fix disassembly of load instruction with 3 destination operands
      gpu-compute: Added method to compute the actual workgroup size This patch adds a method to the Wavefront class to compute the actual workgroup size. This can be different from the maximum workgroup size specified when launching the kernel through the NDRange object. Current solution is still not optimal, as we are computing these for each wavefront and the dispatcher also needs to have this information and can't actually call Wavefront::computeActuallWgSz before the wavefronts are being created. A long term solution would be to have a Workgroup class that deals with all these details.
      misc: Adds a warning in case gdb is attached multiple times Instead of scheduling another event, this patch adds a warning in case gdb is attached multiple times and the first attachement event has not been processed yet.
      kvm: Adding details to kvm page fault in x86 Adding details, e.g. rip, rsp etc. to the kvm pagefault exit when in SE mode.
      syscall_emul: Argument retrieval bug fix
      gpu-compute: Remove unneeded Request::setVirt call
      sim-se: Enhance clone for X86KvmCPU
      sim-se: use DPRINTF_SYSCALL for ioctl/wait4

Dam Sunwoo <dam.sunwoo@arm.com> (26):
      Base: Fixed shift amount in genrand() to work with large numbers
      stats: fix Vector2d to display stats correctly when y_subname is not specified.
      util: implements "writefile" gem5 op to export file from guest to host filesystem
      mem: fix cache stats to use request ids correctly
      ARM: move kernel func event to correct location.
      ARM: guard masked symbol tables by default
      Mem: add per-master stats to physmem
      Mem: fix master id assertion in cache_impl.hh The assertion was applied to the wrong packet. This patch fixes the issue rerported by Xiang Jiang on the gem5-dev mailing list.
      ARM: added support for flattened device tree blobs
      ISA: generic Linux thread info support
      ARM: dump stats and process info on context switches
      cpu: generate SimPoint basic block vector profiles
      sim: separate nextCycle() and clockEdge() in clockedObjects
      util: Streamline .apc project convertsion script
      dev: Add option to disable framebuffer .bmp dump in run folder
      sim: added option to serialize SimLoopExitEvent
      cpu: remove faulty simpoint basic block inst count assertion
      util: updated Streamline flow to support ARM DS-5 v5.17 protocol
      mem: per-thread cache occupancy and per-block ages
      cpu: Add O3 CPU width checks
      sim: remove kernel mapping check for baremetal workloads
      arm: change MISCREG_L2ERRSR to warn not fail
      cpu: fix bimodal predictor to use correct global history reg
      config: Update Streamline scripts and configs
      cpu: use probes infrastructure to do simpoint profiling
      config: Add options to take/resume from SimPoint checkpoints

Sascha Bischoff <sascha.bischoff@arm.com> (26):
      Util: Added script to semantically diff two config.ini files
      Statistics: Add a function to configure periodic stats dumping
      stats: Fix swig wrapping for Tick in stats
      base: Add warn() and inform() to m5.utils for use from python
      mem: Fix SenderState related cache deadlock
      cpu: Fix bug when reading in TrafficGen state transitions
      cpu: Check that minimum TrafficGen period is less than max period
      stats: Remove printing of SparseHist total
      stats: Fix issue when printing 2D vectors
      cpu: Fix TrafficGen trace playback
      mem: Add PortID to QueuedMasterPort constructor
      mem: CommMonitor trace warn on non-timing mode
      misc: Proper type check and import for PortRef
      mem: Auto-generate CommMonitor trace file names
      dev: Fix draining for UFSHostDevice and FlashDevice
      dev: Fix segfault in flash device
      dev: Add basic checkpoint support to VirtIO9PProxy device
      sim: Disable gzip compression for writefile pseudo instruction
      sim: Fix clock_domain unserialization
      sim: Add additional debug information when draining
      misc: Add secondary dot output for DVFS domains
      misc: Bail out of DVFS dot if we cannot resolve the domains
      mem: Fix MSHR assert triggering for invalidated prefetches
      dev: Align BAR0 size to power of 2 for VirtIO devices
      dev: Fix address type promotion issues in VirtIO devices
      mem: Add tryTiming suppport to CommMonitor

Giacomo Gabrielli <giacomo.gabrielli@arm.com> (25):
      O3: Create a pipeline activity viewer for the O3 CPU model.
      O3: Squash the violator and younger instructions instead not all insts.
      ARM: fix bits-to-fp conversion function declarations.
      mem: Add support for a security bit in the memory system
      mem: Add  flag to request if it was generated by a page table walk
      cpu: Add support for Memory+Barrier instruction types in O3 cpu.
      arm: Remove unnecessary dependencies between AArch64 FP instructions
      arm: enable DCZVA by default in SE mode
      arm: Implement some missing syscalls (SE mode)
      arm: Add support for RCpc load-acquire instructions (ARMv8.3)
      base: Add type alias for raw pointer in RefCountingPtr
      arch,cpu: Add vector predicate registers
      cpu: Add ISA* getter in Thread interface
      arch-arm,cpu: Add initial support for Arm SVE
      cpu: Add a memory access predicate
      cpu,mem: Add support for partial loads/stores and wide mem. accesses
      arch-arm: Add initial support for SVE contiguous loads/stores
      cpu: Remove assert causing issues with x86 Linux boot
      cpu-o3: Add support for pinned writes
      arch: Add include guards to auto-gen. decode header
      arch-arm: Add initial support for SVE gather/scatter loads/stores
      arch-arm: Treat SVE prefetch instructions as no-ops
      cpu-o3: Fix handling of some mem. order violations
      arch-arm: Provide SVE support to the TarmacParser
      cpu: Fix issue with MinorCPU predicated-false mem. accesses

Nils Asmussen <nils.asmussen@barkhauseninstitut.org> (25):
      arch-arm: make MicroUopSetPCCPSR SerializeAfter
      arch-riscv: added support for pseudo instructions.
      arch-riscv: print information about faults.
      arch-riscv: added TLB and page table walker.
      arch-riscv: make sure only supported modes can be set in SATP.
      arch-riscv: implement sfence.vma to flush TLBs.
      arch-riscv: implement RemoteGDB::acc for FS mode.
      arch-riscv: fixed formatting.
      cpu,configs: let RISC-V use the PT walker cache.
      configs: added bare metal FS support for RISC-V.
      arch-riscv: fixed read of {M,S,U}TVEC.
      arch-riscv: show names of MiscRegs on accesses.
      arch-riscv: added (un)serialization of miscRegFile.
      arch-riscv: ignore writes to SXL/UXL fields in status register.
      arch-riscv: fault on mstatus accesses from lower privilege modes.
      arch-riscv: added dummy implementation of wfi instruction.
      arch-riscv: fault according to status.{TVM,TSK,TW}.
      arch-riscv: make accesses to CSRs SerializeAfter.
      arch-riscv: make uret,sret,mret SerializeAfter,NonSpeculative.
      arch-riscv: let FPU instructions fault if status.FS = off.
      arch-riscv: respect IALIGN, influenced by toggling 'c' extension.
      arch-riscv: report that we don't have debugging support.
      arch-riscv: be prepared for CSR changes during PT walk.
      misc: added news on RISC-V to RELEASE-NOTES.md.
      base,sim: allow m5writeFile with stdout/stderr.

Stephan Diestelhorst <stephan.diestelhorst@arm.com> (25):
      mem: De-virtualise interfaces in the CoherentBus
      mem: Add "const" attribute to Packet getters
      arm: Fix uninitialised warning with gcc 4.8
      misc: Add panic_if / fatal_if / chatty_assert
      stats: Method stats source
      power: Add basic DVFS support for gem5
      energy: Small extentions and fixes for DVFS handler
      energy: Add the Energy Controller in the right configs
      energy: Tighter checking of levels for DFS systems
      mem: Simple Snoop Filter
      misc: Add functions for doing popcount and power-of-two checking
      mem: Add a simple snoop counter per bus
      mem: Tie in the snoop filter in the coherent bus
      mem: Add access statistics for the snoop filter
      cpu: Move packet deallocation to recvTimingResp in the O3 CPU
      mem: Fix initial value problem with MemChecker
      cpu: Add a PC-value to the traffic generator requests
      mem: Add option to force in-order insertion in PacketQueue
      mem: Support any number of master-IDs in stride prefetcher
      mem: Create a request copy for deferred snoops
      mem, cpu: Add assertions to snoop invalidation logic
      mem, config: Selective use of snoop filter
      sim: Call regStats of base-class as well
      power: Clarify the unit used for the power equations (W)
      power: Allow global stats in power equations

Chun-Chen Hsu <chunchenhsu@google.com> (23):
      base: Fix loop range in pngwriter
      arm: Fix maybe-uninitialized GCC warnings
      arch, arm: Fix implicit-fallthrough GCC warnings
      scons: Move the marshal binary to the build directory
      arm: Fix decoding of CRC32 instructions in thumb32
      mem: Check response only when needed in CommMonitor
      system-arm: Initialize ICC_SRE_EL3 register
      system-arm: Add irq for hypervisor timer in device tree
      configs, arch-arm: Check if gic has cpu_addr attribute
      systemc: Provide Port wrapper classes for sc_port
      system-arm: Refactor makefile to create targets with functions
      arch-arm: Fix implicit fallthrough build errors
      dev: Fix segmentation fault in VirtIOBlock
      stats: Ignore non-Group objects in stat hierarchy
      system-arm: Initialize ICC_SRE_EL3 register of all CPUs
      fastmodel: Helper function to setup FastModels for simulation
      config: Add --mem-size option in fs_bigLITTLE.py
      config: Add --kernel-cmd option in fs_bigLITTLE.py
      fastmodel: Add VExpressFastmodel platform
      config: Add fastmodel cluster in fs_bigLITTLE.py
      arch-arm: Refactor code to check if gic is GicV2
      fastmodel: Fix compilation errors
      util: Add fastmodel in valid tag list

Rekai Gonzalez-Alberquilla <rekai.gonzalezalberquilla@arm.com> (22):
      cpu: o3 register renaming request handling improved
      isa: Add parameter to pick different decoder inside ISA
      cpu: Change literal integer constants to meaningful labels
      mem: Add unused prefetch counter in caches
      mem: Handful extra features for BasePrefetcher
      mem: Add priority to QueuedPrefetcher
      cpu: Fix the O3 CPU Drain
      util: git pre-commit hook to check staged files
      arch-arm: Fix some poorly done type max and min in NEON
      cpu: Simplify the rename interface and use RegId
      cpu: Result refactoring
      arch: added generic vector register
      cpu: Added interface for vector reg file
      arch: ISA parser additions of vector registers
      cpu: Add missing rename of vector registers in the O3 CPU
      sim: Make Stats truly non-copy-constructible
      cpu: Fix the usage of const DynInstPtr
      cpu,arch-arm: Initialise data members
      cpu: Change raw pointers to STL Containers
      base: Iterable CircularQueue implementation
      base: Ported circlebuf to CircularQueue
      cpu-o3: O3 LSQ Generalisation

Andrea Mondelli <andrea.mondelli@ucf.edu> (21):
      misc: updated shabang for python script
      scons: added support of default Python installation on MacOS
      misc: added missing override specifier
      sim: added missed macro definition on MacOS
      scons: conditional use of new RPATH inclusion
      mem-cache: added missing override specifier in BoP
      misc: Segmentation Fault during O3PipeView execution
      mem-cache: alias to mem::getMasterPort in TLB class
      cpu: Refactor of Physical Register implementation
      mem-cache: tautological comparison of byteOrder
      dev-arm: ambiguous use of getPort()
      misc: missing override specifier
      dev-arm: Correct cast of template parameter
      arch-mips: added missing override specifier (o3)
      misc: Removed inconsistency in O3* debug msgs
      mem: missing override specifier
      cpu,mem: missing override specifier
      sim-se: correct statfs inclusion on !linux host
      cpu: Added correct return type for ROB::countInsts
      dev: Terminal output's dump name conflicts
      arch-x86: missing override specifier

Matthew Poremba <matthew.poremba@amd.com> (21):
      ruby: Rename pkt to m_pkt so it may be accessed via SLICC
      ruby: Fix double statistic registration in garnet
      ruby: Fix overflow reported by ASAN in MessageBuffer.
      ruby: Check all VNETs for injection in garnet NetworkInterface
      ruby: Add occupancy stats to MessageBuffers
      ruby: Check MessageBuffer space in garnet NetworkInterface
      mem: Option to toggle DRAM low-power states
      arch-x86: Don't free PTW state with inflight requests
      arch-arm: Add used attribute to pauth_helpers asserts
      sim-se: Implement Virtual Memory Area API
      sim-se: Extend MemState API to use VMAs
      sim-se: Switch to new MemState API
      sim-se: Update mmap, munmap, mremap to use MemState
      sim-se: Add special paths for MPI, libnuma, ROCm support
      base,arch-hsail: Fix GPU build
      arch-x86: Do not fixup faults in TLB
      arch-x86: Change insertBits in TLB translateFunctional
      sim: Use off_t for mmap offset arguments
      configs: Add missing requestToMemory MessageBuffers
      mem: Token port implementation
      mem: Defer deletion of respQueue.front() in DRAMCtrl

Radhika Jagtap <radhika.jagtap@arm.com> (21):
      mem: Edit proto Packet and enhance the python script
      util: Add DVFS perfLevel to checkpoint upgrade script
      util: Move packet trace file read to protolib
      config: Fix cache latency param in mem test
      probe: Add probe in Fetch, IEW, Rename and Commit
      proto, probe: Add elastic trace probe to o3 cpu
      mem: Add instruction sequence number to request
      cpu: Add TraceCPU to playback elastic traces
      util: Add decode and encode scripts for elastic traces
      config: Enable elastic trace capture and replay in se/fs
      cpu: Create record type enum for elastic traces
      cpu: Support virtual addr in elastic traces
      cpu: Add frequency scaling to the Trace CPU
      cpu: Adjust for trace offset and fix stats
      cpu: Support exit when any one Trace CPU completes replay
      cpu: Print progress messages in Trace CPU
      cpu, probe: Fix elastic trace register dependency
      ext, mem: Pull DRAMPower SHA 90d6290 and rebase
      config: Add low power sweep for DRAM
      tests: Add tests for DRAM low power modes
      util: Add script to plot DRAM low power sweep

Christian Menard <christian.menard@tu-dresden.de> (20):
      x86: increment the stack pointer in lret inst The 'lret' instruction reloads instruction pointer and code segment from the stack and then pops them. But the popping part is missing from the current implementation. This caused incorrect behavior in some code related to the Fiasco OS. Microops are being added to rectify the behavior of the instruction.
      x86: Implementation of Int3 and Int_Ib in long mode
      misc: fix a compile error due to incompability with SystemC 2.3.1
      misc: Implement the Base SystemC Module as an sc_channel.
      misc: Fix order of object construction in the CxxConfigManager
      misc: fix includes in util/systemc
      misc: add a MasterId to the ExternalPort
      misc: Clean up and complete the gem5<->SystemC-TLM bridge [1/10]
      misc: Clean up and complete the gem5<->SystemC-TLM bridge [2/10]
      misc: Clean up and complete the gem5<->SystemC-TLM bridge [3/10]
      misc: Clean up and complete the gem5<->SystemC-TLM bridge [4/10]
      misc: Clean up and complete the gem5<->SystemC-TLM bridge [5/10]
      misc: Clean up and complete the gem5<->SystemC-TLM bridge [7/10]
      misc: Clean up and complete the gem5<->SystemC-TLM bridge [8/10]
      misc: Clean up and complete the gem5<->SystemC-TLM bridge [9/10]
      misc: Clean up and complete the gem5<->SystemC-TLM bridge [10/10]
      misc: Clean up and complete the gem5<->SystemC-TLM bridge [6/10]
      misc: Reorder sources in util/tlm and rewrite build scripts
      misc: check address range in the SystemC example
      arch-x86: consistent style of comments in system files

Bjoern A. Zeeb <baz21@cam.ac.uk> (19):
      x86: pagetable walker: fix typo in comment
      x86: cpuid: add family to warn() message
      util: term: drop CC from Makefile
      mem: FreeBSD does not provide MAP_NORESERVE either
      arm,dev: remove PMU assertion hit on reset
      dev, virtio: properly set PCI address space to use IOREG
      x86, dev: properly space the APIC registers
      arm,dev: PL011 UART_FR read status enhancement
      config, x86: Properly space pad the X86IntelMPBus Entry descriptions
      arm, dev: pl011 console interactivity
      arm: AArch64 report cache size correctly when reading CTR_EL0
      dev: net/i8254xGBe add two more wakeup registers to ignore
      scons: make build better on FreeBSD
      sim: Patch to fix the statfs build
      sim: fix build breakage in process.cc after brandon@11801
      mem: fix printing of 1st cache tags line
      sim: make compile on FreeBSD prior to 11
      arch: change panic for Vector traceData to warn_once
      arch-x86: fix CondInst decoding for MOV to Control Registers

Anouk Van Laer <anouk.vanlaer@arm.com> (18):
      dev, virtio: Use of Unix socket for virtIO 9P device
      cpu,o3: Fixed checkpointing bug occuring in the o3 CPU
      dev, virtio: Improvements to diod process handling
      pwr: Adds logic to enter power gating for the cpu model
      sim: Added model type to power model
      sim, power: Temperature used for power calculations
      arch-arm: Correction to address size in EL2/EL3
      arch-arm: Correction for address size in EL1&0 translation
      arch, arm: Effect of AT instructions on descriptor handling
      arch, arm: Return s1Req upon fault in s2Lookup
      dev-arm: Added unimplemented GICv2 GICC_DIR
      dev-arm: Added VGIC GICV_IIDR response
      arch-arm: Added TLBI_ALL EL2 instruction
      dev, arm: Removed contextId variable
      arch, arm: Update miscRegs in getTE
      sim-power: Creation of PowerState class
      sim-power: Specify the states a PowerState object can be in
      sim-power: Addition of PowerDomains

Pau Cabre <pau.cabre@metempsy.com> (18):
      cpu: fix unitialized variable which may cause assertion failure
      util,arch-arm: Added python script to generate ARM FS binaries
      configs,sim-se: fix se.py multi-cpu multi-cmd issue
      mem-cache: Delete squashed HWPrefetches
      cpu-minor: Fix for addr range coverage calculation
      util,arch-arm: Update gen_arm_fs_files.py to use new kernel repos
      cpu: Fixed PC shifting on LTAGE branch predictor
      cpu: Fixed ratio of pred to hyst bits for LTAGE Bimodal
      configs: Added an option for choosing branch predictor type
      cpu: Fix LTAGE max number of allocations on update
      cpu: Fixes on the loop predictor part of LTAGE
      cpu: Fixed useful counter handling in LTAGE
      cpu: Made LTAGE parameters configurable
      cpu: split LTAGE implementation into a base TAGE and a derived LTAGE
      cpu: Added new stats to TAGE and LTAGE branch predictors
      cpu: Added parameters to enable/disable features in LTAGE
      cpu: Fixed typos in parameter/stats descriptions
      cpu: Fixed the indirect branch predictor GHR handling

Wendy Elsasser <wendy.elsasser@arm.com> (18):
      mem: Add close adaptive paging policy to DRAM controller model
      cpu: Update DRAM traffic gen
      mem: Add memory rank-to-rank delay
      mem: Add DDR4 bank group timing
      cpu: Fix TrafficGen message format
      config: Add new MemConfig options to DRAM sweep script
      mem: Update DRAM command scheduler for bank groups
      mem: Add initial HBM configurations
      mem: Sort memory commands and update DRAMPower
      mem: Modify drain to ensure banks and power are idled
      mem: Add callback to compute stats prior to dump event
      mem: Add DRAM low-power functionality
      mem: Update DRAM configuration names
      mem: fix assertion in respondEvent
      Fix DDR4_2400_8x8 DRAMCTRL configuration
      mem: Optimize self-refresh entry
      mem: Add support for more flexible DRAM timing and topologies
      mem: Modify DRAM controller for flexibility and new memories

Dylan Johnson <Dylan.Johnson@ARM.com> (17):
      sim: Add ability to break at specific kernel function
      sim: Add relative break scheduling
      arm: change instruction classes to catch hyp traps
      arm: invalidate TLB miscreg cache on modification of HSCTLR
      arm: add stage2 translation support
      arm: Add AArch64 hypervisor call instruction 'hvc'
      arm: Fix EL perceived at TLB for address translation instructions
      arm: Add check to fault routing for hypervisor/virtualization
      arm: Refactor aarch64 table walk logic to remove redundancy
      arm: Fix stage 2 determination in table walker
      arm: Fix secure state checking in various places
      arm: Fix trapping to Hypervisor during MSR/MRS read/write
      arm: Fix stage 2 memory attribute checking in AArch64
      arm: Add TLBI instruction for stage 2 IPA's
      arm: correctly assign faulting IPA's to HPFAR_EL2
      arm: Check TLB stage 2 permissions in AArch64
      arm: warn not fail on use of missing miscreg CNTHCTL_EL2

Michael LeBeane <michael.lebeane@amd.com> (17):
      syscall_emul: Implement clock_getres() system call
      configs: add command-line option to stop debug output
      ruby: make DMASequencer inherit from RubyPort
      misc: Remove FullSystem check for networking components Ethernet devices are currently only hooked up if running in FS mode.  Much of the Ethernet networking code is generic and can be used to build non-Ethernet device models.  Some of these device models do not require a complex driver stack and can be built to use an EmulatedDriver in SE mode. This patch enables etherent interfaces to properly connect regardless of whether the simulation is in FS or SE mode.
      dev: Exit correctly in dist-gem5 The receiver thread in dist_iface is allowed to directly exit the simulation. This can cause exit to be called twice if the main thread simultaneously wants to exit the simulation.  Therefore, have the receiver thread enqueue a request to exit on the primary event queue for the main simulation thread to handle.
      gpu-compute: Fix bug with return in cfg Connecting basic blocks would stop too early in kernels where ret was not the last instruction.  This patch allows basic blocks after the ret instruction to be properly connected.
      sim, syscall_emul: Add mmap to EmulatedDriver Add support for calling mmap on an EmulatedDriver file descriptor.
      dev: Add a DmaCallback class to DmaDevice This patch introduces the DmaCallback helper class, which registers a callback to fire after a sequence of (potentially non-contiguous) DMA transfers on a DmaPort completes.
      config: move dist-gem5 options to common config dist-gem5 should not be restricted to FullSystem mode.
      sim: Refactor quiesce and remove FS asserts The quiesce family of magic ops can be simplified by the inclusion of quiesceTick() and quiesce() functions on ThreadContext.  This patch also gets rid of the FS guards, since suspending a CPU is also a valid operation for SE mode.
      x86: Force strict ordering for memory mapped m5ops Normal MMAPPED_IPR requests are allowed to execute speculatively under the assumption that they have no side effects.  The special case of m5ops that are treated like MMAPPED_IPR should not be allowed to execute speculatively, since they can have side-effects.  Adding the STRICT_ORDER flag to these requests blocks execution until the associated instruction hits the ROB head.
      kvm: Support timing accesses for KVM cpu This patch enables timing accesses for KVM cpu.  A new state, RunningMMIOPending, is added to indicate that there are outstanding timing requests generated by KVM in the system.  KVM's tick() is disabled and the simulation does not enter into KVM until all outstanding timing requests have completed.  The main motivation for this is to allow KVM CPU to perform MMIO in Ruby, since Ruby does not support atomic accesses.
      dev: Add 'simLength' parameter in EthPacketData Currently, all the network devices create a 16K buffer for the 'data' field in EthPacketData, and use 'length' to keep track of the size of the packet in the buffer.  This patch introduces the 'simLength' parameter to EthPacketData, which is used to hold the effective length of the packet used for all timing calulations in the simulator.  Serialization is performed using only the useful data in the packet ('length') and not necessarily the entire original buffer.
      ruby: Allow multiple outstanding DMA requests DMA sequencers and protocols can currently only issue one DMA access at a time. This patch implements the necessary functionality to support multiple outstanding DMA requests in Ruby.
      dev: Add m5 op to toggle synchronization for dist-gem5. This patch adds the ability for an application to request dist-gem5 to begin/ end synchronization using an m5 op. When toggling on sync, all nodes agree on the next sync point based on the maximum of all nodes' ticks. CPUs are suspended until the sync point to avoid sending network messages until sync has been enabled. Toggling off sync acts like a global execution barrier, where all CPUs are disabled until every node reaches the toggle off point. This avoids tricky situations such as one node hitting a toggle off followed by a toggle on before the other nodes hit the first toggle off.
      dev: Fix buffer length when unserializing an eth pkt
      dev: Exit correctly in dist-gem5 for SE mode

David Guillen-Fandos <david.guillen@arm.com> (15):
      mem: Remove templates in cache model
      mem: Make caches way aware
      sim: Add voltage() function to clocked_object
      sim: Adding thermal model support
      sim: Thermal support for Linux
      power: Add support for power models
      stats: Fixing regStats function for some SimObjects
      pwr: Add power states to ClockedObject
      pwr: Low-power idle power state for idle CPUs
      sim: Adding support for power models
      pwr: Closing power and thermal feedback loop
      mem: Add snoop traffic statistic
      base: Add total() to Vector2D stat
      pwr: Enable multiple power models per component
      cpu-minor: Add missing instruction stats

Nathanael Premillieu <nathanael.premillieu@arm.com> (15):
      ARM: Fix case where cond/uncond control is mis-specified
      O3: Track if the RAS has been pushed or not to pop the RAS if neccessary.
      util: Fix issues with style checker.
      ARM: Inst writing to cntrlReg registers not set as control inst
      o3 cpu: remove some unused buggy functions in the lsq Committed by: Nilay Vaish <nilay@cs.wisc.edu>
      arm: set movret_uop as conditional or unconditional control A flag was missing for the movret_uop microop instruction. This patch adds that flag when the instruction is used, not directly in the constructor of the instruction.
      arm: set uopSet_uop as conditional or unconditional control uopSet_uop is microop instruction that has the IsControl flags set, but the IsCondControl or IsUncondControl flags seems not to be set, neither in the construction nor where the microop is used. This patch adds the the flags in the constructor of the instruction (MicroUopSetPCCPSR).
      arm: set ldr_ret_uop as conditional or unconditional control This patch adds a missing flag to the ldr_ret_uop microop instruction. The flag is added when the instruction is used, not directly in the constructor of the instruction.
      arm: Make address translation faster with better caching
      arm: Add secure flag to TableWalker request when needed
      arm: Fix fplib 128-bit shift operators
      cpu: Fix base FP and CC register index in o3 insertThread()
      arm: Fix disasm printing
      arch, cpu: Architectural Register structural indexing
      cpu: Physical register structural + flat indexing

Pouya Fotouhi <pfotouhi@ucdavis.edu> (15):
      mem-ruby: Fixing MESI Three Level
      mem-ruby: Fixing Topology
      cpu-o3: Set packet data type for IPR read
      mem-ruby: Adding a new slicc statement - to not evict locked cachelines
      mem-ruby: Remove assertion with incorrect assumption
      mem-ruby: Use check_on_cache_probe to protect locked lines from eviction
      mem-ruby: Use check_on_cache_probe to protect locked lines from eviction
      mem-ruby: Use check_on_cache_probe on MOESI
      mem-ruby: Use check_on_cache_probe on MOESI CMP
      mem-ruby: Use check_on_cache_probe on MOESI hammer
      mem-ruby: Use check_on_cache_probe on MI
      arch-x86: implement movntq/movntdq instructions
      arch-x86: Adding warning for movnti
      arch-x86: ignore non-temporal hint for movntps/movntpd SSE insts
      dev: Adding support for large BAR

Timothy Hayes <timothy.hayes@arm.com> (15):
      ruby: 2x protocols has typo/syntax error that fails building
      misc: add Arm build_opts for MESI_Three_Level and MOESI_hammer
      configs: MESI_Three_level python parameters
      mem-ruby: Minor Ruby Prefetcher fixes
      mem-ruby: MESI_Three_level HTML reference generation fix
      mem-ruby: MESI_Three_Level fix L1 in_port ranks
      mem-ruby: MESI_Three_Level fix L1 MRU absence
      mem-ruby: MESI_Three_Level discriminate L0 invalidation reason
      mem-ruby: fix MESI_Three_Level erroneous transition
      mem-ruby: LL/SC fixes
      mem-ruby: MESI_Three_Level LL/SC improvements
      mem-ruby: MESI_Three_level prefetcher support
      mem-ruby: MESI_Three_level prefetcher page crossing
      mem-ruby: MOESI_CMP_directory sync fix
      mem-ruby: MESI_Two_Level missing function compilation fix

Tushar Krishna <tushar@ece.gatech.edu> (15):
      GARNET: adding a fault model for resilient on-chip network research.
      Remove standard_1level_CMP-protocol.sm include statement from Network
      Topology: bug fix in external link initialization
      Garnet: Stats at vnet granularity + code cleanup
      NetworkTest: remove unnecessary memory allocation
      ruby: rename ALPHA_Network_test protocol to Garnet_standalone. Over the past 6 years, we realized that the protocol is essentially used to run the garnet network in a standalone manner, and feed standard synthetic traffic patterns through it.
      ruby: rename networktest to garnet_synthetic_traffic. networktest is essentially a collection of synthetic traffic patterns for the network. The protocol name and the tester having the same name led to multiple python configuration files with the same name, adding confusion. This patch renames networktest to garnet_synthetic_traffic, and also adds more synthetic traffic patterns.
      config: add a separate config file for the network. This patch adds a new file configs/network/Network.py to setup the network, instead of doing that within Ruby.py.
      config: make internal links in network topology unidirectional. This patch makes the internal links within the network topology unidirectional, thus allowing any deadlock-free routing algorithms to be specified from the topology itself using weights. This patch also renames Mesh.py and MeshDirCorners.py to Mesh_XY.py and MeshDirCorners_XY.py (Mesh with XY routing). It also adds a Mesh_westfirst.py and CrossbarGarnet.py topologies.
      config: add port directions and per-router delay in topology. This patch adds port direction names to the links during topology creation, which can be used for better printed names for the links or for users to code up their own adaptive routing algorithms. It also adds support for every router to have an independent latency value to support heterogeneous topologies with the subsequent garnet2.0 patch.
      ruby: remove the original garnet code. Only garnet2.0 will be supported henceforth.
      ruby: garnet2.0 Revamped version of garnet with more optimized single-cycle routers, more configurability, and cleaner code.
      ruby: Add M5_VAR_USED before variables used only inside assert in garnet2.0. This removes errors when building gem5.fast
      config: fix typo in cluster topology.
      ruby: fix round robin arbiter in garnet2.0 The rr arbiter pointer in garnet was getting updated on every request, even if there is no grant. This was leading to a huge variance in wait time at a router at high injection rates. This patch corrects it to update upon a grant.

Jordi Vaquero <jordi.vaquero@metempsy.com> (14):
      arch-arm: adding register control flags enabling LSE implementation
      arch-arm: Add TypeAtomicOp class to be used by new atomic instructions
      cpu-o3: added _amo_op parameter in o3 LSQ
      cpu-o3: fix atomic instructions non-speculative
      arch-arm: Adding CAS/CASP AMO instr including new TypedAtomic func
      arch-arm: Added LD/ST<op> atomic instruction family and SWP instrs
      cpu, mem: Changing AtomicOpFunctor* for unique_ptr<AtomicOpFunctor>
      arch-arm: Fix EL2 target exception level for SP alignment fault.
      arch-arm: This commit adds Pointer Authentication feature.
      arch-arm: Implement ARMv8.3-JSConv
      arch-arm: ARMv8.3 CompNum, SIMD complex number support
      arch: Fix VecReg container alignement to 128bits view
      arch-arm: Fix Sve Fcmla indexed instruction
      arch-arm: Fix clasta/b and lasta/b simd&fp instructions

Lena Olson <leolson@google.com> (14):
      Mem: Fix size check when allocating physical memory
      Cache: Fix the LRU policy for classic memory hierarchy
      Cache: Split invalidateBlk up to seperate block vs. tags
      ruby: restrict Address to being a type and not a variable name Change all occurrances of Address as a variable name to instead use Addr. Address is an allowed name in slicc even when Address is also being used as a type, leading to declarations of "Address Address". While this works, it prevents adding another field of type Address because the compiler then thinks Address is a variable name, not type.
      ruby: fix slicc compiler to complain about duplicate symbols
      ruby: Fix prefetching for MESI_CMP_Directory
      ruby: fix typo in MOESI_CMP_token protocol
      cpu: Accurately count idle cycles for simple cpu
      x86: fix debug trace output for mwait
      ruby: allow restoring from checkpoint when using DRAMCtrl
      ruby: Add missing block deallocations in MOESI_hammer
      ruby: fix and/or precedence in slicc
      ruby: fix and/or precedence in slicc
      ruby: fix MOESI_hammer directory to work with > 3GB memory

Chander Sudanthi <chander.sudanthi@arm.com> (13):
      ARM: Fix memset on TLB flush and initialization
      CP15 c15: enable execution with accesses to c15 registers
      O3: Remove hardcoded tgts_per_mshr in O3CPU.py.
      VNC: spacing
      ARM: EMM board address range fix
      ARM: pl011 raw interrupt fix
      ARM: PS2 encoding fix
      ARM: Fix MPIDR and MIDR register implementation.
      ARM: removed extra white space
      base: split out the VncServer into a VncInput and Server classes
      base: Fix a few incorrectly handled print format cases
      ARM: pl111/LCD framebuffer checkpointing fix
      ARM: add support for TEEHBR access

Jose Marinho <jose.marinho@arm.com> (13):
      sim: Fix clashing stat names in TickedObject and Ticked
      dev-arm: Don't unconditionally overwrite bootloader params
      arch-arm: Support PMU evens in the 0x4000-0x4040 range
      dev-arm: Add ID registers to the GIC model
      cpu, sim: Add param to force CPUs to wait for GDB
      sim: Prevent segfault in the wakeCpu m5op if id is invalid
      arch-arm: Only increment SW PMU counters on writes to PMSWINC
      system-arm: change system/arm/aarch64_bootloader/boot.S copyright
      cpu: Make automatic transition to OFF optional
      arch-arm: Ensure counters keep events on checkpoint resume
      cpu, cpu, sim: move Cycle probe update
      arch-arm: Do not increment PMU cycle event in WFI/WFE
      arch-arm: ArmPMU refactor

Omar Naji <Omar.Naji@arm.com> (13):
      mem: Remove DRAMSim2 DDR3 configuration
      mem: Add missig timing and current parameters to DRAM configs
      mem: Add DRAMPower wrapping class
      mem: DRAMPower integration for on-line DRAM power stats
      mem: Add DRAM device size and check against config
      mem: Fix DRAM activationlLimit bug
      mem: Add a GDDR5 DRAM config
      mem: Fix a bug in the DRAM controller arbitration
      mem: Add rank-wise refresh to the DRAM controller
      mem: make DDR4 x16
      mem: add DRAM powerdown timing
      mem: update DDR3 die revision
      mem: add DRAM powerdown current

Akash Bagdia <akash.bagdia@ARM.com> (12):
      config: Remove redundant explicit setting of default clocks
      config: Add a CPU clock command-line option
      config: Add a system clock command-line option
      config: Rename clock option to Ruby clock
      sim: Add the notion of clock domains to all ClockedObjects
      power: Add voltage domains to the clock domains
      cpu, arm: Allow the specification of a socket field
      energy: Memory-mapped Energy Controller component
      arm: Don't speculatively access most miscregisters.
      power: Add power states to ClockedObject
      power: Low-power idle power state for idle CPUs
      power: Allow voltage to be configured via cmd line

Chuan Zhu <chuan.zhu@arm.com> (12):
      arch-arm: Fix incorrect assumptions in ELIs64
      arch-arm: Handle route to EL2 in Supervisor Trap
      arch-arm: Fixed error in choosing vector offset
      arch-arm: Fix Secure state check in checkFPAdvSIMDTrap64
      sim: Add gtoh/htog helpers that take an explicit endianness
      arch-arm: Fix big endian support in do{Long,L1,L2}Descriptor
      arch-arm: Fix big endian support in {Load,Store}Double64
      arch-arm: Fix syntax error in TLB::getResultTe
      arch-arm: Correct masking of cp10 and cp11 in CPACR
      arch-arm: Fix FPEXC32_EL2 to FPEXC mapping
      arch-arm: Mask out unsupported trapped exception handling bits
      arch-arm: Fix masking in CPACR_EL1

Matteo Andreozzi <matteo.andreozzi@arm.com> (12):
      cpu: TraceGen fix for tick frequency check
      scons: Enable override suggestions on gcc 5.0+
      dev, sim: Added missing override keywords to fix CLANG compilation (OSX)
      arm: fix template instantiation warning in clang
      mem: Add a QoS-aware Memory Controller type
      mem: Add a simple QoS-aware Memory Controller
      mem: Make DRAMCtrl a QoS-aware Memory Controller
      arch-arm: Mark ArmProcess method as override
      mem: avoid calling regStat twice on a QoSPolicy
      arch-arm: clang compilation fixes
      ext: Remove unused bankwiseMode variable
      dev-arm: clang compatibility fix, added missing overrides

Ali Jafri <ali.jafri@arm.com> (11):
      mem: Fix prefetchSquash + memInhibitAsserted bug
      mem: Rename PREFETCH_SNOOP_SQUASH flag to BLOCK_CACHED
      mem: Add forward snoop check for HardPFReqs
      mem: Add check for express snoop in packet destructor
      mem: Add clean evicts to improve snoop filter tracking
      mem: Add check for snooping ports in the snoop filter
      mem: Add CleanEvict and Writeback support to snoop filters
      mem: Add snoops for CleanEvicts and Writebacks in atomic mode
      mem: Add snoop filters to L2 crossbars, and check size
      mem: Enforce insertion order on the cache response path
      mem: Avoid unnecessary snoops on writebacks and clean evictions

Jairo Balart <jairo.balart@metempsy.com> (11):
      system-arm: Add aarch64 bootloader support for GICv3
      system-arm: Add device tree for new VExpress GEM5_V2 platform
      dev-arm: Add a GICv3 model
      dev-arm: Add a VExpress_GEM5_V2 platform with GICv3 support
      cpu: Made TAGE a SimObject that can be used by other predictors
      cpu: Proposal for changing the indirect branch predictor interface
      dev-arm: LPI support for GICv3. This doesn't include an ITS model.
      dev-arm: cleanup of gicv3 code
      dev-arm: cleanup of gicv3 CPU interface code and fixes
      cpu: Make the indirect predictor into a SimObject
      config: add an option to list and select indirect branch predictor

Nathan Binkert <nate@binkert.org> (11):
      scons: rename TraceFlags to DebugFlags
      grammar: better encapsulation of a grammar and parsing This makes it possible to use the grammar multiple times and use the multiple instances concurrently.  This makes implementing an include statement as part of a grammar possible.
      slicc: cleanup slicc code and make it less verbose
      slicc: add a protocol statement and an include statement All protocols must specify their name The include statement allows any file to include another file.
      scons: fix building of shared objects
      gcc: fix unused variable warnings from GCC 4.6.1
      hooks: Add a hook to limit the size of any individual file
      hgfilesize: skip files that have been removed
      stats: use nan instead of no_value
      stats: update stats for no_value -> nan Lots of accumulated older changes too.
      copyright: add copyright missing from files I created

Malek Musleh <malek.musleh@gmail.com> (10):
      Configs: SE script fix for Alpha and Ruby simulations
      ruby: set the is_icache param for caches This patch sets the is_icache param for the L1 caches used in the MESI and the MOESI CMP directory protocols.
      inorder cpu: add missing DPRINTF argument
      ruby sequencer: converts cycles to ticks in deadlock panic() This patch converts the panic() print outs in the Sequencer::wakeup() call from ruby cycles to Ticks(). This makes it easier to debug deadlocks with the ProtocolTrace flag so the issue time indicated in the panic message can be quickly searched for.
      config: move ruby objects under ruby_system in obj hierarchy This patch moves the contollers to be children of the ruby_system instead of 'system' under the python object hierarchy. This is so that these objects can inherit some of the ruby_system's parameter values without resorting to calling a global system pointer during run-time.
      ruby: add stats to .sm files, remove cache profiler This patch changes the way cache statistics are collected in ruby.
      ruby: slicc: fix error msg in TypeFieldMemberAST.py
      config, ruby: connect dma to network DMA Controller was not being connected to the network for the MESI_Three_Level protocol as was being done in the other protocol config files. Without this patch, this protocol segfaults during startup.
      config: arm: fix os_flags Fix the makeArmSystem routine to reflect recent changes that support kernel commandline option when running android. Without this fix, trying to run android encounters a 'reference before assignment' error.
      config, cpu: fix progress interval for switched CPUs This patch ensures that the CPU progress Event is triggered for the new set of switched_cpus that get scheduled (e.g. during fast-forwarding). it also avoids printing the interval state if the cpu is currently switched out.

Matthias Jung <jungma@eit.uni-kl.de> (10):
      mem: Add HMC Timing Parameters A single HMC-2500 x32 model based on:
      misc: Coupling gem5 with SystemC TLM2.0 Transaction Level Modeling (TLM2.0) is widely used in industry for creating virtual platforms (IEEE 1666 SystemC). This patch contains a standard compliant implementation of an external gem5 port, that enables the usage of gem5 as a TLM initiator component in SystemC based virtual platforms. Both TLM coding paradigms loosely timed (b_transport) and aproximately timed (nb_transport) are supported.
      misc: SystemC Elastic Trace Player Example.
      ext: Update DRAMPower
      config: Fix missing include in fs.py
      misc: Documentation Update
      misc: fixes deprecated sc_time function for SystemC 2.3.1
      ext: Include SystemC 2.3.1 into gem5
      tlm: Don't set SystemC time resolution
      tlm: Elastic Trace Example with L2 Cache Added

Gedare Bloom <gedare@rtems.org> (9):
      ARM: Add m5ops and related support for workbegin() and workend() to ARM ISA.
      x86: Squash outstanding walks when instructions are squashed. This is the x86 version of the ARM changeset baa17ba80e06. In case an instruction has been squashed by the o3 cpu, this patch allows page table walker to avoid carrying out a pending translation that the instruction requested for.
      config: add num-work-ids command line option Adds the parameter --num-work-ids to Options.py and reads the parameter into the System params in Simulation.py. This parameter enables setting the number of possible work items to different than 16. Support for this parameter already exists in src/sim/System.py, so this changeset only affects the Python config files.
      util: generate fully qualified paths for cscope
      dev, arm: ignore writes to the SCU
      dev, arm: add a9mpcore global timer device
      arm: ignore writes to the reset_ctl register
      configs, arm: add option to enable security extensions
      arch-arm: fix ldm of pc interswitching branch

Marc Orr <marc.orr@gmail.com> (9):
      build scripts: Made minor modifications to reduce build overhead time.
      build: remove implicit-cache setting of scons from recent build faster patch
      x86 ISA: Implement the sse3 haddps instruction.
      Regression: Fix some bugs in simple-timing-mp-ruby.py.
      syscall emulation: Add the futex system call.
      syscall emulation: Clean up ioctl handling, and implement for x86.
      syscall emulation: Enabled getrlimit and getrusage for x86. Added/moved rlimit constants to base linux header file.
      tests: A test program for the new mwait implementation.
      x86 isa: This patch attempts an implementation at mwait.

Marco Elver <Marco.Elver@ARM.com> (9):
      Mem: Allow serializing of more than INT_MAX bytes
      config: Fix mem-type option not used in ruby_fs script This fixes missing mem-type arguments to makeLinuxAlphaRubySystem and makeLinuxX86System after a recent changeset allowing mem-type to be configured via options missed fixing these calls.
      cpu: o3: lsq: Fix TSO implementation This patch fixes violation of TSO in the O3CPU, as all loads must be ordered with all other loads. In the LQ, if a snoop is observed, all subsequent loads need to be squashed if the system is TSO.
      ruby: recorder: Fix (de-)serializing with different cache block-sizes
      cpu, o3: Ignored invalidate causing same-address load reordering
      mem: Add MemChecker and MemCheckerMonitor
      config: Add --memchecker option
      ruby: Fix MESI consistency bug
      ruby: Implement SwapReq support

Mrinmoy Ghosh <mrinmoy.ghosh@arm.com> (9):
      Branch predictor: Fixes the tournament branch predictor.
      LSQ: Fix a few issues with the storeset predictor.
      LSQ: Add some better dprintfs for storeset predictor.
      prefetcher: Make prefetcher a sim object instead of it being a parameter on cache
      BP: Fix several Branch Predictor issues. 1. Updates the Branch Predictor correctly to the state    just after a mispredicted branch, if a squash occurs. 2. If a BTB does not find an entry, the branch is predicted not taken.    The global history is modified to correctly reflect this prediction. 3. Local history is now updated at the fetch stage instead of    execute stage. 4. In the Update stage of the branch predictor the local predictors are    now correctly updated according to the state of local history during    fetch stage.
      BPred: Fix RAS to handle predicated call/return instructions.
      Cache: add a response latency to the caches
      o3: Fix a couple of issues with the local predictor.
      arm: fix a page table walker issue where a page could be translated multiple times

Ryan Gambord <gambordr@oregonstate.edu> (9):
      arch-arm: Fixing implicit fallthrough build errors
      arch-hsail: changed gen.py shebang from python(3) to python2.7
      mem-cache: Removed default arg from get() in prefetch/base.hh
      mem: Removed circular include ref
      util: changed shebang on gem5img.py to python2.7
      util: Build m5 with -no-pie flag
      cpu-kvm: Added informative error message
      mem-cache: ambiguous use of abs function
      configs: Removed redudant exec-style import

Ayaz Akram <yazakram@ucdavis.edu> (8):
      sim-se: update the arm kernel version
      tests: Move test programs paths to related test scripts
      tests: add cpu tests to the new testing infrastructure
      tests: Fix a minor bug in fixture.py
      cpu: move initCPU calls from initState to init
      tests: update linux boot tests
      mem-ruby: Deep renaming of Prefetcher to RubyPrefetcher
      arch-riscv,tests: small update to make gem5.fast compile

Deyaun Guo <guodeyuan@tsinghua.org.cn> (8):
      mips: fix nmsub and nmadd definitions the -/+ signs were flipped for nmsub_s, nmsub_d, and nmadd_d
      MIPS: Implement gem5/src/arch/mips/remote_gdb.cc. So a mips-cross-gdb can connect with gem5(MIPS_SE), and do some remote debugging.
      mips: definition of MIPS64_QNAN in registers.hh
      mips: Fix decoder of two float-convert instructions
      mips: Fix bugs in faults.cc/hh and tlb.cc for MIPS_FS
      mips: compatibility between MIPS_SE and cross compiler from CodeSorcery
      base: load weak symbols from object file Without loading weak symbols into gem5, some function names and the given PC cannot correspond correctly, because the binding attributes of unction names in an ELF file are not only STB_GLOBAL or STB_LOCAL, but also STB_WEAK. This patch adds a function for loading weak symbols.
      loader: Load weak symbols for function tracing

Glenn Bergmans <glenn.bergmans@arm.com> (8):
      ext: DT autogeneration - Add PyFtd to m5 space
      arm: DT autogeneration - Device Tree generation methods
      arm: DT autogeneration - Generate cpus node
      arm: DT autogeneration - Generate memory node
      arm: DT autogeneration - autogenerate RealView Platform devices
      arm: DT autogeneration - Generate energy controller node
      arm: DT autogeneration - generate PCI node
      config: Embed Device Tree generation in fs.py config

Matt Evans <matt.evans@arm.com> (8):
      Mem: Fix a livelock resulting in  LLSC/locked memory access implementation.
      Style: Make style.py's invalid warning print which file caused the infraction.
      ARM: Fix issue with with way MPIDR is read to include affinity levels.
      arm: Add a 'clear PPI' method to gic_pl390
      dev: Add 'OSC' oscillator sys control reg support to VersatileExpress
      arm: quick hack to allow a greater number of CPUs to a guest OS
      arm: Remove the 'magic MSI register' in the GIC (PL390)
      arm: Add a GICv2m device

Peter Enns <Peter.Enns@arm.com> (8):
      dev: Add support for i2c devices
      mem, misc: fix building issue with CommMonitor (unused variables)
      mem, stats: fix typos in CommMonitor and Stats
      config: exit with fatal() if error
      misc: add missing copyright/author information in previous commit
      misc: add copyright/name information for contribution
      arm, config: added support for ex5 model of big.LITTLE
      configs: fix cpu names in big.LITTLE example

Abdul Mutaal Ahmad <abdul.mutaal@gmail.com> (7):
      misc: Bugfix in TLM integration regarding CleanEvict Command The CleanEvict command was not considered in /util/tlm/sc_port.cc this could lead to a simulator crash. This issue is solved by ignoring this special command type.
      misc: Bugfix for Freezing Terminal in SystemC Simulation
      util: DrainManager/Checkpoint changes in SystemC coupling
      misc: Bugfix in TLM memInhibit Command
      misc: Separate stats file for SystemC-gem5 co-simulation
      mem: different HMC configuration
      mem: tester for new HMC configuration

Chris Emmons <chris.emmons@arm.com> (7):
      Output: Add hierarchical output support and cleanup existing codebase.
      VNC: Add support for capturing frame buffer to file each time it is changed.
      config:  Replace second keyboard with a mouse.
      ARM: Postpones creation of framebuffer output file until it is actually used.
      ARM: Add support for HDLCD controller for TC2 and newer Versatile Express tiles.
      dev: Set HDLCD default pixel clock for 1080p @ 60Hz
      config: Specify OS type and release on command line

Hanhwi Jang <jang.hanhwi@gmail.com> (7):
      learning-gem5: Fix missing misc.hh in hello_object.cc
      util: resolve m5op name mismatching in m5op headers.
      util: Add the missing wakecpu m5op in X86.
      util: Implement PIC version of m5ops for X86.
      util: Implement Lua module for m5ops.
      scons: Resolve backtrace implementation existence testing failure
      cpu-o3: Missing freeing the heads of DepGraph in IQ squashing

IanJiangICT <ianjiang.ict@gmail.com> (7):
      arch-riscv: Fix bug in serialize and unserialize of Interrutps
      arch-riscv: Fix disassembling of immediate for U-type instructions
      arch-riscv: Fix disassembling of operand list for compressed instructions
      arch-riscv: Fix disassembling for atomic instructions
      arch-riscv: Fix disassembling for fence and fence.i
      arch-riscv: Fix immediate decoding for integer shift immediate instructions
      arch-riscv: Fix disassembling of immediate for c.lui instruction

Joe Gross <joe.gross@amd.com> (7):
      ruby: fix message buffer init order
      ruby: add BoolVec
      sim: support for distcc pump server settings
      scons: fix sanitizer flags with multiple sanitizers
      sim-se: fix a few bugs/warns from GCC 6
      mem-ruby: Fixed pipeline squashes caused by aliased requests
      configs: add option to set the timeouts for the TCPs and SQCs

Matt Horsnell <matt.horsnell@arm.com> (7):
      ARM: Add limited CP14 support.
      o3: fix tick used for renaming and issue with range selection
      cpu: add consistent guarding to *_impl.hh files.
      mem: track per-request latencies and access depths in the cache hierarchy
      base: add support for probe points and common probes
      arch-arm: AArch32 Crypto SHA
      arch-arm: AArch32 Crypto AES

Prakash Ramrakhyani <prakash.ramrakhyani@arm.com> (7):
      ARM: Add per-processor interrupt support to GIC.
      gem5ops: Implement Java JNI for gem5Ops
      sim: Enable sampling of run-time for code-sections marked using pseudo insts.
      mem: Reorganize cache tags and make them a SimObject
      mem: Add privilege info to request class
      mem: Fix incorrect assert failure in the Cache
      util: update Java JNI interface to m5ops

Andrew Lukefahr <lukefahr@umich.edu> (6):
      O3: Fix sizing of decode to rename skid buffer.
      sim: draining bug for fast-forwaring multiple cores fix draining bug where multiple cores hit max_insts_any_thread simultaneously
      cpu: Fix o3 SMT IQCount bug
      cpu: Minor Draining Bug
      minor: fixed LSQ MasterPortID
      cpu: pred: Local Predictor Reset in Tournament Predictor

Ani Udipi <ani.udipi@arm.com> (6):
      mem: Add tTAW and tFAW to the SimpleDRAM model
      mem: Add tRAS parameter to the DRAM controller model
      mem: Schedule time for DRAM event taking tRAS into account
      mem: Fix DRAM bank occupancy for streaming access
      mem: Use the same timing calculation for DRAM read and write
      mem: Make tXAW enforcement less conservative and per rank

Javier Setoain <javier.setoain@arm.com> (6):
      arch-arm, sim-se: Wire up syscalls needed for pthreads
      sim-se, arch-arm: Add support for getdents64
      arch-arm: Add missing fall-through defaults
      arch-arm: Fix use of bitwise operators on booleans
      arch-arm: Add support for SVE load/store structures
      arch-arm: Add SVE LD1RQ[BHWD]

Neha Agarwal <neha.agarwal@arm.com> (6):
      mem: Fix for 100% write threshold in DRAM controller
      mem: Just-in-time write scheduling in DRAM controller
      mem: Unify request selection for read and write queues
      mem: Adding stats for DRAM power calculation
      mem: DDR3 config for comparing with DRAMSim2
      cpu: DRAM Traffic Generator

Siddhesh Poyarekar <siddhesh.poyarekar@gmail.com> (6):
      scons: Import print_function from future
      dev: Leave last byte in strncpy for NULL
      arm: Remove ignored const qualifier
      dev: Don't fall through into BRAR after RFDR case
      misc: Use the code format for commands and messages
      arm: Fix implicit-fallthrough warnings when building with gcc-7+

Yasuko Eckert <yasuko.eckert@amd.com> (6):
      cpu: add a condition-code register class
      arch/x86: add support for explicit CC register file
      ext: Redirect McPAT object files
      ext: change McPAT to not force compile in 32-bit mode.
      ext: McPAT interface changes and fixes This patch includes software engineering changes and some generic bug fixes Joel Hestness and Yasuko Eckert made to McPAT 0.8. There are still known issues/concernts we did not have a chance to address in this patch.
      ext: Add a McPAT regression tester Add a regression tester to McPAT. Joel Hestness wrote these tests and Yasuko Eckert modified them to reflect the new McPAT interface and other changes the previous patch made.

Arthur Perais <arthur.perais@inria.fr> (5):
      cpu: Clarify meaning of cachePorts variable in lsq_unit.hh of O3
      cpu: Resolve targets of predicted 'taken' decode for O3
      cpu: correct comments in tournament branch predictor
      cpu: disallow speculative update of branch predictor tables (o3)
      cpu: implement an L-TAGE branch predictor

Austin Harris <austinharris@utexas.edu> (5):
      sim: Fix need to save address space info during serialization.
      config: Fix need to set ISA of switch cpus.
      arch-riscv: Fix the srlw and srliw instructions.
      riscv: Get rid of ISA specific register types in Interrupts.
      arch-riscv: Enable support for riscv 32-bit in SE mode.

Boris Shingarov <shingarov@gmail.com> (5):
      power: Implement Remote GDB
      arm: remote GDB: rationalize structure of register offsets
      arch-arm: Fix inverted 32/64-bit check in GDB
      base: Do not treat addresses < 10 specially
      configs: Add --wait-gdb as option to se.py

Earl Ou <shunhsingou@google.com> (5):
      util/m5: add Android.mk
      Fix SConstruct for asan build
      systemc: fix gem5_to_tlm bridge
      systemc: keep SC_CONCAT* macro
      systemc: gem5_to_tlm: treat non-rw as ignorable command

Faissal Sleiman <Faissal.Sleiman@arm.com> (5):
      cpu: Put in assertions to check for maximum supported LQ/SQ size
      cpu: Change IEW DPRINTF to use IEW debug flag
      cpu: Removing an unused variable in rename
      cpu: Construct ROB with cpu params struct instead of each variable
      o3: Fix occupancy checks for SMT A number of calls to isEmpty() and numFreeEntries() should be thread-specific.

Hoa Nguyen <hoanguyen@ucdavis.edu> (5):
      scons: fix disable_partial logic for fast binary
      tests: add riscv to cpu tests
      arch-x86: add unconditional tag to calls/returns
      arch-x86: Change warn to warn_once for NT instructions
      systemc: Remove boost dependency caused by tlm

Ivan Pizarro <ivan.pizarro@metempsy.com> (5):
      arch-arm: Additional bits in misc ARM registers to use with the TLB and page walker
      arch-generic: Making base TLB class a MemObject
      mem-cache: A Best-Offset Prefetcher
      mem-cache: Sandbox Based Optimal Offset Implementation
      mem-cache: Proactive Instruction Fetch Implementation

Matt Sinclair <mattdsinclair@gmail.com> (5):
      x86,misc: add additional info on faulting X86 instruction, fetched PC
      arch-x86, arch-power: fix calls to bits and insertBits
      syscall_emul: adding link system call
      syscall_emul: adding symlink system call
      sim-se: adding pipe2 syscall

Paul Rosenfeld <prosenfeld@micron.com> (5):
      alpha: Small removal of dead comments/code from alpha ISA
      misc: Add support for switching multiple cores in SystemC
      misc: fix build failure in cxx_config example
      arm,sim: fix context switch stats dumps for ARM64/Linux
      scons: bump required python version to 2.7 to support pybind11

Rahul Thakur <rjthakur@google.com> (5):
      mem: Add memory footprint probe
      mem: Refactor CommMonitor stats, add basic atomic mode stats
      arm, kvm: fix saving/restoring conditional flags in ARM KVM64
      arm, kvm: enable running 32-bit Guest under ARM KVM64
      tests: Increase jenkins test timeout to 4 hours.

Robert Kovacsics <rmk35@cl.cam.ac.uk> (5):
      mem-cache: Typo in comment: 'proceed' -> 'precede'
      mem: Fix off-by-one error in checkFunctional, and simplify it
      mem: Removed "using namespace std;" from src/mem/packet.cc
      mem: Rename Packet::checkFunctional to trySatisfyFunctional
      mem-cache: TempCacheBlk allocates and destroys its own data

Timothy M. Jones <timothy.jones@arm.com> (5):
      branch predictor: move out of o3 and inorder cpus This patch moves the branch predictor files in the o3 and inorder directories to src/cpu/pred. This allows sharing the branch predictor across different cpu models.
      cpu: Let python scripts obtain the number of instructions executed
      Cache: Collect very basic stats on tag and data accesses
      uby: Fix checkpointing and restore
      sim: function for testing for auto deletion

Uri Wiener <uri.wiener@arm.com> (5):
      DOT: fixed broken code for visualizing configuration using dot
      DOT: improved dot-based system visualization Revised system visualization to reflect structure and memory hierarchy. Improved visualization: less congested and cluttered; more colorful. Nodes reflect components; directed edges reflect dirctional relation, from a master port to a slave port. Requires pydot.
      Bus: enable non/coherent buses sub-classes This patch merely changes several methods to be virtual in order to enable non/coherent buses sub-classes.
      mem: Adding verbose debug output in the memory system
      mem: Add basic stats to the buses

Binh Pham <binhpham@cs.rutgers.edu> (4):
      o3: split load & store queue full cases in rename
      o3: make dispatch LSQ full check more selective
      x86: fix table walker assertion
      x86: make PioBus return BadAddress errors

Daniel Johnson <daniel.johnson@arm.com> (4):
      ARM: Fix mp interrupt bug in GIC.
      ARM: Implement numcpus bits in L2CTLR register.
      Mem: Allow ASID to be set after request is created.
      ARM: update TLB to set request packet ASID field

Emilio Castillo <castilloe@unican.es> (4):
      ruby: Fixed a deadlock when restoring a checkpoint with garnet This patch fixes a problem where in Garnet, the enqueue time in the VCallocator and the SWallocator which is of type Cycles was being stored inside a variable with int type.
      ruby: Fixes clock domains in configuration files
      x86 : fxsave and fxrestore missing template code
      cpu: quiesce pseudoinsts: Always do full quiesce

Erfan Azarkhish <erfan.azarkhish@unibo.it> (4):
      mem: hmc: top level design
      mem: hmc: adds controller
      mem: hmc: serial link model
      mem: hmc: minor fixes

Jayneel Gandhi <jayneel@cs.wisc.edu> (4):
      Config: Add command line options for disk image and memory size Added the options to Options.py for FS mode with backward compatibility. It is good to provide an option to specify the disk image and the memory size from command line since a lot of disk images are created to support different benchmark suites as well as per user needs. Change in program also leads to change in memory requirements. These options provide the interface to provide both disk image and memory size from the command line and gives more flexibility.
      SE Config: Changed se.py to support multithreaded mode Multithreaded programs did not run by just specifying the binary once on the command line of SE mode.The default mode is multi-programmed mode. Added check in SE mode to run multi-threaded programs in case only one program is specified with multiple CPUS. Default mode is still multi-programmed mode.
      Config: Fix help msg for option --mem-size
      X86 TLB: Fix for gcc 4.4.3 Due to recent changes to X86 TLB, gem5 stopped compiling on gcc version 4.4.3. This patch provides the fix for that problem. The patch is tested on gcc 4.4.3. The change is not required for more recent versions of gcc (like on 4.6.3).

Lisa Hsu <Lisa.Hsu@amd.com> (4):
      Functional Accesses: Update states to support Broadcast/Snooping protocols.
      Fix build for gcc-4.2 opt/fast
      TLB: comments and a helpful warning.
      slicc: Controllers attached to Sequencers no longer have to be named L1Cache.

Marco Balboni <Marco.Balboni@ARM.com> (4):
      mem: Clarify usage of latency in the cache
      mem: Clarification of packet crossbar timings
      mem: Add crossbar latencies
      mem: Downstream components consumes new crossbar delays

Michiel Van Tol <michiel.vantol@arm.com> (4):
      cpu: Turn BaseTrafficGen numSuppressed into a stat
      base: Add argument to Coroutine class to not run on creation
      dev-arm: Add 16K granule support to SMMUv3 model
      dev-arm: Fix SMMUv3 walkMasks in page table ops

Mohammad Alian <m.alian1369@gmail.com> (4):
      dist, dev: add an ethernet switch model
      dist: config file for distributed switch
      dist, dev: Fixed the packet ordering in etherswitch
      dev, dist: Fixed a scheduling bug in the etherswitch

Palle Lyckegaard <palle@lyckegaard.dk> (4):
      NetBSD: Build on NetBSD
      sparc: writing to tick_cmpr should not cause a panic
      sparc: add missing parameter to makeSparcSystem()
      sparc: Make remote debugging with gdb work Remove sparc V8 TBR register from list of registers since it is not part of sparc V9. This brings the number of registers in sync with what gdb expects

Rico Amslinger <rico.amslinger@informatik.uni-augsburg.de> (4):
      cpu: Fix bi-mode branch predictor thresholds
      sim-se: Fix mremap for downward growing mmap regions
      mem, sim-se: Fixed seg-fault in EmulationPageTable::remap
      mem-ruby: Fix RubyPrefetcher support in MESI_Two_Level

Ruslan Bukin <br@bsdpad.com> (4):
      dev: Extend access width for IDE control registers
      sim: correct check for endianess
      arch, base, dev, kern, sym: FreeBSD support
      arch: fix build under MacOSX put O_DIRECT under ifdefs -- this fixes build for MacOSX. Also use correct class for arm64 openFlagTable.

Srikant Bharadwaj <srikant.bharadwaj@amd.com> (4):
      sim: Fix data type of ticks per second before passing it to C++
      cpu: Fix indirect branch history updates
      ruby: Fix garnet's round robin arbitration for vc selection
      ruby: Fix the way stall map size is checked for availability

Sudhanshu Jha <sudhanshu.jha@arm.com> (4):
      arm, kmi: Clear interrupts in KMI devices
      dev, kvm: Add a fast KVM-aware mode in DmaReadFifo
      dev: Add support for single-pass scan out in the PixelPump
      dev, arm: Render HDLCD frames at a fixed rate in KVM

Swapnil Haria <swapnilster@gmail.com> (4):
      x86: Invalidating TLB entry on page fault
      x86: Add stats to X86 TLB
      mem-ruby: Support atomic_noncaching acceses in ruby
      arch-x86: Adding clflush, clflushopt, clwb instructions

Tommaso Marinelli <tommarin@ucm.es> (4):
      stats: Add M5_VAR_USED to variable
      mem: Remove unused variable
      kvm: Rename gettid() to build with glibc 2.30+
      arch: Drop sysctl support if built against glibc

Yu-hsin Wang <yuhsingw@google.com> (4):
      sim: Move destructor of Port to public
      scons: Add '-Wl,--as-needed' to default LINKFLAGS
      python: Add a warning if pydot is not available.
      dev-arm: Fix setupBootloader for VExpressFastmodel

Adrien Pesle <adrien.pesle@arm.com> (3):
      dev-arm: Add basic support for level sensitive SPIs in GICv2
      dev-arm: Fix Gicv2 distributor group register
      dev-arm: Don't panic when EOIR a non active PPI

Amin Farmahini <aminfar@gmail.com> (3):
      mem: Replacing bytesPerCacheLine with DRAM burstLength in SimpleDRAM
      mem: Fixes a bug in simple_dram write merging Fixes updating the value of size in the write merge function.
      mem: Remove redundant findVictim() input argument The patch (1) removes the redundant writeback argument from findVictim() (2) fixes the description of access() function

Bradley Wang <radwang@ucdavis.edu> (3):
      cpu: Removed unnecessary file reg_class_impl.hh
      cpu: Add hash functionality for RegId class
      base: Replace cppversion == version with >= version

Brian Grayson <b.grayson@samsung.com> (3):
      ARM: Fix branch prediction issue with CB(N)Z instruction
      O3: Add fatal when fetchWidth > Impl::MaxWidth.
      O3: Fix size of skid buffer between fetch and decode when widths are different

Christopher Torng <clt67@cornell.edu> (3):
      mips: Floating point convert bug fix
      sim: Add support for dynamic frequency scaling This patch provides support for DFS by having ClockedObjects register themselves with their clock domain at construction time in a member list. Using this list, a clock domain can update each member's tick to the curTick() before modifying the clock period.
      cpu: Enable fast-forwarding for MIPS InOrderCPU and O3CPU A copyRegs() function is added to MIPS utilities to copy architectural state from the old CPU to the new CPU during fast-forwarding. This addition alone enables fast-forwarding for the o3 cpu model running MIPS.

Djordje Kovacevic <djordje.kovacevic@arm.com> (3):
      CPU: O3-PipeView.py doesn't display the end of timelines. Insts' timeline that stretches over multiple lines doesn't always get printed.
      CPU: Add abandoned instructions to O3 Pipe Viewer
      MEM: Put memory system document into doxygen

Eric Van Hensbergen <eric.vanhensbergen@arm.com> (3):
      arm: Accomodate function name changes in newer linux kernels
      arm: m5ops readfile64 args broken, offset coming through garbage
      arm: Add Makefile for aarch64 build of util/m5

Hsuan Hsu <hsuan.hsu@mediatek.com> (3):
      cpu-o3: Fix corrupted rename map in vector mode switching
      cpu-o3: Fix unset scoreboard in vector mode switching
      cpu: Don't assert on branch target addresses

Isaac Sánchez Barrera <isaac.sanchez@bsc.es> (3):
      base,python: Fix to allow multiple --debug-ignore values.
      mem-cache: Fix destructor of `BasePrefetcher::PrefetchInfo`.
      mem-cache: Initialize all members of `QueuedPrefetcher::DeferredPacket`.

Jing Qu <jqu32@wisc.edu> (3):
      gpu-compute: Fix overriden errors
      mem-ruby: prevent cacheProbe being called multiple times
      mem-ruby: Allow Ruby to use all replacement policies in Classic

Jiuyue Ma <majiuyue@ncic.ac.cn> (3):
      config, x86: swap bus_id of ISA/PCI in X86 IntelMPTable
      config, x86: Ensure that PCI devs get bridged to the memory bus
      x86: add LongModeAddressSize function to cpuid

John Kalamatianos <john.kalamatianos@amd.com> (3):
      gpu: fix bugs with MemFence, Flat Instrs and Resource utilization
      gpu-compute: remove unused variable from scoreboard check stage
      gpu-compute: parametrize Wavefront size

Koan-Sin Tan <koansin.tan@gmail.com> (3):
      clang: Enable compiling gem5 using clang 2.9 and 3.0
      ARM: Add RTC to PBX System
      ARM: fix the calculation of the values in the RV clocks

Lluís Vilanova <vilanova@ac.upc.edu> (3):
      x86, util: add m5_writefile to m5op_x86.S
      util: add m5_fail op.
      util: add writefile to m5 util program for x86

Mahyar Samani <msamani@ucdavis.edu> (3):
      tests, base: Removed ambiguity from base/intmath.hh
      tests, base: Removed dead code from base/intmath
      arch-x86: Add hsub instructions to x86

Rene de Jong <rene.dejong@arm.com> (3):
      mem: Cancel cache retry event when blocking port
      arm, dev: Add a NAND flash timing model
      arm, dev: Add a UFS device

Stan Czerniawski <stan.czerniawski@arm.com> (3):
      build: Enable color diagnostics in clang by preserving TERM.
      cpu: Add basic check to TrafficGen initial state
      misc: Fix -q (quiet) flag

William Wang <william.wang@arm.com> (3):
      MEM: Remove the functional ports from the memory system
      MEM: Introduce the master/slave port sub-classes in C++
      stats: when applying an operation to two vectors sum the components first.

Éder F. Zulian <zulian@eit.uni-kl.de> (3):
      misc: minor fix for the gem5-SystemC/TLM coupling.
      misc: git ignore file udpated
      config, mem, hmc: fix HMC test script

Adrià Armejach <adria.armejach@bsc.es> (2):
      arch-arm: Fix decoding for SVE memory instructions
      arch-arm: Fix decoding of LDFF1x scalar plus scalar

Bertrand Marquis <bertrand.marquis@arm.com> (2):
      system-arm: Rework boot loader makefile to be more generic
      system-arm: Use dts include instead of cpp in ARM DTBs

Blake Hechtman <bah13@duke.edu> (2):
      ruby: fixes functional writes to RubyRequest The functional write code was assuming that all writes are block sized, which may not be true for Ruby Requests. This bug can lead to a buffer overflow.
      mem: misc flags for AMD gpu model

Cagdas Dirik <cdirik@micron.com> (2):
      dev: prevent RTC events firing before startup
      dev: prevent intel 8254 timer counter events firing before startup

Dibakar Gope <gope@wisc.edu> (2):
      ruby: mesi coherence protocol: invalidate lock The MESI CMP directory coherence protocol, while transitioning from SM to IM, did not invalidate the lock that it might have taken on a cache line. This patch adds an action for doing so.
      cpu: re-organizes the branch predictor structure.

Edmund Grimley Evans <Edmund.Grimley-Evans@arm.com> (2):
      arch-arm: Add FP16 support and other primitives to fplib
      arch-arm: Add FP16 support introduced by Armv8.2-A

Jan-Peter Larsson <jan-peter.larsson@arm.com> (2):
      dev, arm: Warn on PL011 DMA disable
      dev-arm: Implement invalidateASID in SMMUv3 WalkCache

Javier Cano-Cano <javier.cano555@gmail.com> (2):
      ruby: Fix MOESI_CMP_directory for new DMA status changes.
      mem-garnet: Fix garnet stats

Jieming Yin <jieming.yin@amd.com> (2):
      ruby: Fix potential bugs in garnet2.0
      ruby: Detect garnet network-level deadlock.

John Alsop <johnathan.alsop@amd.com> (2):
      mem-ruby: enable DPRINTFN calls in slicc for temporary debug printing
      mem-ruby: Enable set size increase

Jui-min Lee <fcrh@google.com> (2):
      arch-arm: Fix clang warnings
      systemc: Fix tlm2 socket integration

Kanishk Sugand <kanishk.sugand@arm.com> (2):
      mem: Add a stack distance calculator
      mem: Add stack distance statistics to the CommMonitor

Karthik Sangaiah <karthik.sangaiah@arm.com> (2):
      dev, arm: Add gem5 extensions to support more than 8 cores
      arm: Bootloader fix for v8 over 16 cores

Kevin Brodsky <kevin.brodsky@arm.com> (2):
      util: Do not use $(PWD) in Makefiles
      system-arm: Fix dtsi dependencies in Makefile

Krishnendra Nathella <Krishnendra.Nathella@arm.com> (2):
      sim: add validation to make sure there is memory where we're loading the kernel
      cpu: Fix LLSC atomic CPU wakeup

Lluc Alvarez <lluc.alvarez@bsc.es> (2):
      SE: Ignore FUTEX_PRIVATE_FLAG of sys_futex
      ruby: set SenderMachine in messages of MOESI_CMP_directory This patch adds missing initializations of the SenderMachine field of out_msg's when thery are created in the L2 cache controller of the MOESI_CMP_directory coherence protocol. When an out_msg is created and this field is left uninitialized, it is set to the default value MachineType_NUM. This causes a panic in the MachineType_to_string function when gem5 is executed with the Ruby debug flag on and it tries to print the message.

Marc Mari Barcelo <marc.maribarcelo@arm.com> (2):
      dev-arm: Fix address used to update the SMMUv3 Walk Cache
      dev-arm: Improve fault message on SMMUv3 translation fault

Matt Poremba <matthew.poremba@amd.com> (2):
      base: Output all AddrRange parameters to config.ini
      mem-ruby: Replace SLICC queueMemory calls with enqueue

Matthias Hille <matthiashille8@gmail.com> (2):
      x86: Fixed remote debugging of simulated code
      cpu-o3: fix data pkt initialization for split load

Maurice Becker <madnaurice@googlemail.com> (2):
      Pl011: Added registers UART_RSR/UART_ECR
      dev, arm: fix error class-memaccess with GCC >= 8.1

Michael Adler <Michael.Adler@intel.com> (2):
      sim: implement getdents/getdents64 in user mode
      sim: mmap: correct behavior for fixed address Change mmap fixed address request to return an error if the mapping is impossible due to conflict instead of what I believe used to be silent corruption.

Michael Levenhagen <mjleven@sandia.gov> (2):
      x86: enable gettimeofday and getppid system calls
      x86: corrects vsyscall address for gettimeofday The vsyscall address for gettimeofday is 0xffffffffff600000ul. The offset therefore should be 0x0 instead of 0x410. This can be cross checked with the file sysdeps/unix/sysv/linux/x86_64/gettimeofday.c in source of glibc.

Mingyuan <xiang_my@outlook.com> (2):
      mem-cache: Fixed a bug in MRU replacement policy
      mem-cache: set the second chance to false when inserting a block

Moyang Wang <mw828@cornell.edu> (2):
      sim, kern: support FUTEX_CMP_REQUEUE
      kern,sim: implement FUTEX_WAKE_OP

Nuwan Jayasena <Nuwan.Jayasena@amd.com> (2):
      ruby: memory controllers now inherit from an abstract "MemoryControl" class
      ruby: adds reset function to Ruby memory controllers

Pin-Yen Lin <treapking@google.com> (2):
      net: Fix a bug when handling IPv6 packets
      net: Fix a bug when receiving fragamented packets

Reiley Jeapaul <Reiley.Jeyapaul@arm.com> (2):
      sim: Added library include to fix build errors on clang-703.0.31
      cpu: Fixed clang errors. Added 'override' keyword for virtual functions.

Riken Gohil <Riken.Gohil@arm.com> (2):
      cpu-tester: Refactoring traffic generators into separate files.
      cpu-tester: Added ExitGen to TrafficGen

Rizwana Begum <rb639@drexel.edu> (2):
      config: Fix for 'android' lookup in disk name This patch modifies FSConfig.py to look for 'android' only in disk image name. Before this patch, 'android' was searched in full disk path.
      mem: Simplify page close checks for adaptive policies

Rohit Kurup <rohit.kurup@arm.com> (2):
      dev: Fix OnIdle test in DmaReadFifo
      dev-arm: Add new VExpress_GEM5_V1_Base Platform

Ron Dreslinski <rdreslin@umich.edu> (2):
      configs: A more realistic configuration of an ARM-like processor
      configs: actually add ARMv7a-like cpu/cache file

Rune Holm <rune.holm@arm.com> (2):
      arm: Fix typo in ldrsh instruction name
      arm: Delete debug print in initialization of hardware thread

Sandipan Das <sandipan@linux.ibm.com> (2):
      arch-power: Simplify doubleword operand types
      arch-power: Rename program counter registers

Sherif Elhabbal <elhabbalsherif@gmail.com> (2):
      power: Add a clock_period variable to power expressions
      config, arm, power: Example to report the power for the L2 Cache

Stanislaw Czerniawski <stacze01@arm.com> (2):
      mem: Add StreamID and SubstreamID
      dev-arm: Implement a SMMUv3 model

Trivikram Reddy <tvreddy@ucdavis.edu> (2):
      cpu: change the location of BTBlookup
      cpu: update info related direction into BP if mispredicted.

Victor Garcia <victor.garcia@arm.com> (2):
      kvm, arm: Fix compilation errors due to API changes
      mem: Add Program Counter to MemTraceProbe

Vince Weaver <vince@csl.cornell.edu> (2):
      X86: Make gem5 ignore a bunch of syscalls.
      X86: Fix up the open system call's flags.

Wade Walker <wade.walker@arm.com> (2):
      ARM: Add two unimplemented miscellaneous registers.
      ARM: Fix SWP/SWPB undefined instruction behavior

Weiping Liao <weipingliao@google.com> (2):
      config: Changes to boot Android N
      config: Adjust load_addr_mask in VExpress_GEM5_V1

Xiangyu Dong <rioshering@gmail.com> (2):
      mem: Add cache class destructor to avoid memory leaks
      cpu: fix bug when TrafficGen deschedules event

Xiaoyu Ma <xiaoyuma@google.com> (2):
      sim: Allow passing a user-defined L2XBar to addTwoLevelCacheHierarchy().
      mem-cache: Allow prefetchers to override setCache.

Yuetsu Kodama <yuetsu.kodama@riken.jp> (2):
      arch-arm: We add PRFM PST instruction for arm
      arch-arm: FIXUP for the add PRFM PST instruction commit

ARM gem5 Developers <none@none> (1):
      arm: Add support for ARMv8 (AArch64 & AArch32)

Anders Handler <s052838@student.dtu.dk> (1):
      CPU: Remove Alpha-specific PC alignment check.

Andrea Pellegrini <andrea.pellegrini@gmail.com> (1):
      o3 cpu: fix zero reg problem There was an issue w/ the rename logic, which would assign a previous physical register to the ZeroReg architectural register in x86.  This issue was giving problems for instructions squashed in threads w/ ID different from 0, sometimes allowing non-mispredicted instructions to obtain a value different from zero when reading the zeroReg.

Andriani Mappoura <andriani.mappoura@arm.com> (1):
      arch-arm: Correct the Ids and names of the PMU events

Anis Peysieux <anis.peysieux@inria.fr> (1):
      mem-cache: Fix RRPV for RRIP

Ashkan Tousi <ashkan.tousimojarad@arm.com> (1):
      config, arm: Add a high-performance in order timing model

Avishai Tvila <avishai.tvila@gmail.com> (1):
      arch-riscv,isa: Fix for compressed jump (c_j) imm

Bagus Hanindhito <hanindhito@bagus.my.id> (1):
      x86: Call the base class's regStats in X86ISA::TLB

Chen Zou <chenzou@uchicago.edu> (1):
      configs: Fill in the cpu.isa field in etrace_replay.py since no default are provided now

Chris Adeniyi-Jones <Chris.Adeniyi-Jones@arm.com> (1):
      sim: Add openat/fstatat syscalls and fix mremap

Christoph Pfister <pfistchr@student.ethz.ch> (1):
      mem: addr_mapper: restore old address if request not sent

Dongxue Zhang <elta.era@gmail.com> (1):
      dev: IDE Disk: Handle bad IDE image size

Doğukan Korkmaztürk <d.korkmazturk@gmail.com> (1):
      stats: Catch exceptions by const reference

Erik Tomusk <E.Tomusk@sms.ed.ac.uk> (1):
      TournamentBP: Fix some bugs with table sizes and counters globalHistoryBits, globalPredictorSize, and choicePredictorSize are decoupled. globalHistoryBits controls how much history is kept, global and choice predictor sizes control how much of that history is used when accessing predictor tables. This way, global and choice predictors can actually be different sizes, and it is no longer possible to walk off the predictor arrays and cause a seg fault.

Fernando Endo <fernando.endo2@gmail.com> (1):
      cpu, arm: Distinguish Float* and SimdFloat*, create FloatMem* opClass

Gabe Loh <gabriel.loh@amd.com> (1):
      config: command line option to specify ruby output file

Georg Kotheimer <georg.kotheimer@mailbox.tu-dresden.de> (1):
      style: normalize filename in SortedIncludes.fix()

Hamid Reza Khaleghzadeh <khaleghzadeh@gmail.com> (1):
      ruby: reset and dump stats along with reset of the system This patch adds support to ruby so that the statistics maintained by ruby are reset/dumped when the statistics for the rest of the system are reset/dumped. For resetting the statistics, ruby now provides the resetStats() function that a sim object can provide. As a consequence, the clearStats() function has been removed from RubySystem. For dumping stats, Ruby now adds a callback event to the dumpStatsQueue. The exit callback that ruby used to add earlier is being removed.

Hongil Yoon <ongal@cs.wisc.edu> (1):
      cpu, o3: consider split requests for LSQ checksnoop operations

Hussein Elnawawy <hussein.elnawawy@gmail.com> (1):
      mem-ruby: Checkpoint from MOESI_hammer Ruby hangs

Ilias Vougioukas <Ilias.Vougioukas@ARM.com> (1):
      cpu: fix lastStopped unserialisation

Isaac Richter <isaac.richter@rochester.edu> (1):
      arch-x86: Make LFENCE a serializing instruction

Jakub Jermar <jakub@jermar.eu> (1):
      config: Allow SPARC FS image to be specified on the command line

James Clarkson <james.clarkson@arm.com> (1):
      m5: Expose m5 pseudo-instructions to C/C++ via a static library

Khalique <khalique913@gmail.com> (1):
      sparc: Fix FS Checkpoint loading

Marjan Fariborz <mfariborz@ucdavis.edu> (1):
      arch-x86: Adding LDDQU instruction

Mark Hildebrand <mhildebrand@ucdavis.edu> (1):
      misc: Get gem5 to build with Clang 8

Matteo M. Fusi <matteo.fusi@bsc.es> (1):
      SConstruct: additional message for the error checking of the python 2.7 headers

Maxime Martinasso <maxime.cscs@gmail.com> (1):
      x86: implements the simd128 ADDSUBPD instruction

Maximilian Stein <maximilian.stein@tu-dresden.de> (1):
      arch-x86: Granularity bit and segment limit

Maximilien Breughe <maximilien.breughe@elis.ugent.be> (1):
      inorder: MDU deadlock fix

Mike Upton <michaelupton@gmail.com> (1):
      arm: Add unlinkat syscall implementation

Min Kyu Jeong <minkyu.jeong@arm.com> (1):
      mem: Change DPRINTF prints more useful destination port number. Old code prints 0 for destination since pkt->getDest() returns 0 for pkt->getDest() == Packet::Broadcast, which is always true.

Monir Mozumder <monir.mozumder@amd.com> (1):
      syscall_emul: update x86 syscall table Update table with additional definitions through Linux 3.13.

Nayan Deshmukh <nayan26deshmukh@gmail.com> (1):
      config: remove dead code in fs.py

Nicholas Lindsay <nicholas.lindsay@arm.com> (1):
      python: Always throw TypeError on slave-slave connections

Nicolas Derumigny <nderumigny@gmail.com> (1):
      syscall: read() should not write anything if reading EOF.

Ola Jeppsson <ola.jeppsson@gmail.com> (1):
      unittest: Fix build errors

Pablo Prieto <pablo.prieto@unican.es> (1):
      mem-ruby, arch-hsail: Removed hit latency from VIPERCoalescer

Po-Hao Su <supohaosu@gmail.com> (1):
      configs: Use param to get number of processors

Polydoros Petrakis <ppetrak@ics.forth.gr> (1):
      mem-ruby: Reset Ruby Sequencer Outstanding Requests stats

Pritha Ghoshal <pritha9987@tamu.edu> (1):
      IGbE: Fix writeback conditions for i8254x GbE in updated data sheet.

Ricardo Alves <ricardo.alves@arm.com> (1):
      arm: Add m5_fail support for aarch64

Robert Scheffel <robert.scheffel1@tu-dresden.de> (1):
      arch-riscv: enable rudimentary fs simulation

Ruben Ayrapetyan <ruben.ayrapetyan@arm.com> (1):
      arch-arm: Fix initialization of PMU counters

Rutuja Oza <roza@ucdavis.edu> (1):
      tests: Add tests for learning_gem5 configs

Samuel Grayson <sam@samgrayson.me> (1):
      ext: Fix undefined-behavior bug in bitshift

Santi Galan <santi.galan@metempsy.com> (1):
      x86: fixed branching() computation for branch uops

Sean McGoogan <Sean.McGoogan@arm.com> (1):
      arch, arm: Print value being ignored on DummyISA write

Sergei Trofimov <sergei.trofimov@arm.com> (1):
      sim: added missing include to mathexpr.hh

Severin Wischmann <wiseveri@student.ethz.ch> (1):
      x86: syscall: implementation of exit_group On exit_group syscall, we used to exit the simulator.  But now we will only halt the execution of threads that belong to the group.

Shawn Rosti <shawn.rosti@gmail.com> (1):
      arm: Fix for ARM's Streamline conversion script

Sooraj Puthoor <puthoorsooraj@gmail.com> (1):
      ruby: init MessageSizeType of SequencerMsg to Request_Control

Sophiane Senni <sophiane.senni@gmail.com> (1):
      mem: Split the hit_latency into tag_latency and data_latency

Stian Hvatum <stian@dream-web.no> (1):
      scons: compile on systems where python2 and python3 co-exist Compile gem5 on systems where python2 and python3 co-exists without any changes in path. python2-config is chosen over python-config if it exists.

Sujay Phadke <electronicsguy123@gmail.com> (1):
      alpha: fix for no 'break' in the case statement

Tao Zhang <tao.zhang.0924@gmail.com> (1):
      sim: Fix  early termination in multi-core simulation under SE mode.

Thomas Grass <Thomas.Grass@ARM.com> (1):
      Stats: Add a sparse histogram stat object.

Tom Jablin <tjablin@gmail.com> (1):
      sim: invalid alignment checks in mmap and mremap Presently, the alignment checks in the mmap and mremap implementations in syscall_emul.hh are wrong. The checks are implemented as:

Umesh Bhaskar <umesh.b2006@gmail.com> (1):
      debug : Fixes the issue wherein Debug symbols were not getting dumped into trace files for SE mode

Willy Wolff <willy.mh.wolff.ml@gmail.com> (1):
      config, arm: memoryMode test

Xianwei Zhang <xianwei.zhang@amd.com> (1):
      mem-ruby: Fix a bug in MessageBuffer randomization

Xin Ouyang <xin.ouyang@streamcomputing.com> (1):
      arch-riscv: fix asmtest concurrent issues.

Yifei Liu <liu.ad2039@gmail.com> (1):
      arch-riscv: Update register file

Yuan Yao <yuanyao@seas.harvard.edu> (1):
      mem-ruby: Fix fast-forward when using the backing store.

Zhang Zheng <perise@gmail.com> (1):
      configs: fixed SimpleOpts missing error by adding library path

Zicong Wang <wangzicong@nudt.edu.cn> (1):
      mem-ruby: Fix missing TBE allocation and deallocation

jiegec <noc@jiegec.ac.cn> (1):
      tests: Use relative path for python3 compliance

seanzw <seanyukigeek@gmail.com> (1):
      arch-x86: Fix FLDCW_P and FNSTCW_P to use rip.

